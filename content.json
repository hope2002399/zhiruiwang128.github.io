{"pages":[{"title":"404","text":"404","link":"/404.html"},{"title":"关于","text":"过去十八岁，没戴表 不过有时间，够我 没有后顾，野性贪玩 霎眼廿七岁，时日无多方不敢偷懒 宏愿纵未了，奋斗总不太晚","link":"/about/index.html"}],"posts":[{"title":"终于有人把Linux运维工程师说清楚了！靠谱！","text":"作为互联网的幕后英雄，Linux运维工程师长期隐匿在大众认知范围之外，关于运维的讨论仍旧是一片无人涉足的荒漠。在某知名行业研究调查结果中，非互联网从业者对于运维相关问题的回复有三个高频词汇是：不知道、没听过、网管。当调查人员告诉他们科幻电影中展示黑客高超技巧时的命令行界面，正是大多数运维工程师每日工作环境时，他们发出极其一致的惊叹。相对于普罗大众的一无所知，技术圈对运维的态度则更偏向于黑色幽默。 相较于开发等工作岗位，7*24小时待命的运维工程师总是默默无闻作为守护者，当然同时还要接受“背锅侠”这一艰巨使命。 其实，Linux运维工程师被称为“背锅侠”只是网友调侃，有不少同学对这个岗位工作还是有一定误解。在双十一即将来临之际我们介绍下这个幕后英雄的技术岗位-Linux运维工程师 目前国内互联网、移动支付、O2O业务发展迅猛，需要为亿万用户提供线上服务。像腾讯、百度、阿里等一线互联网公司，需要数十万台服务器和成千上万IT从业人士，来提供技术服务。 那么在很多企业IT技术工程师中，一般会分为：开发、测试、运维等几大分支，其中，开发和运维大类中，又可分为很多具体技术岗位。 在众多互联网公司，IT技术岗位，整体分为三大类: 1、开发岗位，也就是我们所说的码农，天天撸代码。 2、测试岗位，找码农写的bug，然后让码农改，改好后上线。 3、运维岗位，需要搭建好线上服务环境及架构，并保证代码无误上线，及线上业务正常能够被用户访问。 开发-测试-运维分工：在企业中，整个技术生产线是这样的流程： 开发需要开发好代码—&gt; 交给测试工程师测试—–&gt;测试完成后，提交给运维工程师进行上线 运维工程师，的一个重要工作是需要把开发写好的代码，发布出去，给用户提供服务。当然，很多大公司已经实现可持续集成，开发自己就能发布。但这个环节，也少不了运维工程师的支持。可以看出，Linux运维工程师在整个环节中是离用户最近的，也是决定用户访问质量的重要环节。随着移动互联网、O2O、云计算、大数据的发展，服务器的可用性，成为各家公司技术的分水岭，对于一些大的互联网公司而言，对服务器的可用性要求极高，有些要求可达到99.99%（一年停机时间不超过1小时） 所以，公司对服务可靠性的追求，也会转化为对运维工程师的技能和能力要求，这也是目前高端运维工程师十分稀缺的原因，有不少企业，薪资30-50W找高端运维，但是很难找到合适的。要想成为一个高端Linux运维工程师，都需要具备哪些能力呢？ 如下图所示： 看完以上能力要求，应该不会再认为Linux运维工程师没有开发重要了吧。Linux运维工程师，在企业担负非常重要的环节，这也是Linux运维工程师这个岗位，薪资高原因，甚至到后期薪资会比开发高的多。有很多前期做网管，桌面运维或者技术支持的同学，到后期，基本都选择转Linux运维岗，随着云技术的推广，docker、K8s、DevOPS普及，低端的技术支持岗位，会慢慢被边缘化，取而代之的是会这些新技术的中高级运维工程师。我有很多朋友做运维，腾讯、百度、阿里这些厂商，对于优秀的运维工程师，给年薪50W的还是不难的。在一线城市，对于不少刚入门的新手，基本起薪也能达到8K-15K左右。下图招聘的薪资，也是不低的。 Linux运维工程师，总体来说，是比开发要好掌握一些，开发是要求比较高的数学能力，因为到后期，算法会成为很多人的天花板，Linux运维工程师学起来比较容易一些，都是实操类的学科，把命令、安装、配置和服务练熟。技术支持岗位往往到后期，都会选择晋升到Linux运维工程师。而且对于刚毕业的大学生来说，学习起来是非常顺手的，因为在学校的课程中，就包含了不少运维所需要的基本技能：操作系统、网络、数据库、Linux等。对于转行的人来说，Linux运维工程师的趣味性比较强一些，上手也更容易些，尤其是女生想学IT，Linux运维是首选，上手容易趣味性强，薪资高，将来工作还轻松，因为会有一堆男同胞，帮你解决问题。 下面是年薪50W的Linux云计算工程师的学习路线图：想成为合格运维工程师，需要掌握不少技能，Linux运维工程师讲究的是广度， 1、Linux 系统基础入门-Linux的基础知识内容，和命令使用，以及用户和权限等核心知识点 2、Linux 系统管理和进阶-Linux从进程、资源、任务、文件、软件包、磁盘等管理 3、Linux 企业常用服务-企业级常用服务如DNS、FTP、Http、mail 4、Linux 企业级安全原理和防范技巧以及网络和安全-Linux安全架构、安全威胁模型、以及加密、解密等原理，常见攻击和防范⼿段 5、Shell 编程入门及进阶-Shell脚本基本用法以及进阶，从基础到精通，需要学习一些企业级常见脚本用法 6、MySQL 应用原理及管理入门-Mysql安装、管理、授权、增删改查 7、http 服务代理缓存加速-http 级协议应用、缓存、web服务nginx 8、企业级负载集群-企业级4层负载均衡LVS、和7层负载均衡nginx以及haproxy的企业应用，静动分离等 9、企业级高可用集群-高可用集群原理，实现以keepalived为核心的高可用集群，以及主从高可用、双主，分库分表 10、运维监控zabbix-企业级监控体系以及zabbix开源监控系统的功用及架构，自动发现，插件开发 11、云计算运维自动化-Ansible、Puppet等运维自动化解决方案，Ansible生产环境应用案例和实战操练、批量进行上百台服务器 12、WEB 服务体系架构-WEB服务体系架构，JSP体系、tomcat、CDN、缓存原理、压测、评估、LNMP、LAMP等 13、大型互联网集群架构和实战例案-LB集群：nginx、Haproxy、LVS HA集群、动静分离 14、MySQL DBA 实战技能和优化-数据库参数优化、分库分表、备份方案、数据恢复策略、主从复制、读写分离、连接池及sharding技术、MHA等 15、企业级云计算Openstack-Keystone、Glance、Nova核心组件、网络模块、块存储服务等 16、企业级⼤数据Hadoop 运维实战-列式数据库HBase基础原理、安装配置及其应用、Zookeeper集群构建、hadoop实现Namenode高可用 17、企业级虚拟化KVM 实战-KVM环境：KVM的安装、配置及应用 18、NoSQL 企业级应用-Nosql 应用，Redis、Mongodb、memcached分布式缓存集群实战 19、企业级日志收集系统ELK 实战-海量数据日志收集系统Elasticsearch+Logstash+kibana 应用 20、可持续化集成-Jenkins+github企业级应用 21、虚拟化容器Docker-Linux 轻量虚拟化Docker ，Docker 的原理和安装，配置以及应用,以及生产环境配置和故障恢复 22、企业级K8S实战-组件功能、安装、配置、企业级应用场景和常见故障分析，kubernetes集群部署，Kubernetes 中的网络管理 23、Linux 系统调优实战-从内存、CPU、进程调度、磁盘IO、⽹络参数等全面讲解Linux系统调优 24、Python 自动化开发-python自动化工具开发、Python实现执行环境构建及代码测试示例 25、个人综合能力提升-表达能力、团队协作能力、执行能力、胜任力等 以上25条技能，每一条大概价值2K，你的工资多少，在这个行业，就取决于你会多少。要想挣钱，你要先值钱。 转载于：马哥教育","link":"/2019/11/19/终于有人把Linux运维工程师说清楚了！靠谱！/"},{"title":"运维规范文档与思想","text":"收集了一些觉得蛮好的经验 最好的学习方法是跟着学、照着做，思考咨询总结实践 运维做线上的变更或者操作的时候，一定要预先实战演练，做好充分准备工作; 运维做线上的变更或者操作的时候，有思路了一定不要只是存放在脑子里，按照脑子所想去做，而是写出详细的操作文档，然后审核操作过程，最后根据文档一步一步的做变更; 增强自己对运维基础知识的认知，这个案例很明显就是一个简单的iptables的默认规则的问题，如果你之前就对默认规则认知很清楚，我想这个坑在你这里是不存在的； 运维应该有意识的去提升自我的英文单词认识能力和阅读能力，如果你了解到了REJECT单词是拒绝的意思，我想你也不会跳进坑里，你会持有怀疑态度。 细节决定成败，运维时时刻刻都在监控告警和背锅的准备中，保持认真、谨慎的态度，时刻保持对运维工作持有敬畏之心。 复杂问题不会是因为简单问题也不明白 人总会犯错，因为人脑实在是不擅长处理重复性的任务，相比Shell脚本，人类的速度实在是太慢了。 偷懒是社会进步的第一动力。聪明的我们怎么会让自己一直在重复枯燥的事情上浪费时间，装系统、部署环境、发版本、批量操作，把这一切交给程序去实现吧，我们需要的是享受生活。 我们运维一定要强势强硬起来。在做好自己一切工作的前提下，任何黑锅我们都不背！！ 运维是天天在卖技术的，天天应付随时可能会发生的各种漏洞与网络攻击。 硬件问题要比操作系统与软件问题还来得严重，而人的问题又比硬件问题严重 监控便是运维的眼睛，把监控和性能管理做好后，运维就是一件很轻松的事情。目前比较流行的开源监控工具有Cacti、Nagios（Icinga）、Zabbix 系统运维，数据备份重于天 必须明白：最小的权限最少的服务=最大的安全 真正优秀的 Ops 流程，是不需要自己现场去手写这些脚本的，工具应该帮我们干了几乎所有的事情。手动脚本是介于手动命令和工具之间的手段，但总体来说依然是一个容易犯错而且缺乏延续性的做法。一个成熟的运维流程，应该把这些犯错的可能减到最小。","link":"/2019/08/14/运维规范文档与思想/"},{"title":"iptables基础笔记","text":"实现IP转发的功能echo 1 &gt; /proc/sys/net/ipv4/ip_forward对iptables配置文件的理解：/etc/sysconfig/iptables下记录的规则是从下到上读顺序读的。所以允许要在拒绝上面。而在终端下执行的语句则：先拒绝 再允许。 如果是部署远程的防火墙设备，一定要在计划任务中设置，定时关闭防火墙(建议5分钟关闭一次)，否则你会很痛苦； */5 * * * * /etc/init.d/iptables stop 屏蔽单个IP的命令 iptables -I INPUT -s 123.45.6.7 -j DROP #屏蔽单个IP的命令iptables-save 与service iptables save区别iptables防火墙规则的保存与恢复 iptables-save把规则保存到文件中，再由目录rc.d下的脚本（/etc/rc.d/init.d/iptables）自动装载 使用命令iptables-save来保存规则。一般用 iptables-save &gt; /etc/sysconfig/iptables生成保存规则的文件 /etc/sysconfig/iptables，也可以用 service iptables save它能把规则自动保存在/etc/sysconfig/iptables中。当计算机启动时，rc.d下的脚本将用命令iptables-restore调用这个文件，从而就自动恢复了规则。 -m state 指定包的状态 设置默认策略iptables -P INPUT DROP iptables -P FORWARD DROP iptables -P OUTPUT DROPiptables命令参数解释 -A 在指定链的末尾添加（append）一条新的规则 -D 删除（delete）指定链中的某一条规则，可以按规则序号和内容删除 -I 在指定链中插入（insert）一条新的规则，默认在第一行添加 -R 修改、替换（replace）指定链中的某一条规则，可以按规则序号和内容替换 -L 列出（list）指定链中所有的规则进行查看 -E 重命名用户定义的链，不改变链本身 -F 清空（flush） -N 新建（new-chain）一条用户自己定义的规则链 -X 删除指定表中用户自定义的规则链（delete-chain） -P 设置指定链的默认策略（policy） -Z 将所有表的所有链的字节和数据包计数器清零 -n 使用数字形式（numeric）显示输出结果 -v 查看规则表详细信息（verbose）的信息 -V 查看版本(version) -h 获取帮助（help） “-i” 表示接口。不过，-i 和 -o 都表示接口，-i 表示输入时的接口，而 -o 特指输出用的接口。 -A和-I。其中-A是添加到规则的末尾；-I可以插入到指定位置，没有指定位置的话默认插入到规则的首部。 删除指定规则 先用iptables -L -n –line-numbers 找出规则的序号 [root@tomcat ~]# iptables -L -n --line-numbers Chain INPUT (policy DROP) num target prot opt source destination 1 ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 tcp dpt:23 2 ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 state RELATED,ESTABLISHED 3 ACCEPT icmp -- 0.0.0.0/0 0.0.0.0/0 4 ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 5 ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 state NEW tcp dpt:22 6 REJECT all -- 0.0.0.0/0 0.0.0.0/0 reject-with icmp-host-prohibited 7 ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 tcp dpts:138:140 Chain FORWARD (policy ACCEPT) num target prot opt source destination 1 REJECT all -- 0.0.0.0/0 0.0.0.0/0 reject-with icmp-host-prohibited Chain OUTPUT (policy DROP) num target prot opt source destination 1 ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 tcp dpt:22 2 ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 tcp spt:22 如：删除OUTPUT链的第一条规则 iptables -D OUTPUT 1如果：OUTPUT 是默认策略为：DROP，要开放给10.0.2.0/24是网段访问，则要添加 iptables -A OUTPUT -d 10.0.2.0/24 -j ACCEPTiptables 预设的两个主要的 table ，各个table里面的chains与各个chains所代表的意义 filter 为预设的 Table，里头预设的链有：o INPUT：为来自外部，想要进入主机的封包；o OUTPUT：为来自主机，想要离开主机的封包；o FORWARD：为主机内部网域与外部网域的封包(不论进或者出)，但该封包不会进入主机。 还有 nat 这个 table： o PREROUTING：进行路由之前的封包传送过程o OUTPUT：离开主机的封包传送过程；o POSTROUTING：已经经过路由了，然后才进行的过滤规则。 禁pingiptables -I INPUT -p icmp --icmp-type 8 -j DROP接受dns的请求iptables -A INPUT -p tcp --sport 53 -j ACCEPT iptables -A INPUT -p udp --sport 53 -j ACCEPT 对REJECT与DROP的理解我们来举一个例子，让各位读者更直观地理解这两个拒绝动作的不同之处。比如有一天您正在家里看电视，突然听到有人敲门，您透过防盗门的猫眼一看是推销商品的，便会在不需要的情况下开门并拒绝他们（REJECT）。但如果您看到的是债主带了十几个小弟来讨债，此时不仅要拒绝开门，还要默不作声，伪装成自己不在家的样子（DROP）。 规则链的默认策略拒绝动作只能是DROP，而不能是REJECT。 －j LOG 在/var/log/messages将记录相应的日志Oct 30 16:36:54 tomcat kernel: IN=eth1 OUT= MAC=08:00:27:b2:e4:b3:52:54:00:12:35:02:08:00 SRC=10.0.2.2 DST=10.0.2.15 LEN=136 TOS=0x00 PREC=0x00 TTL=64 ID=2074 PROTO=TCP SPT=57748 DPT=22 WINDOW=65535 RES=0x00 ACK PSH URGP=0 配置文件各表格式：# Generated by iptables-save v1.2.6a on Wed Apr 24 10:19:17 2002 *filter :INPUT ACCEPT [404:19766] :FORWARD ACCEPT [0:0] :OUTPUT ACCEPT [530:43376] COMMIT # Completed on Wed Apr 24 10:19:17 2002 # Generated by iptables-save v1.2.6a on Wed Apr 24 10:19:17 2002 *mangle :PREROUTING ACCEPT [451:22060] :INPUT ACCEPT [451:22060] :FORWARD ACCEPT [0:0] :OUTPUT ACCEPT [594:47151] :POSTROUTING ACCEPT [594:47151] COMMIT # Completed on Wed Apr 24 10:19:17 2002 # Generated by iptables-save v1.2.6a on Wed Apr 24 10:19:17 2002 *nat :PREROUTING ACCEPT [0:0] :POSTROUTING ACCEPT [3:450] :OUTPUT ACCEPT [3:450] COMMIT # Completed on Wed Apr 24 10:19:17 2002我们来解释一下这个输出格式。 #后面的是注释。表都以*开始，例如*mangle。每个表都包含链和规则，链的详细说明是: [:]。例如，链的名字是 PREROUTING，策略是ACCEPT，然后是包记数器和字节计数器，这两个计数器和iptables -L -v输出中用到的计数器一样。每个表的描述都以关键字COMMIT结束，它说明在这一点，就要把规则装入内核了。 TableTable （） Explanation （注释） 表名:nat注释:nat表的主要用处是网络地址转换，即Network Address Translation，缩写为NAT。做过NAT操作的数据包的地址就被改变了，当然这种改变是根据我们的规则进行 的。属于一个流的包只会经过这个表一次。如果第一个包被允许做NAT或Masqueraded，那么余下的包都会自 动地被做相同的操作。也就是说，余下的包不会再通过这个表，一个一个的被NAT，而是自动地完成。这就 是我们为什么不应该在这个表中做任何过滤的主要原因，对这一点，后面会有更加详细的讨论。PREROUTING 链的作用是在包刚刚到达防火墙时改变它的目的地址，如果需要的话。OUTPUT链改变本地产生的包的目的地 址。POSTROUTING链在包就要离开防火墙之前改变其源地址。 表名: mangle注释:这个表主要用来mangle数据包。我们可以改变不同的包及包 头的内容，比如 TTL，TOS或MARK。 注意MARK并没有真正地改动数据包，它只是在内核空间为包设了一个标记。防火墙 内的其他的规则或程序（如tc）可以使用这种标记对包进行过滤或高级路由。这个表有五个内建的链： PREROUTING，POSTROUTING， OUTPUT，INPUT和 表名:FORWARD注释:PREROUTING在包进入防火墙之后、路由判断之前改变 包，POSTROUTING是在所有路由判断之后。OUTPUT在确定包的目的之前更改数据包。INPUT在包被路由到本地 之后，但在用户空间的程序看到它之前改变包。FORWARD在最初的路由判 断之后、最后一次更改包的目的之前mangle包。注意，mangle表不能做任何NAT，它只是改变数据包的 TTL，TOS或MARK，而不是其源目地 址。NAT是在nat表中操作的。 表名:filter注释:filter表是专门过滤包 的，内建三个链，可以毫无问题地对包进行DROP、LOG、ACCEPT和REJECT等操作。FORWARD 链过滤所有不是本地产生的并且目的地不是本地（所谓本地就是防火墙了）的包，而 INPUT恰恰针对那些目的地是本地的包。OUTPUT 是用来过滤所有本地生成的包的。上面介绍了三个不同的表的最基本的内容。你应该知道它们的使用目的完全不同 –sport –dport使用服务名或端口号，但名字必须是在/etc/services 中定义的，因为iptables从这个文件里查找相应的端口号。(建议使用端口) 用一条规则写多个端口-A INPUT -p udp -m multiport --dports 53,80,443 -j ACCEPT 用一条规则写IP范围-A INPUT -m iprange --src-range 126.244.57.130-126.244.57.140 -j ACCEPT","link":"/2019/08/21/iptables基础笔记/"},{"title":"Centos7 docker基础6-Dockerfile","text":"Dockerfile是一个文本格式的配置文件，用户可以使用Dockerfile快速创建自定义的镜像 Dockerfile 由一行行命令语句组成，并且支持以#开头的注释 Dockerfile 一般分为四部分： 基础镜像信息 维护者信息 镜像操指令 容器启动执行指令 简单例子：新建一个“simple_Dockerfile”目录，下面放Dockerfile文件与一个temp.tar.gz文件 [root@centos7 simple_Dockerfile]# ll 总用量 12 -rw-r--r-- 1 root root 1918 7月 1 18:30 11更换域名公告.html #这个temp.tar.gz的内容 -rw-r--r-- 1 root root 244 7月 22 08:55 Dockerfile -rw-r--r-- 1 root root 1132 7月 22 08:55 temp.tar.gz Dockerfile内容如下 FROM ubuntu MAINTAINER vector4wang xxxx@qq.com WORKDIR /usr/local/docker ADD temp.tar.gz ./add/ COPY temp.tar.gz ./copy/ EXPOSE 22 RUN groupadd -r vector4wang &amp;&amp; useradd -r -g vector4wang vector4wang #USER 切换用户 USER vector4wang ENTRYPOINT [&quot;/bin/bash&quot;] 开始构建: docker build -t docker/simple . #-t docker/simple 设置tag #. 最后一点表示当前目录运行结果： [root@centos7 simple_Dockerfile]# docker build -t docker/simple . Sending build context to Docker daemon 7.68 kB Step 1/9 : FROM ubuntu ---&gt; 4c108a37151f Step 2/9 : MAINTAINER vector4wang xxxx@qq.com ---&gt; Using cache ---&gt; 23b5384b6a7c Step 3/9 : WORKDIR /usr/local/docker ---&gt; Using cache ---&gt; e5bf240e4584 Step 4/9 : ADD temp.tar.gz ./add/ ---&gt; 27a3a2c66608 Removing intermediate container e02486f557ab Step 5/9 : COPY temp.tar.gz ./copy/ ---&gt; 09d9e65e06c1 Removing intermediate container 7642555ce325 Step 6/9 : EXPOSE 22 ---&gt; Running in f02fb012c2c6 ---&gt; 53aa5253d4f6 Removing intermediate container f02fb012c2c6 Step 7/9 : RUN groupadd -r vector4wang &amp;&amp; useradd -r -g vector4wang vector4wang ---&gt; Running in 0f80f819c4b0 ---&gt; 58b2f283140a Removing intermediate container 0f80f819c4b0 Step 8/9 : USER vector4wang ---&gt; Running in 9d740c1880ef ---&gt; 79fa54b4a6ce Removing intermediate container 9d740c1880ef Step 9/9 : ENTRYPOINT /bin/bash ---&gt; Running in 7bf38f7a0bdf ---&gt; b4869dbea5b2 Removing intermediate container 7bf38f7a0bdf Successfully built b4869dbea5b2 查看生成的镜像 [root@centos7 simple_Dockerfile]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE docker/simple latest b4869dbea5b2 7 seconds ago 64.6 MB #这个是生成 &lt;none&gt; &lt;none&gt; ab9934bcdc0f 7 minutes ago 64.6 MB #感觉这个也是生成的 centos1 v1.0 f1420ae8ab97 2 days ago 202 MB ubuntu 14.04 40446eeefc1a 2 days ago 215 MB 进容器中查看相应的操作是否成功 [root@centos7 simple_Dockerfile]# docker run -it b4869dbea5b2 vector4wang@3acb26c35c57:/usr/local/docker$ pwd #当前操作确实为/usr/local/docker /usr/local/docker vector4wang@3acb26c35c57:/usr/local/docker$ ls #自动生成了不存在的路径 add copy vector4wang@3acb26c35c57:/usr/local/docker$ cd add/ vector4wang@3acb26c35c57:/usr/local/docker/add$ ls #ADD 自动帮你解压的.tar.gz文件 '11'$'\\346\\233\\264\\346\\215\\242\\345\\237\\237\\345\\220\\215\\345\\205\\254\\345\\221\\212''.html' vector4wang@3acb26c35c57:/usr/local/docker/add$ cd ../copy/ vector4wang@3acb26c35c57:/usr/local/docker/copy$ ls #COPY 只是复制而己 temp.tar.gz vector4wang@3acb26c35c57:/usr/local/docker/copy$ exit exit 二、体验下使用docker build Dockerfile以阿里中间件大赛给的debian-jdk8镜像Dockerfile文件如下： FROM debian:stretch ARG DEBIAN_FRONTEND=noninteractive ARG JAVA_VERSION=8 ARG JAVA_UPDATE=172 ARG JAVA_BUILD=11 ARG JAVA_PACKAGE=jdk ARG JAVA_HASH=a58eab1ec242421181065cdc37240b08 ENV LANG C.UTF-8 ENV JAVA_HOME=/opt/jdk ENV PATH=${PATH}:${JAVA_HOME}/bin RUN set -ex \\ &amp;&amp; apt-get update \\ &amp;&amp; apt-get -y install ca-certificates wget unzip \\ &amp;&amp; wget -q --header &quot;Cookie: oraclelicense=accept-securebackup-cookie&quot; \\ -O /tmp/java.tar.gz \\ http://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION}u${JAVA_UPDATE}-b${JAVA_BUILD}/${JAVA_HASH}/${JAVA_PACKAGE}-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64.tar.gz \\ &amp;&amp; CHECKSUM=$(wget -q -O - https://www.oracle.com/webfolder/s/digest/${JAVA_VERSION}u${JAVA_UPDATE}checksum.html | grep -E &quot;${JAVA_PACKAGE}-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64\\.tar\\.gz&quot; | grep -Eo '(sha256: )[^&lt;]+' | cut -d: -f2 | xargs) \\ &amp;&amp; echo &quot;${CHECKSUM} /tmp/java.tar.gz&quot; &gt; /tmp/java.tar.gz.sha256 \\ &amp;&amp; sha256sum -c /tmp/java.tar.gz.sha256 \\ &amp;&amp; mkdir ${JAVA_HOME} \\ &amp;&amp; tar -xzf /tmp/java.tar.gz -C ${JAVA_HOME} --strip-components=1 \\ &amp;&amp; wget -q --header &quot;Cookie: oraclelicense=accept-securebackup-cookie;&quot; \\ -O /tmp/jce_policy.zip \\ http://download.oracle.com/otn-pub/java/jce/${JAVA_VERSION}/jce_policy-${JAVA_VERSION}.zip \\ &amp;&amp; unzip -jo -d ${JAVA_HOME}/jre/lib/security /tmp/jce_policy.zip \\ &amp;&amp; rm -rf ${JAVA_HOME}/jar/lib/security/README.txt \\ /var/lib/apt/lists/* \\ /tmp/* \\ /root/.wget-hsts新建一个空目录，假设就是~/debian-jdk8吧，cd进这个目录，新建一个Dockerfile，然后把上面的内容copy进去，然后执行下面的命令： docker build -t debian-jdk8:v1.0 . 其中-t debian-jdk8:v1.0表示打包的镜像名为debian-jdk，tag为v1.0（前面说过，tag是可以任意命名的，不一定要是这种格式），注意命令的最后有一个.，这个表示打包的上下文（其实就是Dockerfile所在目录）是在当前目录，然后目录下的Dockerfile就会被编译执行。 [root@centos7 denbian-jdk8]# docker build -t debian-jdk8:v1.0 . Sending build context to Docker daemon 3.072 kB Step 1/11 : FROM debian:stretch Trying to pull repository docker.io/library/debian ... stretch: Pulling from docker.io/library/debian a4d8138d0f6b: Pull complete Digest: sha256:397b2157a9ea8d7f16c613aded70284292106e8b813fb1ed5de8a8785310a26a Status: Downloaded newer image for docker.io/debian:stretch ---&gt; 5a6d49d5e833 Step 2/11 : ARG DEBIAN_FRONTEND=noninteractive ---&gt; Running in 3b695e63be44 ---&gt; cf75b9120562 Removing intermediate container 3b695e63be44 Step 3/11 : ARG JAVA_VERSION=8 ---&gt; Running in ffb25ed30a7b ---&gt; cb294b73f54a Removing intermediate container ffb25ed30a7b Step 4/11 : ARG JAVA_UPDATE=172 ---&gt; Running in b02c932f307e ---&gt; 3754d68d4615 Removing intermediate container b02c932f307e Step 5/11 : ARG JAVA_BUILD=11 ---&gt; Running in d334c9c11b6d ---&gt; 938457a64582 Removing intermediate container d334c9c11b6d Step 6/11 : ARG JAVA_PACKAGE=jdk ---&gt; Running in 0af0b1849907 ---&gt; 9636e9d4b039 Removing intermediate container 0af0b1849907 Step 7/11 : ARG JAVA_HASH=a58eab1ec242421181065cdc37240b08 ---&gt; Running in f5f26fc293e7 ---&gt; 2e8dbf64318a Removing intermediate container f5f26fc293e7 Step 8/11 : ENV LANG C.UTF-8 ---&gt; Running in 32b46fc56ecc ---&gt; ae275b3b5e84 Removing intermediate container 32b46fc56ecc Step 9/11 : ENV JAVA_HOME /opt/jdk ---&gt; Running in 79a42efd0802 ---&gt; 212b7ebcf149 Removing intermediate container 79a42efd0802 Step 10/11 : ENV PATH ${PATH}:${JAVA_HOME}/bin ---&gt; Running in 6eaab787feac ---&gt; c19adf77374c Removing intermediate container 6eaab787feac Step 11/11 : RUN set -ex &amp;&amp; apt-get update &amp;&amp; apt-get -y install ca-certificates wget unzip &amp;&amp; wget -q --header &quot;Cookie: oraclelicense=accept-securebackup-cookie&quot; -O /tmp/java.tar.gz http://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION}u${JAVA_UPDATE}-b${JAVA_BUILD}/${JAVA_HASH}/${JAVA_PACKAGE}-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64.tar.gz &amp;&amp; CHECKSUM=$(wget -q -O - https://www.oracle.com/webfolder/s/digest/${JAVA_VERSION}u${JAVA_UPDATE}checksum.html | grep -E &quot;${JAVA_PACKAGE}-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64\\.tar\\.gz&quot; | grep -Eo '(sha256: )[^&lt;]+' | cut -d: -f2 | xargs) &amp;&amp; echo &quot;${CHECKSUM} /tmp/java.tar.gz&quot; &gt; /tmp/java.tar.gz.sha256 &amp;&amp; sha256sum -c /tmp/java.tar.gz.sha256 &amp;&amp; mkdir ${JAVA_HOME} &amp;&amp; tar -xzf /tmp/java.tar.gz -C ${JAVA_HOME} --strip-components=1 &amp;&amp; wget -q --header &quot;Cookie: oraclelicense=accept-securebackup-cookie;&quot; -O /tmp/jce_policy.zip http://download.oracle.com/otn-pub/java/jce/${JAVA_VERSION}/jce_policy-${JAVA_VERSION}.zip &amp;&amp; unzip -jo -d ${JAVA_HOME}/jre/lib/security /tmp/jce_policy.zip &amp;&amp; rm -rf ${JAVA_HOME}/jar/lib/security/README.txt /var/lib/apt/lists/* /tmp/* /root/.wget-hsts ---&gt; Running in 87cc3bb1f8d5 + apt-get update Get:1 http://security-cdn.debian.org/debian-security stretch/updates InRelease [94.3 kB] Ign:2 http://cdn-fastly.deb.debian.org/debian stretch InRelease Get:3 http://cdn-fastly.deb.debian.org/debian stretch-updates InRelease [91.0 kB] Get:5 http://security-cdn.debian.org/debian-security stretch/updates/main amd64 Packages [499 kB] Get:4 http://cdn-fastly.deb.debian.org/debian stretch Release [118 kB] Get:6 http://cdn-fastly.deb.debian.org/debian stretch-updates/main amd64 Packages [27.4 kB] Get:7 http://cdn-fastly.deb.debian.org/debian stretch Release.gpg [2434 B] Get:8 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 Packages [7082 kB] Fetched 7915 kB in 4min 4s (32.4 kB/s) Reading package lists... + apt-get -y install ca-certificates wget unzip Reading package lists... Building dependency tree... Reading state information... The following additional packages will be installed: libffi6 libgmp10 libgnutls30 libhogweed4 libidn2-0 libp11-kit0 libpsl5 libssl1.1 libtasn1-6 libunistring0 openssl publicsuffix Suggested packages: gnutls-bin zip The following NEW packages will be installed: ca-certificates libffi6 libgmp10 libgnutls30 libhogweed4 libidn2-0 libp11-kit0 libpsl5 libssl1.1 libtasn1-6 libunistring0 openssl publicsuffix unzip wget 0 upgraded, 15 newly installed, 0 to remove and 1 not upgraded. Need to get 5212 kB of archives. After this operation, 14.4 MB of additional disk space will be used. Get:1 http://security-cdn.debian.org/debian-security stretch/updates/main amd64 libssl1.1 amd64 1.1.0k-1~deb9u1 [1356 kB] Get:3 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libgmp10 amd64 2:6.1.2+dfsg-1 [253 kB] Get:4 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libhogweed4 amd64 3.3-1+b2 [136 kB] Get:5 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libffi6 amd64 3.2.1-6 [20.4 kB] Get:6 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libp11-kit0 amd64 0.23.3-2 [111 kB] Get:7 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libtasn1-6 amd64 4.10-1.1+deb9u1 [50.6 kB] Get:8 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libgnutls30 amd64 3.5.8-5+deb9u4 [896 kB] Get:9 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libunistring0 amd64 0.9.6+really0.9.3-0.1 [279 kB] Get:10 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libidn2-0 amd64 0.16-1+deb9u1 [60.7 kB] Get:11 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libpsl5 amd64 0.17.0-3 [41.8 kB] Get:12 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 wget amd64 1.18-5+deb9u3 [800 kB] Get:13 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 ca-certificates all 20161130+nmu1+deb9u1 [182 kB] Get:2 http://security-cdn.debian.org/debian-security stretch/updates/main amd64 openssl amd64 1.1.0k-1~deb9u1 [747 kB] Get:14 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 unzip amd64 6.0-21+deb9u1 [170 kB] Get:15 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 publicsuffix all 20190415.1030-0+deb9u1 [108 kB] The command '/bin/sh -c set -ex &amp;&amp; apt-get update &amp;&amp; apt-get -y install ca-certificates wget unzip &amp;&amp; wget -q --header &quot;Cookie: oraclelicense=accept-securebackup-cookie&quot; -O /tmp/java.tar.gz http://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION}u${JAVA_UPDATE}-b${JAVA_BUILD}/${JAVA_HASH}/${JAVA_PACKAGE}-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64.tar.gz &amp;&amp; CHECKSUM=$(wget -q -O - https://www.oracle.com/webfolder/s/digest/${JAVA_VERSION}u${JAVA_UPDATE}checksum.html | grep -E &quot;${JAVA_PACKAGE}-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64\\.tar\\.gz&quot; | grep -Eo '(sha256: )[^&lt;]+' | cut -d: -f2 | xargs) &amp;&amp; echo &quot;${CHECKSUM} /tmp/java.tar.gz&quot; &gt; /tmp/java.tar.gz.sha256 &amp;&amp; sha256sum -c /tmp/java.tar.gz.sha256 &amp;&amp; mkdir ${JAVA_HOME} &amp;&amp; tar -xzf /tmp/java.tar.gz -C ${JAVA_HOME} --strip-components=1 &amp;&amp; wget -q --header &quot;Cookie: oraclelicense=accept-securebackup-cookie;&quot; -O /tmp/jce_policy.zip http://download.oracle.com/otn-pub/java/jce/${JAVA_VERSION}/jce_policy-${JAVA_VERSION}.zip &amp;&amp; unzip -jo -d ${JAVA_HOME}/jre/lib/security /tmp/jce_policy.zip &amp;&amp; rm -rf ${JAVA_HOME}/jar/lib/security/README.txt /var/lib/apt/lists/* /tmp/* /root/.wget-hsts' returned a non-zero code: 137 [root@centos7 denbian-jdk8]# 执行完毕后运行docker images就会发现多了一个debian-jdk8镜像。 下面来解释一下Dockerfile的结构，那些字母全部大写的每行第一个单词都是Dockerfile的指令，可以看出这个Dockefile中包括的指令有FROM、ARG、ENV、RUN，下面的表格中我对其含义进行了解释： 指令 含义解释 WORKDIR 在构建时，指定镜像工作目录 EXPOSE 暴露镜像的端口供主机做映像 COPY 复制文件到容器 不做解压操作 ADD 复制文件到容器 且做解压操作 ADD会对压缩文件（tar, gzip, bzip2, etc）做提取和解压操作。 USER 指定该镜像以什么样的用户去执行 CMD 容器启动时需要执行的命令 当有多个CMD的时候，只有最后一个生效。 会给docker run覆盖ENTRYPOINT ：容器启动时需要执行的命令 不会给docker run覆盖FROM FROM debian:stretch表示以debian:stretch作为基础镜像进行构建 RUN 可以看出RUN后面跟的其实就是一些shell命令，通过&amp;&amp;将这些脚本连接在了一行执行，这么做的原因是为了减少镜像的层数，每多一行RUN都会给镜像增加一层，所以这里选择将所有命令联结在一起执行以减少层数 ARG 特地将这个指令放在RUN之后讲解，这个指令可以进行一些宏定义，比如我定义ENV JAVA_HOME=/opt/jdk，之后RUN后面的shell命令中的${JAVA_HOME}都会被/opt/jdk代替 ENV 可以看出这个指令的作用是在shell中设置一些环境变量（其实就是export） 参考文献：https://blog.csdn.net/qq_33256688/article/details/80319673教程参考于：http://www.bdkyr.com","link":"/2019/08/22/Centos7-docker基础6-Dockerfile/"},{"title":"Centos7 docker基础5-网络配置","text":"一、从外部访问容器应用当使用 -P 标记时，Docker 会随机映射一个49000~49900（这个范围还待考证）的端口到容器内部开放的网络端口 使用 -p 指定端口到容器的端口；可以多次使用-pdocker run -d -p 5000:5000 -p 8080:80 docker.io/training/webapp python app.py [root@centos7 ~]# docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES cd55feca7ff0 docker.io/training/webapp &quot;python app.py&quot; 18 seconds ago Up 18 seconds 0.0.0.0:5000-&gt;5000/tcp, 0.0.0.0:8080-&gt;80/tcp eloquent_wilson d9834d820a56 docker.io/training/webapp &quot;python app.py&quot; 9 minutes ago Up 9 minutes 0.0.0.0:32778-&gt;5000/tcp optimistic_gates 9256ad44457a docker.io/centos &quot;/bin/bash&quot; 26 minutes ago Exited (0) 26 minutes ago dbdata2 9557a29349ed docker.io/centos &quot;/bin/bash&quot; About an hour ago Exited (137) 9 minutes ago dbdata #docker port 容器ID #可以查看此容器正在映射的端口 [root@centos7 ~]# docker port cd55feca7ff0 5000/tcp -&gt; 0.0.0.0:5000 80/tcp -&gt; 0.0.0.0:8080 -p 也可以指定IP:port 如[root@centos7 ~]# docker run -d -p 127.0.0.1:5001:5000 –name web4 docker.io/training/webapp python app.py 1aa8018d3e70ef32891a1dc4071058606bf530dc651369545d8beeb0af0a9e69 [root@centos7 ~]# docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 1aa8018d3e70 docker.io/training/webapp &quot;python app.py&quot; 1 second ago Up 1 second 127.0.0.1:5001-&gt;5000/tcp web4 dbdata [root@centos7 ~]# netstat -tuplan | grep 5001 tcp 0 0 127.0.0.1:5001 0.0.0.0:* LISTEN 20263/docker-proxy- [root@centos7 ~]# 不过这个好像没有什么用，5001又不开放给其他网络，只有127.0.0.1才通 二、容器互联比如说web应用与数据库的容器直接互联 而不是通过外部去连接 #下载且开启postgres数据库容器docker run -d –name db docker.io/postgres运行结果： [root@centos7 ~]# docker run -d --name db docker.io/postgres Unable to find image 'docker.io/postgres:latest' locally Trying to pull repository docker.io/library/postgres ... latest: Pulling from docker.io/library/postgres 0a4690c5d889: Pull complete 723861590717: Pull complete db019468bdf4: Pull complete 91cb81a60371: Pull complete ........ Digest: sha256:68b49a280d2fbe9330c0031970ebb72015e1272dfa25f0ed7557514f9e5ad7b7 Status: Downloaded newer image for docker.io/postgres:latest d7a13f84879d2d47a583c4cfd99aa03a7a5bf047ae1ef335311bc09f2919be20 [root@centos7 ~]# docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES d7a13f84879d docker.io/postgres &quot;docker-entrypoint...&quot; About a minute ago Up About a minute 5432/tcp db 新建web容器与db容器链接 docker run -d -P --name web --link db:db docker.io/training/webapp python app.py#–link db:db 运行结果： [root@centos7 ~]# docker run -d -P --name web --link db:db docker.io/training/webapp python app.py f57d225265ed0943c9dd127f8bb48f3df185993226aabf338a9ec8bb5e70bb54 [root@centos7 ~]# docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES f57d225265ed docker.io/training/webapp &quot;python app.py&quot; 5 seconds ago Up 4 seconds 0.0.0.0:32779-&gt;5000/tcp web d7a13f84879d docker.io/postgres &quot;docker-entrypoint...&quot; 4 minutes ago Up 4 minutes 5432/tcp db [root@centos7 ~]# #如何查看容器之间是否存在link???答：用docker inspect 可以看 不知道还有没有更便捷的方式查看？ [root@centos7 ~]# docker inspect f57d225265ed | cat -n - 59 &quot;Links&quot;: [ 60 &quot;/db:/web/db&quot; 61 ], 查看做过–link的web中 环境变量有何改变 [root@centos7 ~]# docker exec -ti f57d225265ed /bin/bash root@f57d225265ed:/opt/webapp# env DB_ENV_PGDATA=/var/lib/postgresql/data HOSTNAME=f57d225265ed DB_NAME=/web/db TERM=xterm ####################### DB_PORT_5432_TCP_ADDR=172.17.0.2 DB_PORT=tcp://172.17.0.2:5432 DB_ENV_LANG=en_US.utf8 DB_ENV_GOSU_VERSION=1.11 DB_PORT_5432_TCP=tcp://172.17.0.2:5432 ####################### LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36: PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin DB_ENV_PG_MAJOR=11 PWD=/opt/webapp DB_PORT_5432_TCP_PORT=5432 SHLVL=1 HOME=/root DB_PORT_5432_TCP_PROTO=tcp LESSOPEN=| /usr/bin/lesspipe %s DB_ENV_PG_VERSION=11.4-1.pgdg90+1 LESSCLOSE=/usr/bin/lesspipe %s %s _=/usr/bin/env 查看容器中的/etc/hosts root@f57d225265ed:/opt/webapp# cat /etc/hosts 127.0.0.1 localhost ::1 localhost ip6-localhost ip6-loopback fe00::0 ip6-localnet ff00::0 ip6-mcastprefix ff02::1 ip6-allnodes ff02::2 ip6-allrouters 172.17.0.2 db d7a13f84879d #这个数据库的name与容器ID 172.17.0.3 f57d225265ed root@f57d225265ed:/opt/webapp# web容器可以ping通db root@f57d225265ed:/opt/webapp# ping 172.17.0.2 PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data. 64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.180 ms 64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.067 ms 64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.094 ms 64 bytes from 172.17.0.2: icmp_seq=4 ttl=64 time=0.069 ms 教程参考于：http://www.bdkyr.com","link":"/2019/08/22/Centos7-docker基础5-网络配置/"},{"title":"Centos7 docker基础4-数据处理","text":"容器中管理数据主要有两种方式：数据卷数据卷容器 一、数据卷在容器内创建一个数据卷：在用docker run 命令的时候，使用-v 标记可以在容器内创建一个数据卷 支持多次使用－v参数（可以想像成mount） 下载个webapp镜像 [root@centos7 ~]# docker pull docker.io/training/webapp Using default tag: latest Trying to pull repository docker.io/training/webapp ... latest: Pulling from docker.io/training/webapp e190868d63f8: Pull complete 909cd34c6fd7: Pull complete 0b9bfabab7c1: Pull complete a3ed95caeb02: Pull complete 10bbbc0fc0ff: Pull complete fca59b508e9f: Pull complete e7ae2541b15b: Pull complete 9dd97ef58ce9: Pull complete a4c1b0cb7af7: Pull complete Digest: sha256:06e9c1983bd6d5db5fba376ccd63bfa529e8d02f23d5079b8f74a616308fb11d Status: Downloaded newer image for docker.io/training/webapp:latest [root@centos7 ~]# docker run -d -P --name web -v /webapp docker.io/training/webapp python app.py -P:是允许外部访问容器需要暴露的端口 --name： -v /webapp ：创建一个数据卷挂载到容器的/webapp目录 运行结果： [root@centos7 ~]# docker run -d -P --name web -v /webapp docker.io/training/webapp python app.py 9e557abaabd4d50ab1c551d74390d83f9303fa2f6bf5483ac1dfe78626f15930 [root@centos7 ~]# docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 9e557abaabd4 docker.io/training/webapp &quot;python app.py&quot; 6 seconds ago Up 5 seconds 0.0.0.0:32768-&gt;5000/tcp web [root@centos7 ~]# netstat -tuplan | grep 5000 #为什么5000没有呢？？？？ [root@centos7 ~]# netstat -tuplan | grep 327 tcp6 0 0 :::32769 :::* LISTEN 11464/docker-proxy- [root@centos7 ~]# docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 9e557abaabd4 docker.io/training/webapp &quot;python app.py&quot; 4 hours ago Up 6 minutes 0.0.0.0:32769-&gt;5000/tcp web 140c9a4ac310 registry &quot;/entrypoint.sh /e...&quot; 29 hours ago Exited (2) 6 minutes ago awesome_booth [root@centos7 ~]# 那个docker ps -a 输入的5000端口到底是干什么用的？答：5000是容器暴露的端口 32769是本地的映射端口 现在我们进入容器中的/webapp中，去生成一个普通文件，看他最终是存放在本机的哪个目录下 [root@centos7 ~]# docker exec -it 9e557abaabd4 /bin/bash root@9e557abaabd4:/opt/webapp# pwd /opt/webapp root@9e557abaabd4:/opt/webapp# ll total 20 drwxr-xr-x 2 root root 94 May 15 2015 ./ drwxr-xr-x 1 root root 20 May 15 2015 ../ -rw-r--r-- 1 root root 11 May 15 2015 .gitignore -rw-r--r-- 1 root root 19 May 15 2015 Procfile -rw-r--r-- 1 root root 347 May 15 2015 app.py -rw-r--r-- 1 root root 41 May 15 2015 requirements.txt -rw-r--r-- 1 root root 285 May 15 2015 tests.py root@9e557abaabd4:/# cd /webapp/ root@9e557abaabd4:/webapp# ll total 0 drwxr-xr-x 2 root root 6 Jul 20 16:22 ./ drwxr-xr-x 1 root root 31 Jul 20 16:22 ../ root@9e557abaabd4:/webapp# touch testwebapp.txt root@9e557abaabd4:/webapp# ll total 0 drwxr-xr-x 2 root root 28 Jul 20 20:54 ./ drwxr-xr-x 1 root root 31 Jul 20 16:22 ../ -rw-r--r-- 1 root root 0 Jul 20 20:54 testwebapp.txt root@9e557abaabd4:/webapp# exit exit [root@centos7 ~]# find / -name testwebapp.txt /var/lib/docker/volumes/b38c83c6d45aeb1d14bebedb18ac6f697821066e3da02a5db2100fec74faab30/_data/testwebapp.txt #生成在这个里。原来这就是docker的数据卷默认生成的位置 [root@centos7 ~]# 挂载一个主机目录作为数据卷 如果主机目录不存在，docker会自己创建 [root@centos7 ~]# ll -d /data ls: 无法访问/data: 没有那个文件或目录 先清除之前的容器 [root@centos7 ~]# docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 9e557abaabd4 docker.io/training/webapp &quot;python app.py&quot; 4 hours ago Exited (137) 13 seconds ago web 140c9a4ac310 registry &quot;/entrypoint.sh /e...&quot; 30 hours ago Exited (2) 29 minutes ago awesome_booth [root@centos7 ~]# docker rm 9e557abaabd4 9e557abaabd4 docker run -d -P --name web -v /data/webapp:/webapp docker.io/training/webapp python app.py # －v 本机上目录：容器目录 运行结果： [root@centos7 ~]# docker run -d -P --name web -v /data/webapp:/webapp docker.io/training/webapp python app.py 411315eaabffd80316874401a1e14f6dbb1e28c2a479354752ec55d0e2587b11 [root@centos7 ~]# docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 411315eaabff docker.io/training/webapp &quot;python app.py&quot; 4 seconds ago Up 4 seconds 0.0.0.0:32774-&gt;5000/tcp web 140c9a4ac310 registry &quot;/entrypoint.sh /e...&quot; 30 hours ago Exited (2) 41 minutes ago awesome_booth #如果-name web己存在，再次创建同名的会报错 [root@centos7 ~]# docker run -d -P --name web -v /data/webapp:/webapp docker.io/training/webapp python app.py /usr/bin/docker-current: Error response from daemon: Conflict. The container name &quot;/web&quot; is already in use by container 411315eaabffd80316874401a1e14f6dbb1e28c2a479354752ec55d0e2587b11. You have to remove (or rename) that container to be able to reuse that name.. See '/usr/bin/docker-current run --help'. [root@centos7 ~]# 如果-name 不同，就可以创建 [root@centos7 ~]# docker run -d -P --name web2 -v /data/webapp:/webapp docker.io/training/webapp python app.py 368636480f93cb39a6529cbd8a763a31950753ecf0df5939ac2790b518b33991 [root@centos7 ~]# docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 368636480f93 docker.io/training/webapp &quot;python app.py&quot; 6 seconds ago Up 6 seconds 0.0.0.0:32775-&gt;5000/tcp web2 411315eaabff docker.io/training/webapp &quot;python app.py&quot; 4 minutes ago Up 4 minutes 0.0.0.0:32774-&gt;5000/tcp web 140c9a4ac310 registry &quot;/entrypoint.sh /e...&quot; 30 hours ago Exited (2) 45 minutes ago awesome_booth [root@centos7 ~]# 看下两个容器上如果生成文件是否 都可以看到 [root@centos7 ~]# docker exec -ti 368636480f93 /bin/bash root@368636480f93:/opt/webapp# cd /webapp/ root@368636480f93:/webapp# ll total 0 drwxr-xr-x 2 root root 6 Jul 20 21:07 ./ drwxr-xr-x 1 root root 31 Jul 20 21:18 ../ root@368636480f93:/webapp# touch 368636480f93.txt root@368636480f93:/webapp# exit exit [root@centos7 ~]# docker exec -ti 411315eaabff /bin/bash root@411315eaabff:/opt/webapp# cd /webapp/ root@411315eaabff:/webapp# ll total 0 drwxr-xr-x 2 root root 30 Jul 20 21:20 ./ drwxr-xr-x 1 root root 31 Jul 20 21:14 ../ -rw-r--r-- 1 root root 0 Jul 20 21:20 368636480f93.txt #可以看到容器ID：368636480f93生成的文件 root@411315eaabff:/webapp# touch 411315eaabff.txt root@411315eaabff:/webapp# ll total 0 drwxr-xr-x 2 root root 54 Jul 20 21:21 ./ drwxr-xr-x 1 root root 31 Jul 20 21:14 ../ -rw-r--r-- 1 root root 0 Jul 20 21:20 368636480f93.txt -rw-r--r-- 1 root root 0 Jul 20 21:21 411315eaabff.txt root@411315eaabff:/webapp# exit exit #在本地的目录上可以看到两个容器生成的文件 [root@centos7 ~]# ll /data/webapp/ 总用量 0 -rw-r--r-- 1 root root 0 7月 21 05:20 368636480f93.txt -rw-r--r-- 1 root root 0 7月 21 05:21 411315eaabff.txt [root@centos7 ~]# #Docker挂载数据卷的默认权限是读写（rw）可以指定权限 [root@centos7 ~]# docker run -d -P --name web2 -v /data/webapp:/webapp:ro docker.io/training/webapp python app.py 但不能指定rwx,听说可以用：–privileged=true 使container内的root拥有真正的root权限 没有尝试过，后面再来 -v 也可以从主机直接挂载文件到容器中 docker run -d -P --privileged=true --name web4 -v ~/.bash_history:/.bash_history docker.io/training/webapp python app.py #教程说如果文件的inode改变，会引起docker报错 #所以还是挂载文件目录 最好 运行结果： [root@centos7 ~]# docker run -d -P --privileged=true --name web4 -v ~/.bash_history:/.bash_history docker.io/training/webapp python app.py d852b32ee28c8d35e1e71cdd95ad2c0d898c99f292d70405d096ac9cb24c024b [root@centos7 ~]# docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES d852b32ee28c docker.io/training/webapp &quot;python app.py&quot; 4 seconds ago Up 4 seconds 0.0.0.0:32777-&gt;5000/tcp web4 e8be34033a6b docker.io/training/webapp &quot;python app.py&quot; 43 minutes ago Up 43 minutes 0.0.0.0:32776-&gt;5000/tcp web3 368636480f93 docker.io/training/webapp &quot;python app.py&quot; About an hour ago Up About an hour 0.0.0.0:32775-&gt;5000/tcp web2 411315eaabff docker.io/training/webapp &quot;python app.py&quot; About an hour ago Up About an hour 0.0.0.0:32774-&gt;5000/tcp web 140c9a4ac310 registry &quot;/entrypoint.sh /e...&quot; 32 hours ago Exited (2) 2 hours ago awesome_booth [root@centos7 ~]# tail ~/.bash_history #本机的文件内容 docker logs bd14a6ab787b ping docker001 docker ps docker stop docker stop bd14a6ab787b docker ps docker ps -a docker ps -a -q ll / exit [root@centos7 ~]# docker exec -it d852b32ee28c /bin/bash #进入容器查看文件 root@d852b32ee28c:/opt/webapp# cd ~ root@d852b32ee28c:~# tail /.bash_history docker logs bd14a6ab787b ping docker001 docker ps docker stop docker stop bd14a6ab787b docker ps docker ps -a docker ps -a -q ll / exit root@d852b32ee28c:~# 二、数据卷容器数据卷容器：其实就是一个普通的容器，专门用它提供数据卷供给其他窗口挂载使用使用 –volumes-from 参数时 ， 不用“提供容器”自身保持运行状态的可以多次使用–volumes-from 操作前清理之前的容器，便于查看: [root@centos7 ~]# docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES [root@centos7 ~]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE centos1 v1.0 f1420ae8ab97 32 hours ago 202 MB ubuntu 14.04 40446eeefc1a 40 hours ago 215 MB docker.io/rdocker8/test latest 8e861c8118a3 41 hours ago 64.2 MB 192.168.174.102:5000/ubuntu latest 4c108a37151f 4 weeks ago 64.2 MB docker.io/ubuntu latest 4c108a37151f 4 weeks ago 64.2 MB docker.io/centos latest 9f38484d220f 4 months ago 202 MB docker.io/registry latest f32a97de94e1 4 months ago 25.8 MB docker.io/training/webapp latest 6fae60ef3446 4 years ago 349 MB [root@centos7 ~]# docker ps -a #清理之前的容器 CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES #创建一个dbdata的容器 且带有/dbdata数据卷 [root@centos7 ~]# docker run -it -v /dbdata --name dbdata docker.io/centos [root@a20a8f71b587 /]# ll -d /dbdata/ drwxr-xr-x 2 root root 6 Jul 20 23:15 /dbdata/ [root@a20a8f71b587 /]# exit exit #创建db1、db2两个容器，并从dbdata容器挂载数据卷 #使用 –volumes-from [root@centos7 ~]# docker run -it --volumes-from dbdata --name db1 docker.io/centos [root@75238caf083e /]# exit exit [root@centos7 ~]# docker run -it --volumes-from dbdata --name db2 docker.io/centos [root@a0183698be06 /]# exit exit 查看容器： [root@centos7 ~]# docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES a0183698be06 docker.io/centos &quot;/bin/bash&quot; 16 seconds ago Exited (0) 5 seconds ago db2 75238caf083e docker.io/centos &quot;/bin/bash&quot; 32 seconds ago Exited (0) 20 seconds ago db1 a20a8f71b587 docker.io/centos &quot;/bin/bash&quot; About a minute ago Exited (0) 58 seconds ago dbdata [root@centos7 ~]# 查看一个容器是挂载了哪些数据卷 docker inspect 9557a29349ed | grep Volumes -A 2 &quot;VolumesFrom&quot;: null, &quot;CapAdd&quot;: null, &quot;CapDrop&quot;: null, -- &quot;Volumes&quot;: { &quot;/dbdata&quot;: {} #看这个 }, [root@centos7 ~]# 测试下三个容器中的/dbdata是否共享：在dbdata中新建一个普通文件 [root@centos7 ~]# docker exec -it a20a8f71b587 /bin/bash Error response from daemon: Container a20a8f71b5879212a67d00976621b15f6ae71804f1768301e78b336262391748 is not running #刚才没有加后台参数 所以exit就退出，开启下 #也说明了使用 --volumes-from 参数是不用“提供容器”自身保持运行状态的 [root@centos7 ~]# docker start a20a8f71b587 a20a8f71b587 [root@centos7 ~]# docker exec -it a20a8f71b587 /bin/bash [root@a20a8f71b587 /]# touch /dbdata/name_dbdata.txt [root@a20a8f71b587 /]# exit 在db1查看: [root@centos7 ~]# docker exec -it 75238caf083e /bin/bash [root@75238caf083e /]# ll /dbdata/ total 0 -rw-r--r-- 1 root root 0 Jul 20 23:23 name_dbdata.txt [root@75238caf083e /]# touch /dbdata/name_db1.txt #再新建一个文件 看db2能不能都看到 [root@75238caf083e /]# ll /dbdata/ total 0 -rw-r--r-- 1 root root 0 Jul 20 23:33 name_db1.txt -rw-r--r-- 1 root root 0 Jul 20 23:23 name_dbdata.txt [root@75238caf083e /]# 在db2查看: [root@centos7 ~]# docker start a0183698be06 a0183698be06 [root@centos7 ~]# docker exec -ti a0183698be06 /bin/bash [root@a0183698be06 /]# ll /dbdata/ total 0 -rw-r--r-- 1 root root 0 Jul 20 23:33 name_db1.txt -rw-r--r-- 1 root root 0 Jul 20 23:23 name_dbdata.txt #都可以看到 说明共享了 问题：如果对己存在的容器 再次挂载数据卷呢？答：？？？？？？？？ 删除数据卷容器如果删除了挂载的容器（包括dbdata、db1、db2）,数据卷并没有自动删除；如果要删除一个数据卷，必须在删除最后一个还挂载着它的容器时，显示使用dock rm -v 命令来指定同时删除关联的容器 #-v: 删除与容器关联的卷 [root@centos7 ~]# docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES a0183698be06 docker.io/centos &quot;/bin/bash&quot; 17 hours ago Up 17 hours db2 75238caf083e docker.io/centos &quot;/bin/bash&quot; 17 hours ago Up 17 hours db1 a20a8f71b587 docker.io/centos &quot;/bin/bash&quot; 18 hours ago Up 17 hours dbdata #停掉所有容器 [root@centos7 ~]# docker stop a0183698be06 75238caf083e a20a8f71b587 a0183698be06 75238caf083e a20a8f71b587 #删除dbdata容器 [root@centos7 ~]# docker rm a20a8f71b587 a20a8f71b587 #开启db 且看下数据卷dbdata是否还在 [root@centos7 ~]# docker start 75238caf083e 75238caf083e [root@centos7 ~]# docker exec -it 75238caf083e /bin/bash [root@75238caf083e /]# cd /dbdata/ [root@75238caf083e dbdata]# ll total 0 -rw-r--r-- 1 root root 0 Jul 20 23:33 name_db1.txt -rw-r--r-- 1 root root 0 Jul 20 23:23 name_dbdata.txt #说明还是存在的 [root@75238caf083e dbdata]# exit exit #删除db2容器 [root@centos7 ~]# docker rm a0183698be06 a0183698be06 #查找数据卷在本机上的存储路径 [root@centos7 ~]# find / -name name_dbdata.txt /var/lib/docker/volumes/fa138eac7e5f7519052a7b47e8158938493424c50f5ef62f84537f556cf10818/_data/name_dbdata.txt #关闭db1 且删除db1 [root@centos7 ~]# docker stop 75238caf083e [root@centos7 ~]# docker rm -v 75238caf083e 75238caf083e #再次查找文件，发现己没有了。说明数据卷己删除了。 [root@centos7 ~]# find / -name name_dbdata.txt [root@centos7 ~]# 三、备份数据卷新建一个dbdata容器 [root@centos7 ~]# docker run -it -d -v /dbdata --name dbdata docker.io/centos #生成一个backup.txt文件 来验证等下的备份是否成功 [root@centos7 ~]# docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 9557a29349ed docker.io/centos &quot;/bin/bash&quot; 10 minutes ago Exited (0) 10 minutes ago dbdata [root@centos7 ~]# docker start 9557a29349ed 9557a29349ed [root@centos7 ~]# docker exec -it 9557a29349ed /bin/bash [root@9557a29349ed /]# touch /dbdata/backup.txt [root@9557a29349ed /]# exit exit [root@centos7 ~]# docker run --volumes-from dbdata -v $(pwd):/backup --name worker centos tar -zcvf /backup/backup.tar /dbdata -v $(pwd):/backup：将当前路径挂载到/backup tar -zcvf /backup/backup.tar /dbdata : 对/dbdata 进行打包 且放在/backup下 运行结果： [root@9557a29349ed /]# exit exit [root@centos7 ~]# docker run --volumes-from dbdata -v $(pwd):/backup --name worker centos tar -zcvf /backup/backup.tar /dbdata /dbdata/ /dbdata/backup.txt tar: Removing leading `/' from member names [root@centos7 ~]# ll backup.tar -rw-r--r-- 1 root root 147 7月 22 02:04 backup.tar #在本机当前目录就可以看到了 [root@centos7 ~]# 四、恢复数据卷（这个我不能理解）？为什么我这次新建的容器都是退出的状态？为什么执行tar就会恢复到/dbdata吗？ [root@centos7 ~]# docker run -v /dbdata --name dbdata2 centos /bin/bash [root@centos7 ~]# docker ps a &quot;docker ps&quot; accepts no argument(s). See 'docker ps --help'. Usage: docker ps [OPTIONS] List containers [root@centos7 ~]# docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 89d8e5d87dcd centos &quot;/bin/bash&quot; 9 seconds ago Exited (0) 8 seconds ago dbdata2 175beafbeed0 centos &quot;tar -zcvf /backup...&quot; 21 minutes ago Exited (0) 21 minutes ago worker 9557a29349ed docker.io/centos &quot;/bin/bash&quot; 36 minutes ago Up 23 minutes dbdata [root@centos7 ~]# docker run --volumes-from dbdata2 -v $(pwd):/backup busybox tar xvf /backup/backup.tar Unable to find image 'busybox:latest' locally Trying to pull repository docker.io/library/busybox ... latest: Pulling from docker.io/library/busybox ee153a04d683: Pull complete Digest: sha256:9f1003c480699be56815db0f8146ad2e22efea85129b5b5983d0e0fb52d9ab70 Status: Downloaded newer image for docker.io/busybox:latest dbdata/ dbdata/backup.txt 教程参考于：http://www.bdkyr.com/","link":"/2019/08/22/Centos7-docker基础4-数据处理/"},{"title":"Centos7 docker基础3-仓库","text":"仓库（repository）：放镜像的地方 创建和使用私有仓库 安装docker后 可以通过宣官方提供的registry镜像本搭建一套本地私有仓库环境 [root@centos7 /]# docker pull registry Using default tag: latest Trying to pull repository docker.io/library/registry ... latest: Pulling from docker.io/library/registry c87736221ed0: Pull complete 1cc8e0bb44df: Pull complete 54d33bcb37f5: Pull complete e8afc091c171: Pull complete b4541f6d3db6: Pull complete Digest: sha256:8004747f1e8cd820a148fb7499d71a76d45ff66bac6a29129bfdbfdc0154d146 Status: Downloaded newer image for docker.io/registry:latest [root@centos7 /]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE centos1 v1.0 f1420ae8ab97 26 minutes ago 202 MB ubuntu 14.04 40446eeefc1a 8 hours ago 215 MB docker.io/rdocker8/test latest 8e861c8118a3 8 hours ago 64.2 MB docker.io/ubuntu latest 4c108a37151f 4 weeks ago 64.2 MB docker.io/centos latest 9f38484d220f 4 months ago 202 MB docker.io/registry latest f32a97de94e1 4 months ago 25.8 MB [root@centos7 /]# mkdir -p /opt/data/registry docker run -d -p 5000:5000 -v /opt/data/registry:/tmp/registry registry -p 开启端口映射 本地端口:容器端口 -v 开启目录映射 本地目录:容器目录 [root@centos7 /]# docker run -d -p 5000:5000 -v /opt/data/registry:/tmp/registry registry 140c9a4ac310113ed77e1e9660fe9607e1654e0c8c34f364bf89756f90dafb01 [root@centos7 /]# docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 140c9a4ac310 registry &quot;/entrypoint.sh /e...&quot; 12 seconds ago Up 10 seconds 0.0.0.0:5000-&gt;5000/tcp awesome_booth [root@centos7 /]# netstat -tuplan | grep 5000 tcp6 0 0 :::5000 :::* LISTEN 9549/docker-proxy-c [root@centos7 ~]# curl 127.0.0.1:5000/v2 &lt;a href=&quot;/v2/&quot;&gt;Moved Permanently&lt;/a&gt;. 尝试上传一个镜像 docker tage image registryhost/[username/]name[:TAG] [root@centos7 ~]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE docker.io/ubuntu latest 4c108a37151f 4 weeks ago 64.2 MB docker.io/registry latest f32a97de94e1 4 months ago 25.8 MB [root@centos7 ~]# docker tag ubuntu 192.168.174.102:5000/ubuntu #要使用IP:5000/标签的方式 [root@centos7 ~]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE 192.168.174.102:5000/ubuntu latest 4c108a37151f 4 weeks ago 64.2 MB docker.io/ubuntu latest 4c108a37151f 4 weeks ago 64.2 MB docker.io/registry latest f32a97de94e1 4 months ago 25.8 MB [root@centos7 ~]# docker push 192.168.174.102:5000/ubuntu The push refers to a repository [192.168.174.102:5000/ubuntu] Get https://192.168.174.102:5000/v1/_ping: http: server gave HTTP response to HTTPS client #添加daemon.json 内容为如下： 其中192.168.174.102是仓库所在的IP [root@centos7 docker]# cat /etc/docker/daemon.json { &quot;insecure-registries&quot;:[&quot;192.168.174.102:5000&quot;]} systemctl reload docker.service #要重启下docker服务 再次上传 [root@centos7 docker]# docker push 192.168.174.102:5000/ubuntu The push refers to a repository [192.168.174.102:5000/ubuntu] 75e70aa52609: Pushed dda151859818: Pushed fbd2732ad777: Pushed ba9de9d8475e: Pushed latest: digest: sha256:eb70667a801686f914408558660da753cde27192cd036148e58258819b927395 size: 1152 #上传成功 [root@centos7 docker]# [root@centos7 docker]# curl -XGET http://192.168.174.102:5000/v2/_catalog {&quot;repositories&quot;:[&quot;ubuntu&quot;]} 上传成功 做私人仓库 还有很多要做的比如做CA证书、安全认证等 还可以添加 web UI 的界面 回来再继续做仓库 参考：https://blog.csdn.net/egworkspace/article/details/80518647教程参考于：http://www.bdkyr.com/","link":"/2019/08/22/Centos7-docker基础3-仓库/"},{"title":"Centos7 docker基础2-容器","text":"一、创建容器 docker create -it centos #-i 即使未连接，也保持stdin打开 #-t 分配给伪tty #create 只创建 不包含自动启动容器 #本地没有centos的镜像,将自动下载 [root@centos7 ~]# docker create -it centos Unable to find image 'centos:latest' locally Trying to pull repository docker.io/library/centos ... latest: Pulling from docker.io/library/centos 8ba884070f61: Pull complete Digest: sha256:a799dd8a2ded4a83484bbae769d97655392b3f86533ceb7dd96bbac929809f3c Status: Downloaded newer image for docker.io/centos:latest a33622e3f977f846aac151b0e0250d42d37f6f7276c76208c16fe8faf9578a40 [root@centos7 ~]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE ubuntu 14.04 40446eeefc1a About an hour ago 215 MB docker.io/rdocker8/test latest 8e861c8118a3 2 hours ago 64.2 MB docker.io/ubuntu latest 4c108a37151f 4 weeks ago 64.2 MB docker.io/centos latest 9f38484d220f 4 months ago 202 MB #下载了我好久 [root@centos7 ~]# Create a new container [root@centos7 ~]# docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES a33622e3f977 centos &quot;/bin/bash&quot; 22 minutes ago Created unruffled_keller 0b2d5edef671 ubuntu:latest &quot;/bin/bash&quot; 2 hours ago Exited (0) 2 hours ago optimistic_nightingale [root@centos7 ~]# 容器内操作输出一个“hello world” docker run centos /bin/echo &quot;hello world&quot; [root@centos7 ~]# docker run centos /bin/echo &quot;hello world&quot; hello world #运行完就直接exit了 [root@centos7 ~]# 进入交互tty docker run -t -i centos:latest /bin/bash [root@centos7 ~]# docker run -t -i centos:latest /bin/bash [root@23b2ea559a54 /]# ps -ef UID PID PPID C STIME TTY TIME CMD root 1 0 0 08:48 ? 00:00:00 /bin/bash root 14 1 0 08:48 ? 00:00:00 ps -ef [root@23b2ea559a54 /]# ll -h / total 12K -rw-r--r-- 1 root root 12K Mar 5 17:36 anaconda-post.log lrwxrwxrwx 1 root root 7 Mar 5 17:34 bin -&gt; usr/bin drwxr-xr-x 5 root root 360 Jul 19 08:48 dev drwxr-xr-x 1 root root 66 Jul 19 08:48 etc drwxr-xr-x 2 root root 6 Apr 11 2018 home lrwxrwxrwx 1 root root 7 Mar 5 17:34 lib -&gt; usr/lib lrwxrwxrwx 1 root root 9 Mar 5 17:34 lib64 -&gt; usr/lib64 drwxr-xr-x 2 root root 6 Apr 11 2018 media drwxr-xr-x 2 root root 6 Apr 11 2018 mnt drwxr-xr-x 2 root root 6 Apr 11 2018 opt dr-xr-xr-x 110 root root 0 Jul 19 08:48 proc dr-xr-x--- 2 root root 114 Mar 5 17:36 root drwxr-xr-x 1 root root 21 Jul 19 08:48 run lrwxrwxrwx 1 root root 8 Mar 5 17:34 sbin -&gt; usr/sbin drwxr-xr-x 2 root root 6 Apr 11 2018 srv dr-xr-xr-x 13 root root 0 Jul 19 08:40 sys drwxrwxrwt 7 root root 132 Mar 5 17:36 tmp drwxr-xr-x 13 root root 155 Mar 5 17:34 usr drwxr-xr-x 18 root root 238 Mar 5 17:34 var [root@23b2ea559a54 /]# 按ctrl+d 或 exit 可退出容器 守护态运行-d:后台运行容器，并返回容器ID-h “mars”: 指定容器的hostname； [root@centos7 ~]# docker run -d -h docker001 centos:latest /bin/bash -c &quot;while true;do echo hello world;sleep 1;done&quot; [root@centos7 ~]# docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES bd14a6ab787b centos:latest &quot;/bin/bash -c 'whi...&quot; 22 seconds ago Up 21 seconds nervous_nightingale 查看日志： docker logs bd14a6ab787bdocker logs -f bd14a6ab787b #加 -f 可以动态监听 [root@centos7 ~]# docker logs bd14a6ab787b #容器ID hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world [root@centos7 ~]# 终止守护态的容器 docker stop 容器ID [root@centos7 ~]# docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES bd14a6ab787b centos:latest &quot;/bin/bash -c 'whi...&quot; 23 minutes ago Up 23 minutes nervous_nightingale 23b2ea559a54 centos:latest &quot;/bin/bash&quot; 3 hours ago Up 3 hours hardcore_davinci [root@centos7 ~]# docker stop bd14a6ab787b #关闭容器 bd14a6ab787b [root@centos7 ~]# docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 23b2ea559a54 centos:latest &quot;/bin/bash&quot; 3 hours ago Up 3 hours hardcore_davinci [root@centos7 ~]# docker ps -a -q -a:显示所有容器-q:只显示容器的ID [root@centos7 ~]# docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES bd14a6ab787b centos:latest &quot;/bin/bash -c 'whi...&quot; 28 minutes ago Exited (137) 3 minutes ago nervous_nightingale 23b2ea559a54 centos:latest &quot;/bin/bash&quot; 3 hours ago Up 3 hours hardcore_davinci f75113ef9dfa centos &quot;/bin/bash&quot; 3 hours ago Exited (0) 3 hours ago thirsty_goodall b118b57a47db centos &quot;/bin/echo 'hello ...&quot; 4 hours ago Exited (0) 4 hours ago sleepy_hodgkin a33622e3f977 centos &quot;/bin/bash&quot; 4 hours ago Created unruffled_keller 0b2d5edef671 ubuntu:latest &quot;/bin/bash&quot; 6 hours ago Exited (0) 6 hours ago optimistic_nightingale [root@centos7 ~]# docker ps -a -q bd14a6ab787b 23b2ea559a54 f75113ef9dfa b118b57a47db a33622e3f977 0b2d5edef671 [root@centos7 ~]# 使用docker start 容器ID 可以启动容器使用docker restart 容器ID 可以重启容器 二、进入容器：有三种命令可以进容器： docker attach docker exec及nsenter工具 这个要另外装我先学习exec吧 [root@centos7 /]# docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 23b2ea559a54 centos:latest &quot;/bin/bash&quot; 5 hours ago Up 5 hours hardcore_davinci [root@centos7 /]# docker exec -ti 23b2ea559a54 /bin/bash [root@23b2ea559a54 /]# cd / [root@23b2ea559a54 /]# ll 三、删除容器使用docker rm 容器ID [root@centos7 /]# docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES bd14a6ab787b centos:latest &quot;/bin/bash -c 'whi...&quot; About an hour ago Exited (137) About an hour ago nervous_nightingale 23b2ea559a54 centos:latest &quot;/bin/bash&quot; 5 hours ago Up 5 hours hardcore_davinci f75113ef9dfa centos &quot;/bin/bash&quot; 5 hours ago Exited (0) 5 hours ago thirsty_goodall b118b57a47db centos &quot;/bin/echo 'hello ...&quot; 5 hours ago Exited (0) 5 hours ago sleepy_hodgkin a33622e3f977 centos &quot;/bin/bash&quot; 5 hours ago Created unruffled_keller 0b2d5edef671 ubuntu:latest &quot;/bin/bash&quot; 7 hours ago Exited (0) 7 hours ago optimistic_nightingale [root@centos7 /]# docker rm 0b2d5edef671 #容器没有运行时，可以直接运行这个命令 0b2d5edef671 [root@centos7 /]# docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES bd14a6ab787b centos:latest &quot;/bin/bash -c 'whi...&quot; About an hour ago Exited (137) About an hour ago nervous_nightingale 23b2ea559a54 centos:latest &quot;/bin/bash&quot; 5 hours ago Up 5 hours hardcore_davinci f75113ef9dfa centos &quot;/bin/bash&quot; 5 hours ago Exited (0) 5 hours ago thirsty_goodall b118b57a47db centos &quot;/bin/echo 'hello ...&quot; 5 hours ago Exited (0) 5 hours ago sleepy_hodgkin a33622e3f977 centos &quot;/bin/bash&quot; 5 hours ago Created unruffled_keller [root@centos7 /]# 如果正在运行 可以先执行stop操作，再执行rm操作；强制删除正在运行的容器 要加-f (强制参数) [root@centos7 /]# docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 23b2ea559a54 centos:latest &quot;/bin/bash&quot; 5 hours ago Up 5 hours hardcore_davinci [root@centos7 /]# docker rm 23b2ea559a54 Error response from daemon: You cannot remove a running container 23b2ea559a540e744787c0c7d5eaf41dba763de678e5fb52d810a4ff7e221027. Stop the container before attempting removal or use -f #提示你使用－f [root@centos7 /]# docker rm -f 23b2ea559a54 23b2ea559a54 [root@centos7 /]# 四、导入和导出容器不管是否运行，都可以使用docker export 执行导出容器 [root@centos7 /]# docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES bd14a6ab787b centos:latest &quot;/bin/bash -c 'whi...&quot; 2 hours ago Exited (137) About an hour ago nervous_nightingale f75113ef9dfa centos &quot;/bin/bash&quot; 5 hours ago Exited (0) 5 hours ago thirsty_goodall b118b57a47db centos &quot;/bin/echo 'hello ...&quot; 5 hours ago Exited (0) 5 hours ago sleepy_hodgkin a33622e3f977 centos &quot;/bin/bash&quot; 6 hours ago Created unruffled_keller [root@centos7 /]# docker export bd14a6ab787b &gt; centos_for_stop.tar [root@centos7 /]# ll -h centos_for_stop.tar -rw-r--r-- 1 root root 201M 7月 19 22:08 centos_for_stop.tar [root@centos7 /]# 导入使用 dock import 导入文件 成 镜像？？？ [root@centos7 /]# cat centos_for_stop.tar | docker import - centos1:v1.0 sha256:f1420ae8ab97a6f6f0615a2c20a90e2ced90ef76b03076b7117fed71dbbda4d1 [root@centos7 /]# docker ps -a #在容器没有看到导入的 CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES bd14a6ab787b centos:latest &quot;/bin/bash -c 'whi...&quot; 2 hours ago Exited (137) About an hour ago nervous_nightingale f75113ef9dfa centos &quot;/bin/bash&quot; 5 hours ago Exited (0) 5 hours ago thirsty_goodall b118b57a47db centos &quot;/bin/echo 'hello ...&quot; 5 hours ago Exited (0) 5 hours ago sleepy_hodgkin a33622e3f977 centos &quot;/bin/bash&quot; 6 hours ago Created unruffled_keller [root@centos7 /]# docker images #在镜像中 找到导入的centos1 REPOSITORY TAG IMAGE ID CREATED SIZE centos1 v1.0 f1420ae8ab97 21 seconds ago 202 MB ubuntu 14.04 40446eeefc1a 7 hours ago 215 MB docker.io/rdocker8/test latest 8e861c8118a3 8 hours ago 64.2 MB docker.io/ubuntu latest 4c108a37151f 4 weeks ago 64.2 MB docker.io/centos latest 9f38484d220f 4 months ago 202 MB [root@centos7 /]# 看这句话 意思是不管从镜像还是容器导出 导入的都要成镜像 #我以为清空所有容器，将有容器之前的镜像在导入，就会看到之前的容器 看来我想错了。 [root@centos7 /]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE centos1 v1.0 f1420ae8ab97 5 minutes ago 202 MB ubuntu 14.04 40446eeefc1a 7 hours ago 215 MB docker.io/rdocker8/test latest 8e861c8118a3 8 hours ago 64.2 MB docker.io/ubuntu latest 4c108a37151f 4 weeks ago 64.2 MB docker.io/centos latest 9f38484d220f 4 months ago 202 MB [root@centos7 /]# docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES bd14a6ab787b centos:latest &quot;/bin/bash -c 'whi...&quot; 2 hours ago Exited (137) About an hour ago nervous_nightingale f75113ef9dfa centos &quot;/bin/bash&quot; 5 hours ago Exited (0) 5 hours ago thirsty_goodall b118b57a47db centos &quot;/bin/echo 'hello ...&quot; 5 hours ago Exited (0) 5 hours ago sleepy_hodgkin a33622e3f977 centos &quot;/bin/bash&quot; 6 hours ago Created unruffled_keller [root@centos7 /]# docker save -o testimport.tar docker.io/centos:latest [root@centos7 /]# ll -h testimport.tar -rw------- 1 root root 200M 7月 19 22:22 testimport.tar [root@centos7 /]# docker rm bd14a6ab787b b118b57a47db a33622e3f977 f75113ef9dfa [root@centos7 /]# docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES [root@centos7 /]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE centos1 v1.0 f1420ae8ab97 8 minutes ago 202 MB ubuntu 14.04 40446eeefc1a 7 hours ago 215 MB docker.io/rdocker8/test latest 8e861c8118a3 8 hours ago 64.2 MB docker.io/ubuntu latest 4c108a37151f 4 weeks ago 64.2 MB docker.io/centos latest 9f38484d220f 4 months ago 202 MB [root@centos7 /]# docker image rm 9f38484d220f Untagged: docker.io/centos:latest Untagged: docker.io/centos@sha256:a799dd8a2ded4a83484bbae769d97655392b3f86533ceb7dd96bbac929809f3c Deleted: sha256:9f38484d220fa527b1fb19747638497179500a1bed8bf0498eb788229229e6e1 Deleted: sha256:d69483a6face4499acb974449d1303591fcbb5cdce5420f36f8a6607bda11854 [root@centos7 /]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE centos1 v1.0 f1420ae8ab97 8 minutes ago 202 MB ubuntu 14.04 40446eeefc1a 7 hours ago 215 MB docker.io/rdocker8/test latest 8e861c8118a3 8 hours ago 64.2 MB docker.io/ubuntu latest 4c108a37151f 4 weeks ago 64.2 MB [root@centos7 /]# docker load &lt; testimport.tar d69483a6face: Loading layer [==================================================&gt;] 209.5 MB/209.5 MB Loaded image: docker.io/centos:latest [root@centos7 /]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE centos1 v1.0 f1420ae8ab97 9 minutes ago 202 MB ubuntu 14.04 40446eeefc1a 7 hours ago 215 MB docker.io/rdocker8/test latest 8e861c8118a3 8 hours ago 64.2 MB docker.io/ubuntu latest 4c108a37151f 4 weeks ago 64.2 MB docker.io/centos latest 9f38484d220f 4 months ago 202 MB [root@centos7 /]# docker ps -a #我以为清空所有容器，将有容器之前的镜像在导入，就会看到之前的容器 看来我想错了。 CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES [root@centos7 /]# 教程参考于：http://www.bdkyr.com/","link":"/2019/08/22/Centos7-docker基础2-容器/"},{"title":"Centos7 docker基础1-镜像","text":"一、常用命令安装 yum install -y docker 关闭服务与开启 systemctl stop docker.service systemctl start docker.service开机启动: systemctl enable docker.service拉取ubuntu镜像 docker pull ubuntu查看本地镜像 docker images 或者 docker image ls REPOSITORY(仓库) TAG(标签) IMAGE ID(镜像ID) CREATED(创建时间) SIZE(大小) docker.io/ubuntu latest 4c108a37151f 3 weeks ago 64.2 MB 运行镜像上的bash程序 docker run -t -i ubuntu /bin/bashPS:输入exit 退出bash程序 查看本地运行的容器 docker ps -a [root@centos7 ~]# docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES (容器ID) (状态) 7b474e8ca411 ubuntu &quot;/bin/bash&quot; 33 minutes ago Exited (0) 32 minutes ago reverent_hamilton 删除容器:格式:docker rm 容器ID docker rm 7b474e8ca411创建一个别名 docker image tag docker.io/ubuntu ruitest/ubuntu:v2 [root@centos7 ~]# docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE ruitest/ubuntu v2 4c108a37151f (相同的ID) 3 weeks ago 64.2 MB docker.io/ubuntu latest 4c108a37151f 3 weeks ago 64.2 MB 查看镜像的详细信息格式:docker image inspect 镜像ID docker image inspect 4c108a37151f查找镜像:格式:docker search 关键字 docker search mysql [root@centos7 ~]# docker search mysql INDEX NAME DESCRIPTION STARS OFFICIAL AUTOMATED (星级:表示受欢迎程序)) (是否官方创建) (是否自动创建)) docker.io docker.io/mysql MySQL is a widely used, open-source relati... 8388 [OK] docker.io docker.io/mariadb MariaDB is a community-developed fork of M... 2884 [OK] docker.io docker.io/mysql/mysql-server Optimized MySQL Server Docker images. Crea... 624 [OK] docker.io docker.io/percona Percona Server is a fork of the MySQL rela... 438 [OK] docker.io docker.io/centurylink/mysql Image containing mysql. Optimized to be li... 60 [OK] docker.io docker.io/centos/mysql-57-centos7 MySQL 5.7 SQL database server 59 ......略 删除tag docker rmi ruitest/ubuntu:v2 注意:如果只有一个tag时,执行这条命令将会删除镜像 删除镜像docker image rm 镜像ID [root@centos7 ~]# docker image rm 4c108a37151f Untagged: docker.io/ubuntu:latest Untagged: docker.io/ubuntu@sha256:9b1702dcfe32c873a770a32cfd306dd7fc1c4fd134adfb783db68defc8894b3c Deleted: sha256:4c108a37151f54439950335c409802e948883e00c93fdb751d206c9a9674c1f6 Deleted: sha256:7c1abf1dbbfd02a48330a7317ab45a6091d53e2e9cc062f0f3dbd2b7539947a6 Deleted: sha256:5a614dda4a54650168ee2cd30ce2e39576dad5c9a0d1907c02445687b4ea5090 Deleted: sha256:bd042113a73a5c9c6680990740446b7324afb39e243ade3d33bdaa9ffaf8d294 Deleted: sha256:ba9de9d8475e7f5e40086358a1353b3cc080994fc6d31e4272dd3acb69b0151e 二、创建镜像 创建镜像三种方式： 基于己有镜像的容器创建、 基于本地模板导入 基于Dockerfile创建 （1）、基于己有镜像的容器创建 docker pull ubuntu docker images docker run -ti ubuntu:latest /bin/bash docker ps -a使用commit命令提交为一个新的镜像：提交可以使用ID或名称 docker commit -m &quot;Added a new file&quot; -a &quot;Docker Newbee&quot; 0b2d5edef671 test #-m: 注释 #-a:作者信息 # 0b2d5edef671 是容器的ID！不是镜像的ID #test 是新镜像的名称 [root@centos7 ~]# docker images （这里的镜像ID不同） REPOSITORY TAG IMAGE ID CREATED SIZE test latest 8e861c8118a3 11 seconds ago 64.2 MB docker.io/ubuntu latest 4c108a37151f 4 weeks ago 64.2 MB （2）、基于本地模板导入 A方式：下载模板：https://download.openvz.org/template/precreated/ 导入模板： cat ubuntu-14.04-x86_64-minimal.tar.gz | docker import - ubuntu:14.04 [root@centos7 ~]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE ubuntu 14.04 40446eeefc1a 8 seconds ago 215 MB test latest 8e861c8118a3 22 minutes ago 64.2 MB docker.io/ubuntu latest 4c108a37151f 4 weeks ago 64.2 MB B方式：存出和载入镜像 存出本地中ubuntu:14.04镜像文件为ubuntu_14.04.tar docker save -o ubuntu_14.04.tar ubuntu:14.04 [root@centos7 ~]# ll -h ubuntu_14.04.tar -rw------- 1 root root 216M 7月 19 14:33 ubuntu_14.04.tar 估计这个大小与docker内看到是一样的。 载入镜像： [root@centos7 ~]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE ubuntu 14.04 40446eeefc1a 5 minutes ago 215 MB test latest 8e861c8118a3 27 minutes ago 64.2 MB docker.io/ubuntu latest 4c108a37151f 4 weeks ago 64.2 MB [root@centos7 ~]# docker load &lt; ubuntu_14.04.tar #试下在己有时，强行载入 会发生什么 Loaded image: ubuntu:14.04 [root@centos7 ~]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE ubuntu 14.04 40446eeefc1a 5 minutes ago 215 MB #没有增加也没有改变 test latest 8e861c8118a3 27 minutes ago 64.2 MB docker.io/ubuntu latest 4c108a37151f 4 weeks ago 64.2 MB #删除原来的ubuntu:14.04 [root@centos7 ~]# docker image rm 40446eeefc1a #再次载入： [root@centos7 ~]# docker load &lt; ubuntu_14.04.tar #当本地不存在时，会出现一个载入的“进度条” fd58c1324b91: Loading layer [==================================================&gt;] 225.8 MB/225.8 MB Loaded image: ubuntu:14.04 [root@centos7 ~]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE ubuntu 14.04 40446eeefc1a 7 minutes ago 215 MB #载入成功 镜像ID不变 test latest 8e861c8118a3 29 minutes ago 64.2 MB docker.io/ubuntu latest 4c108a37151f 4 weeks ago 64.2 MB [root@centos7 ~]# （3）、基于Dockerfile创建后面在补 三、上传镜像在https://hub.docker.com 注册一个帐号。 #估计可以自己搭建下docker hub的本地库（如同git一样） 在机器登录你的帐号 [root@centos7 ~]# docker login Login with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one. Username: rdocker8 Password: Login Succeeded [root@centos7 ~]# #PS：登录成功后机器会生成用户的配置文件：/root/.docker/config.json push时，要新建以你的帐号的 tag [root@centos7 ~]# docker tag test:latest rdocker8/test:latest #我的帐号名是：rdocker8 [root@centos7 ~]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE ubuntu 14.04 40446eeefc1a 25 minutes ago 215 MB rdocker8/test latest 8e861c8118a3 47 minutes ago 64.2 MB test latest 8e861c8118a3 47 minutes ago 64.2 MB docker.io/ubuntu latest 4c108a37151f 4 weeks ago 64.2 MB [root@centos7 ~]# docker push rdocker8/test:latest The push refers to a repository [docker.io/rdocker8/test] f9e212164607: Pushed 75e70aa52609: Pushed dda151859818: Pushed fbd2732ad777: Pushed ba9de9d8475e: Pushed latest: digest: sha256:7fcb88d72723fc64ba3660d41cdced77c66a2d4060675e61db79af920f100ac3 size: 1359 [root@centos7 ~]# 查看自己的库： 教程参考于：http://www.bdkyr.com/","link":"/2019/08/22/Centos7-docker基础1-镜像/"},{"title":"Ra1nUSBv2.0-Intel启动异常解决办法","text":"启动报错 解决方法： 修改之后就是成这个样子： 启动既可如果在启动如果卡在pid那块时，可以尝试修改”显示注入”的选项设置为：注入InjetEDID方式","link":"/2020/01/13/Ra1nUSBv2-0-Intel启动异常解决办法/"},{"title":"Centos6的TCP Retransmission问题","text":"环境： CentOS release 6.8 (Final) 现象通过本地访问生产网页或者ssh时 有时可以有时不行通过在生产机与本地抓包得到下列信息： 通过百度了下（TCP Retransmission），原因是net.ipv4.tcp_tw_recycle 内核参数引起的。 当多个客户端使用同一个外网IP通过NAT访问内网服务器的时候，服务器如果在内核参数中打开了net.ipv4.tcp_tw_recycle = 1就有可能导致服务器收到SYN但是不会向客户端发送SYN+ACK包。因为打开recyle参数后会识别这些包的时间戳（net.ipv4.tcp_timestamps = 1），但是nat过来的数据包又因为时间戳有可能不是顺序的，导致服务器认为包不可信而丢弃。 解决方法：vi /etc/systcl.conf net.ipv4.tcp_tw_recycle = 0 net.ipv4.tcp_timestamps=0 最后执行生效命令： sysctl -p timestamp扩展：同时开启timestamp（时间戳）和tw_recycle（快速回收）,会导致在一个MSL时间内只响应timestamp递增的请求，对于时间戳较小的请求都抛弃了（不响应ack）MSL扩展： RFC793中规定MSL为2分钟，也就是说2分钟内同一个ip的请求的时间戳要求递增，不是递增的话服务器不予响应。","link":"/2019/12/25/Centos6的TCP-Retransmission问题/"},{"title":"tomcat6连接人大金仓 报No suitable driver","text":"今天配置tomcat6 连接kingbaseES7时,启动报: java.sql.SQLException: No suitable driver 开始以为是jar包问题,换了几个kingbase,jar也没有用,驱动jar的位置也都在war包,jre 下放过,都还是报这个错 后面发现在连接字符串有问题 &lt;Resource name=&quot;jdbc/egrant_ruizw&quot; type=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot; maxPoolSize=&quot;3&quot; minPoolSize=&quot;1&quot; acquireIncrement=&quot;1&quot; maxIdleTime=&quot;120&quot; checkoutTimeout=&quot;3000&quot; initialPoolSize=&quot;1&quot; factory=&quot;org.apache.naming.factory.BeanFactory&quot; user=&quot;rui&quot; password=&quot;ruifw&quot; driverClass=&quot;com.kingbase.Driver&quot; jdbcUrl=&quot;jdbc:kingbase:@192.168.1.25:54321:SJkJH&quot; /&gt; #注意这行 要改为: &lt;Resource name=&quot;jdbc/egrant_ruizw&quot; type=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot; maxPoolSize=&quot;3&quot; minPoolSize=&quot;1&quot; acquireIncrement=&quot;1&quot; maxIdleTime=&quot;120&quot; checkoutTimeout=&quot;3000&quot; initialPoolSize=&quot;1&quot; factory=&quot;org.apache.naming.factory.BeanFactory&quot; user=&quot;rui&quot; password=&quot;ruifw&quot; driverClass=&quot;com.kingbase.Driver&quot; jdbcUrl=&quot;jdbc:kingbase://192.168.1.25:54321/SJkJH&quot; /&gt; 这样就行了.","link":"/2019/12/06/tomcat6连接人大金仓-报No-suitable-driver/"},{"title":"su使用时环境变量注意事项","text":"背景：在测试机中，程序配置rc.local自启动 结果总是乱码的。后面经测试才知道要添加 -l 参数 -l 或 –login 这个参数加了之后，就好像是重新 login 为该使用者一样，大部份环境变数（HOME SHELL USER等等）都是以该使用者（USER）为主，并且工作目录也会改变 没有添加－l 参数 [root@eant ~]#su - wslogic -c 'env' DISPLAY=localhost:10.0 USER=wslogic PWD=/home/wslogic HOME=/home/wslogic SHELL=/bin/bash TERM=linux SHLVL=1 LOGNAME=wslogic PATH=/usr/local/bin:/bin:/usr/bin _=/bin/env [root@eant ~]# 添加－l 参数 [root@rant ~]#su - wslogic -c -l 'env' WL_HOME=/home/wslogic/Middleware/wlserver_10.3 LANG=zh_CN.UTF-8 HISTCONTROL=ignoredups DISPLAY=localhost:10.0 HOSTNAME=eant JAVA_HOME=/home/wslogic/jrockit-jdk1.6.0_45-R28.2.7-4.1.0 CLASSPATH=.:/home/wslogic/jrockit-jdk1.6.0_45-R28.2.7-4.1.0/lib/dt.jar:/home/wslogic/jrockit-jdk1.6.0_45-R28.2.7-4.1.0/lib/tools.jar USER=wslogic PWD=/home/wslogic SSH_ASKPASS=/usr/libexec/openssh/gnome-ssh-askpass HOME=/home/wslogic MAIL=/var/spool/mail/wslogic SHELL=/bin/bash TERM=linux SHLVL=1 LOGNAME=wslogic PATH=/home/wslogic/middleware/wlserver_10.3/common/bin:/home/wslogic/jrockit-jdk1.6.0_45-R28.2.7-4.1.0/bin:/home/wslogic/Middleware/wlserver_10.3/common/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/opt/dell/srvadmin/bin:/home/wslogic/bin:/home/wslogic/redis/ G_BROKEN_FILENAMES=1 HISTSIZE=1000 CVS_RSH=ssh LESSOPEN=||/usr/bin/lesspipe.sh %s _=/bin/env [root@eant ~]# 说明两者的环境不同了，这时有指定的环境变量，所以程序才不会乱码","link":"/2019/11/27/su使用时环境变量注意事项/"},{"title":"linux下limits.conf 修改不生效的原因","text":"步骤一： 在/etc/pam.d/login 文件中末尾添加一行 [weblogic@kjgl-web ~]$ cat /etc/pam.d/login #%PAM-1.0 auth [user_unknown=ignore success=ok ignore=ignore default=bad] pam_securetty.so auth include system-auth account required pam_nologin.so account include system-auth password include system-auth # pam_selinux.so close should be the first session rule session required pam_selinux.so close session required pam_loginuid.so session optional pam_console.so # pam_selinux.so open should only be followed by sessions to be executed in the user context session required pam_selinux.so open session required pam_namespace.so session optional pam_keyinit.so force revoke session include system-auth -session optional pam_ck_connector.so session required pam_limits.so #要有这一行 步骤二：在/etc/pam.d/sshd 文件中末尾添加一行 [weblogic@kjgl-web ~]$ cat /etc/pam.d/sshd #这个文件就新建一个，添加如下内容 #%PAM-1.0 auth required pam_sepermit.so auth include password-auth account required pam_nologin.so account include password-auth password include password-auth # pam_selinux.so close should be the first session rule session required pam_selinux.so close session required pam_loginuid.so # pam_selinux.so open should only be followed by sessions to be executed in the user context session required pam_selinux.so open env_params session required pam_namespace.so session optional pam_keyinit.so force revoke session include password-auth session required pam_limits.so #要有这一行 步骤三：修改sshd的配置文件，开启PAM功能 [weblogic@kjgl-web ~]$ grep -n Use /etc/ssh/sshd_config 46:#AuthorizedKeysCommandUser nobody 52:#IgnoreUserKnownHosts no 82:UsePAM yes #开启 83:UseLogin yes #开启 91:#X11UseLocalhost yes 96:#PermitUserEnvironment no 100:#UseDNS no 114:#Match User anoncvs 步骤四：重启sshd 即可 /etc/init.d/sshd restart","link":"/2019/11/25/linux下limits-conf-修改不生效的原因/"},{"title":"iotop工具","text":"iotop: 一种简单的读写查看器 [root@nessus ~]# iotop -bash: iotop: 未找到命令 [root@nessus ~]# yum install iotop -y 运行界面介绍： 当前总体磁盘读速度 当前总体磁盘写速度 Total DISK READ : 3.81 K/s | Total DISK WRITE : 0.00 B/s 实际磁盘读速度 实际磁盘写速度 Actual DISK READ: 3.81 K/s | Actual DISK WRITE: 1752.80 K/s 线程号 优先级 用户 读速度 写速度 看附1 读写百分比 命令 TID PRIO USER DISK READ DISK WRITE SWAPIN IO&gt; COMMAND 7664 be/4 root 3.81 K/s 0.00 B/s 0.00 % 0.00 % [kworker/u2:1] 1 be/4 root 0.00 B/s 0.00 B/s 0.00 % 0.00 % systemd --switched-root --system --deserialize 22 2 be/4 root 0.00 B/s 0.00 B/s 0.00 % 0.00 % [kthreadd] 3 be/4 root 0.00 B/s 0.00 B/s 0.00 % 0.00 % [ksoftirqd/0] 5 be/0 root 0.00 B/s 0.00 B/s 0.00 % 0.00 % [kworker/0:0H] 7 rt/4 root 0.00 B/s 0.00 B/s 0.00 % 0.00 % [migration/0] 8 be/4 root 0.00 B/s 0.00 B/s 0.00 % 0.00 % [rcu_bh] 9 be/4 root 0.00 B/s 0.00 B/s 0.00 % 0.00 % [rcu_sched] 附1： 上面第六列","link":"/2019/11/25/iotop工具/"},{"title":"Linux用户密码期限","text":"查看用户密码期限： [root@rui ~]#chage -l weblogic 最近一次密码修改时间 ：1月 09, 2017 密码过期时间 ：从不 密码失效时间 ：从不 帐户过期时间 ：从不 两次改变密码之间相距的最小天数 ：0 两次改变密码之间相距的最大天数 ：99999 在密码过期之前警告的天数 ：7 [root@egrant ~]#uptime 15:54:48 up 19 days, 22:54, 4 users, load average: 0.18, 0.63, 0.88 [root@rui ~]# 修改用户密码期限： [root@rui ~]#chage -M 88888 weblogic [root@rui ~]#chage -l weblogic 最近一次密码修改时间 ：1月 09, 2017 密码过期时间 ：从不 密码失效时间 ：从不 帐户过期时间 ：从不 两次改变密码之间相距的最小天数 ：0 两次改变密码之间相距的最大天数 ：88888 在密码过期之前警告的天数 ：7 [root@rui ~]# 修改默认的密码期限，配置文件在/etc/login.defs [root@rui ~]# grep PASS /etc/login.defs # PASS_MAX_DAYS Maximum number of days a password may be used. # PASS_MIN_DAYS Minimum number of days allowed between password changes. # PASS_MIN_LEN Minimum acceptable password length. # PASS_WARN_AGE Number of days warning given before a password expires. PASS_MAX_DAYS 99999 PASS_MIN_DAYS 0 PASS_MIN_LEN 5 PASS_WARN_AGE 7 [root@rui ~]# PASS_MAX_DAYS：两次改变密码之间相距的最大天数 PASS_MIN_DAYS：两次改变密码之间相距的最小天数 PASS_MIN_LEN： 密码长度（复杂性） PASS_WARN_AGE：在密码过期之前警告的天数 参考链接：https://www.cnblogs.com/paul8339/p/7145788.html","link":"/2019/11/25/Linux用户密码期限/"},{"title":"centos6.10升级gcc到4.8.5","text":"yum支持的最高版本只到4.4.7 不支持：C++11 [root@centos888 modsecurity-v3.0.3]# rpm -qa | grep gcc gcc-4.4.7-23.el6.x86_64 gcc-c++-4.4.7-23.el6.x86_64 libgcc-4.4.7-23.el6.x86_64 [root@centos888 modsecurity-v3.0.3]# 手工升级到4.8.5１、下载包： wget http://ftp.gnu.org/gnu/gcc/gcc-4.8.5/gcc-4.8.5.tar.bz2 ２、解压： [root@centos888 ~]# tar -xvf gcc-4.8.5.tar.bz2 ３、运行gcc自带的脚本，会自动下载安装一些依赖 [root@centos888 ~]# cd gcc-4.8.5 [root@centos888 gcc-4.8.5]# ./contrib/download_prerequisites ４、创建一个存放编译后文件的目录 [root@centos888 gcc-4.8.5]# mkdir gcc-build-4.8.5 [root@centos888 gcc-4.8.5]# cd gcc-build-4.8.5/ ５、开始编译： ../configure -enable-checking=release -enable-languages=c,c++ -disable-multilib 注意，语句开头是两个点，上层目录的意思 ６、安装，过程有点久 [root@centos888 gcc-build-4.8.5]# make &amp;&amp; make install ７、重启机器： [root@centos888 ~]# reboot ８、查看版本： [root@centos888 ~]# gcc --version gcc (GCC) 4.8.5 Copyright © 2015 Free Software Foundation, Inc. 本程序是自由软件；请参看源代码的版权声明。本软件没有任何担保； 包括没有适销性和某一专用目的下的适用性担保。 [root@centos888 ~]# g++ --version g++ (GCC) 4.8.5 Copyright © 2015 Free Software Foundation, Inc. 本程序是自由软件；请参看源代码的版权声明。本软件没有任何担保； 包括没有适销性和某一专用目的下的适用性担保。 [root@centos888 ~]# ９、此时生成的动态库没有替换旧版本gcc的动态库 [root@centos888 ~]# strings /usr/lib64/libstdc++.so.6 | grep GLIBC GLIBCXX_3.4 GLIBCXX_3.4.1 GLIBCXX_3.4.2 GLIBCXX_3.4.3 GLIBCXX_3.4.4 GLIBCXX_3.4.5 GLIBCXX_3.4.6 GLIBCXX_3.4.7 GLIBCXX_3.4.8 GLIBCXX_3.4.9 GLIBCXX_3.4.10 GLIBCXX_3.4.11 GLIBCXX_3.4.12 GLIBCXX_3.4.13 GLIBC_2.2.5 GLIBC_2.3 GLIBC_2.4 GLIBC_2.3.2 GLIBCXX_FORCE_NEW GLIBCXX_DEBUG_MESSAGE_LENGTH [root@centos888 ~]# １０、查找编译gcc时生成的最新动态库 [root@centos888 ~]# find / -name &quot;libstdc++.so*&quot; | grep usr /usr/local/lib64/libstdc++.so.6.0.19-gdb.py /usr/local/lib64/libstdc++.so.6.0.19 #这个 /usr/local/lib64/libstdc++.so /usr/local/lib64/libstdc++.so.6 /usr/share/gdb/auto-load/usr/lib64/libstdc++.so.6.0.13-gdb.pyo /usr/share/gdb/auto-load/usr/lib64/libstdc++.so.6.0.13-gdb.py /usr/share/gdb/auto-load/usr/lib64/libstdc++.so.6.0.13-gdb.pyc /usr/share/gdb/auto-load/usr/lib/libstdc++.so.6.0.13-gdb.pyo /usr/share/gdb/auto-load/usr/lib/libstdc++.so.6.0.13-gdb.py /usr/share/gdb/auto-load/usr/lib/libstdc++.so.6.0.13-gdb.pyc /usr/lib64/libstdc++.so.6.0.13 /usr/lib64/libstdc++.so.6 /usr/lib/gcc/x86_64-redhat-linux/4.4.4/libstdc++.so /usr/lib/gcc/x86_64-redhat-linux/4.4.4/32/libstdc++.so [root@centos888 ~]# １１、上面的最新动态库libstdc++.so.6.0.19复制到/usr/lib64目录下，并重新建立软连接。 [root@centos888 ~]# cp /usr/local/lib64/libstdc++.so.6.0.19 /usr/lib64/ [root@centos888 ~]# cd /usr/lib64/ [root@centos888 lib64]# ll libstdc++.so.6 lrwxrwxrwx. 1 root root 19 7月 2 01:32 libstdc++.so.6 -&gt; libstdc++.so.6.0.13 [root@centos888 lib64]# rm -f libstdc++.so.6 [root@centos888 lib64]# ln -s libstdc++.so.6.0.19 libstdc++.so.6 [root@centos888 lib64]# １２、再次查看gcc版本 strings /usr/lib64/libstdc++.so.6 | grep GLIBC","link":"/2019/11/25/centos6-10升级gcc到4-8-5/"},{"title":"nginx1.10.2添加modsecurity","text":"ModSecurity 简介ModSecurity是一个入侵侦测与防护引擎，它主要是用于Web 应用程序，所以也被称为Web应用程序防火墙。它可以作为Apache Web服务器的模块或是单独的应用程序来运作。 ModSecurity的功能是增强Web application的安全性和保护Web application以避免遭受来自已知与未知的攻击。听说与nginx配合，效果也很好。 环境： CentOS Linux release 7.7.1908 (Core) nginx/1.10.2 modsecurity-v3.0.3 ModSecurity-nginx-master owasp-modsecurity-crs-3.0-master 1、编译nginx ./configure --prefix=/usr/local/nginx --with-openssl=/root/openssl-1.0.2l/ --with-http_ssl_module 2、安装nginx报错： /root/nginx-sticky-module-1.1/ngx_http_sticky_module.c /root/nginx-sticky-module-1.1/ngx_http_sticky_module.c: 在函数‘ngx_http_get_sticky_peer’中: /root/nginx-sticky-module-1.1/ngx_http_sticky_module.c:333:21: 错误：赋值时将整数赋给指针，未作类型转换 [-Werror] iphp-&gt;rrp.current = iphp-&gt;selected_peer; ^ cc1: all warnings being treated as errors make[1]: *** [objs/addon/nginx-sticky-module-1.1/ngx_http_sticky_module.o] 错误 1 make[1]: 离开目录“/root/nginx-1.10.2” make: *** [build] 错误 2 3、修改文件ngx_http_sticky_module.c （主要是#if到#endif这块） if (peer &amp;&amp; selected_peer &gt;= 0) { ngx_log_debug(NGX_LOG_DEBUG_HTTP, pc-&gt;log, 0, &quot;[sticky/get_sticky_peer] peer found at index %i&quot;, selected_pe er); #if defined(nginx_version) &amp;&amp; nginx_version &gt;= 1009000 iphp-&gt;rrp.current = peer; #else iphp-&gt;rrp.current = iphp-&gt;selected_peer; #endif pc-&gt;cached = 0; pc-&gt;connection = NULL; pc-&gt;sockaddr = peer-&gt;sockaddr; pc-&gt;socklen = peer-&gt;socklen; pc-&gt;name = &amp;peer-&gt;name; 4、再次安装nginx，安装成功。 5、建立modsecurity的动态链接 ./configure --prefix=/usr/local/nginx --with-openssl=/root/openssl-1.0.2l/ --with-http_ssl_module --add-module=/root/nginx-sticky-module-1.1 --add-dynamic-module=/root/ModSecurity-nginx-master make &amp;&amp; make install mkdir /usr/local/nginx/modules cp /root/nginx-1.10.2/objs/ngx_http_modsecurity_module.so /usr/local/nginx/modules/ 6、配置modsecurity [root@nessus nginx]# mkdir /usr/local/nginx/modsec [root@nessus nginx]# cp ~/modsecurity-v3.0.3/modsecurity.conf-recommended /usr/local/nginx/modsec/modsecurity.conf [root@nessus nginx]# sed -i 's/SecRuleEngine DetectionOnly/SecRuleEngine On/' /usr/local/nginx/modsec/modsecurity.conf 7、手动创建main.conf文件 [root@nessus modsec]# cat /usr/local/nginx/modsec/main.conf # From https://github.com/SpiderLabs/ModSecurity/blob/master/\\ # modsecurity.conf-recommended # # Edit to set SecRuleEngine On Include &quot;/usr/local/nginx/modsec/modsecurity.conf&quot; # Basic test rule SecRule ARGS:testparam &quot;@contains test&quot; &quot;id:1234,deny,status:403&quot; [root@nessus modsec]# 8、nginx.conf首行添加 load_module modules/ngx_http_modsecurity_module.so; #添加modsecurity的模块 9、在nginx.conf 在server块添加 server { modsecurity on; #启用modsecurity modsecurity_rules_file /usr/local/nginx/modsec/main.conf; #指定规则文件路径 listen 80; server_name localhost; 10、复制unicode.mapping到modsec cp /root/modsecurity-v3.0.3/unicode.mapping /usr/local/nginx/modsec/ 不然会报错： [root@nessus sbin]# ./nginx -t nginx: [emerg] &quot;modsecurity_rules_file&quot; directive Rules error. File: /usr/local/nginx/modsec/modsecurity.conf. Line: 236. Column: 17. Failed to locate the unicode map file from: unicode.mapping Looking at: 'unicode.mapping', 'unicode.mapping', '/usr/local/nginx/modsec/unicode.mapping', '/usr/local/nginx/modsec/unicode.mapping'. in /usr/local/nginx/conf/nginx.conf:37 nginx: configuration file /usr/local/nginx/conf/nginx.conf test failed 11、测试nginx [root@nessus ~]# /usr/local/nginx/sbin/nginx -t nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful [root@nessus ~]# 12、启动nginx [root@nessus ~]# /usr/local/nginx/sbin/nginx [root@nessus ~]# ps -ef | grep nginx root 25104 1 0 11:20 ? 00:00:00 nginx: master process /usr/local/nginx/sbin/nginx nobody 25105 25104 0 11:20 ? 00:00:00 nginx: worker process root 25107 21800 0 11:20 pts/0 00:00:00 grep --color=auto nginx [root@nessus ~]# 13、测试拦截 [root@nessus ~]# curl localhost?testparam=test &lt;html&gt; &lt;head&gt;&lt;title&gt;403 Forbidden&lt;/title&gt;&lt;/head&gt; &lt;body bgcolor=&quot;white&quot;&gt; &lt;center&gt;&lt;h1&gt;403 Forbidden&lt;/h1&gt;&lt;/center&gt; &lt;hr&gt;&lt;center&gt;nginx/1.10.2&lt;/center&gt; &lt;/body&gt; &lt;/html&gt; 14、查看modsecurity日志： [root@nessus ~]# cat /var/log/modsec_audit.log ---8xMZOadF---A-- [23/Oct/2019:11:22:01 +0800] 157180092113.733856 127.0.0.1 40190 127.0.0.1 80 ---8xMZOadF---B-- GET /?testparam=test HTTP/1.1 User-Agent: curl/7.29.0 Host: localhost Accept: */* ---8xMZOadF---D-- ---8xMZOadF---E-- &lt;html&gt;\\x0d\\x0a&lt;head&gt;&lt;title&gt;403 Forbidden&lt;/title&gt;&lt;/head&gt;\\x0d\\x0a&lt;body bgcolor=&quot;white&quot;&gt;\\x0d\\x0a&lt;center&gt;&lt;h1&gt;403 Forbidden&lt;/h1&gt;&lt;/center&gt;\\x0d\\x0a&lt;hr&gt;&lt;center&gt;nginx/1.10.2&lt;/center&gt;\\x0d\\x0a&lt;/body&gt;\\x0d\\x0a&lt;/html&gt;\\x0d\\x0a ---8xMZOadF---F-- HTTP/1.1 403 Server: nginx/1.10.2 Date: Wed, 23 Oct 2019 03:22:01 GMT Content-Length: 169 Content-Type: text/html Connection: keep-alive ---8xMZOadF---H-- ---8xMZOadF---I-- ---8xMZOadF---J-- ---8xMZOadF---Z-- [root@nessus ~]# OWASP ModSecurity核心规则集（CRS）1、导入规则上传owasp-modsecurity-crs-3.3-dev.zip复制crs的配置文件 cp /root/owasp-modsecurity-crs-3.0-master/crs-setup.conf.example /usr/local/nginx/modsec/modsecurity_crs_10_setup.conf 2、创建目录 用于存放规则 mkdir /usr/local/nginx/modsec/modsecurity-crs cp /root/owasp-modsecurity-crs-3.0-master/rules/* /usr/local/nginx/modsec/modsecurity-crs/ 3、在/usr/local/nginx/modsecmain.conf末尾添加 Include modsecurity_crs_10_setup.conf Include modsecurity-crs/REQUEST-901-INITIALIZATION.conf Include modsecurity-crs/REQUEST-903.9001-DRUPAL-EXCLUSION-RULES.conf Include modsecurity-crs/REQUEST-903.9002-WORDPRESS-EXCLUSION-RULES.conf Include modsecurity-crs/REQUEST-905-COMMON-EXCEPTIONS.conf #Include modsecurity-crs/REQUEST-910-IP-REPUTATION.conf #有点问题 先注释掉 Include modsecurity-crs/REQUEST-911-METHOD-ENFORCEMENT.conf Include modsecurity-crs/REQUEST-912-DOS-PROTECTION.conf Include modsecurity-crs/REQUEST-913-SCANNER-DETECTION.conf Include modsecurity-crs/REQUEST-920-PROTOCOL-ENFORCEMENT.conf Include modsecurity-crs/REQUEST-921-PROTOCOL-ATTACK.conf Include modsecurity-crs/REQUEST-930-APPLICATION-ATTACK-LFI.conf Include modsecurity-crs/REQUEST-931-APPLICATION-ATTACK-RFI.conf Include modsecurity-crs/REQUEST-932-APPLICATION-ATTACK-RCE.conf Include modsecurity-crs/REQUEST-933-APPLICATION-ATTACK-PHP.conf Include modsecurity-crs/REQUEST-941-APPLICATION-ATTACK-XSS.conf Include modsecurity-crs/REQUEST-942-APPLICATION-ATTACK-SQLI.conf Include modsecurity-crs/REQUEST-943-APPLICATION-ATTACK-SESSION-FIXATION.conf Include modsecurity-crs/REQUEST-949-BLOCKING-EVALUATION.conf Include modsecurity-crs/RESPONSE-950-DATA-LEAKAGES.conf Include modsecurity-crs/RESPONSE-951-DATA-LEAKAGES-SQL.conf Include modsecurity-crs/RESPONSE-952-DATA-LEAKAGES-JAVA.conf Include modsecurity-crs/RESPONSE-953-DATA-LEAKAGES-PHP.conf Include modsecurity-crs/RESPONSE-954-DATA-LEAKAGES-IIS.conf Include modsecurity-crs/RESPONSE-959-BLOCKING-EVALUATION.conf Include modsecurity-crs/RESPONSE-980-CORRELATION.conf 4、规则文件名解释：主要规则文件： REQUEST-910-IP-REPUTATION.conf（可疑IP匹配) REQUEST-912-DOS-PROTECTION.conf（DDOS攻击） REQUEST-913-SCANNER-DETECTION.conf（扫描器检测） REQUEST-920-PROTOCOL-ENFORCEMENT.conf（HTTP协议规范相关规则） REQUEST-921-PROTOCOL-ATTACK.conf（协议攻击） 举例：HTTP Header Injection Attack、HTTP参数污染 REQUEST-930-APPLICATION-ATTACK-LFI.conf（应用攻击-路径遍历） REQUEST-931-APPLICATION-ATTACK-RFI.conf（远程文件包含） REQUEST-932-APPLICATION-ATTACK-RCE.conf（远程命令执行） REQUEST-933-APPLICATION-ATTACK-PHP.conf（PHP注入攻击） REQUEST-941-APPLICATION-ATTACK-XSS.conf（XSS） REQUEST-942-APPLICATION-ATTACK-SQLI.conf（SQL注入） REQUEST-943-APPLICATION-ATTACK-SESSION-FIXATION.conf（会话固定） REQUEST-949-BLOCKING-EVALUATION.conf（） RESPONSE-950-DATA-LEAKAGES.conf（信息泄露） RESPONSE-951-DATA-LEAKAGES-SQL.conf（SQL信息泄露） RESPONSE-952-DATA-LEAKAGES-JAVA.conf（JAVA源代码泄露） RESPONSE-953-DATA-LEAKAGES-PHP.conf（PHP信息泄露） RESPONSE-954-DATA-LEAKAGES-IIS.conf（IIS信息泄露） ———————————————— 版权声明：本文为CSDN博主「crystal_da」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。 原文链接：https://blog.csdn.net/Sydney_d/article/details/81740534 也可以参考：https://blog.slogra.com/doc/modsecurity_crs.html 5、重启nginx: /usr/local/nginx/sbin/nginx -s reload 测试：（假装sql注入） 查看modsecurity后台日志：/var/log/modsec_audit.log ModSecurity: Warning. Matched &quot;Operator `Rx' with parameter `^[\\d.:]+$' against variable `REQUEST_HEADERS:Host' (Value: `192.168.15.146' ) [file &quot;/usr/local/nginx/modsec/modsecurity-crs/REQUEST-920-PROTOCOL-ENFORCEMENT.conf&quot;] [line &quot;777&quot;] [id &quot;920350&quot;] [rev &quot;2&quot;] [msg &quot;Host header is a numeric IP address&quot;] [data &quot;192.168.15.146&quot;] [severity &quot;4&quot;] [ver &quot;OWASP_CRS/3.0.0&quot;] [maturity &quot;9&quot;] [accuracy &quot;9&quot;] [tag &quot;application-multi&quot;] [tag &quot;language-multi&quot;] [tag &quot;platform-multi&quot;] [tag &quot;attack-protocol&quot;] [tag &quot;OWASP_CRS/PROTOCOL_VIOLATION/IP_HOST&quot;] [tag &quot;WASCTC/WASC-21&quot;] [tag &quot;OWASP_TOP_10/A7&quot;] [tag &quot;PCI/6.5.10&quot;] [hostname &quot;192.168.10.126&quot;] [uri &quot;/test&quot;] [unique_id &quot;157181161484.259919&quot;] [ref &quot;o0,14v42,14&quot;] ModSecurity: Warning. detected SQLi using libinjection. [file &quot;/usr/local/nginx/modsec/modsecurity-crs/REQUEST-942-APPLICATION-ATTACK-SQLI.conf&quot;] [line &quot;43&quot;] [id &quot;942100&quot;] [rev &quot;1&quot;] [msg &quot;SQL Injection Attack Detected via libinjection&quot;] [data &quot;Matched Data: 1&amp;1 found within ARGS:id: 1 and 1=1&quot;] [severity &quot;2&quot;] [ver &quot;OWASP_CRS/3.0.0&quot;] [maturity &quot;1&quot;] [accuracy &quot;8&quot;] [hostname &quot;192.168.10.126&quot;] [uri &quot;/test&quot;] [unique_id &quot;157181161484.259919&quot;] [ref &quot;v13,9&quot;] ModSecurity: Access denied with code 403 (phase 2). Matched &quot;Operator `Ge' with parameter `5' against variable `TX:ANOMALY_SCORE' (Value: `8' ) [file &quot;/usr/local/nginx/modsec/modsecurity-crs/REQUEST-949-BLOCKING-EVALUATION.conf&quot;] [line &quot;44&quot;] [id &quot;949110&quot;] [rev &quot;&quot;] [msg &quot;Inbound Anomaly Score Exceeded (Total Score: 8)&quot;] [data &quot;&quot;] [severity &quot;2&quot;] [ver &quot;&quot;] [maturity &quot;0&quot;] [accuracy &quot;0&quot;] [tag &quot;application-multi&quot;] [tag &quot;language-multi&quot;] [tag &quot;platform-multi&quot;] [tag &quot;attack-generic&quot;] [hostname &quot;192.168.10.126&quot;] [uri &quot;/test&quot;] [unique_id &quot;157181161484.259919&quot;] [ref &quot;&quot;] ModSecurity: Warning. Matched &quot;Operator `Ge' with parameter `5' against variable `TX:INBOUND_ANOMALY_SCORE' (Value: `8' ) [file &quot;/usr/local/nginx/modsec/modsecurity-crs/RESPONSE-980-CORRELATION.conf&quot;] [line &quot;65&quot;] [id &quot;980130&quot;] [rev &quot;&quot;] [msg &quot;Inbound Anomaly Score Exceeded (Total Inbound Score: 8 - SQLI=5,XSS=0,RFI=0,LFI=0,RCE=0,PHPI=0,HTTP=0,SESS=0): SQL Injection Attack Detected via libinjection&quot;] [data &quot;&quot;] [severity &quot;0&quot;] [ver &quot;&quot;] [maturity &quot;0&quot;] [accuracy &quot;0&quot;] [tag &quot;event-correlation&quot;] [hostname &quot;192.168.10.126&quot;] [uri &quot;/test&quot;] [unique_id &quot;157181161484.259919&quot;] [ref &quot;&quot;] 实验完成","link":"/2019/11/12/nginx1-10-2添加modsecurity/"},{"title":"nginx无法获取X-Forwarded-For过来的IP","text":"环境：CentOS release 6.9 (Final) nginx 1.6.1 现象：nginx access.log只有记录到一个IP192.168.1.86 - - [29/Oct/2019:03:44:43 +0800] &quot;GET /web/ HTTP/1.0&quot; 200 15356 &quot;-&quot; &quot;Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; Trident/5.0)&quot; 192.168.1.86 - - [29/Oct/2019:03:46:03 +0800] &quot;GET /web HTTP/1.0&quot; 302 0 &quot;-&quot; &quot;Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; Trident/5.0)&quot; 192.168.1.86 - - [29/Oct/2019:03:46:03 +0800] &quot;GET /web/login.html HTTP/1.0&quot; 200 15356 &quot;-&quot; &quot;Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; Trident/5.0)&quot; 192.168.1.86 - - [29/Oct/2019:03:47:15 +0800] &quot;GET /web HTTP/1.0&quot; 302 0 &quot;-&quot; &quot;Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; Trident/5.0)&quot; 192.168.1.86 - - [29/Oct/2019:03:47:15 +0800] &quot;GET /web/ HTTP/1.0&quot; 200 15356 &quot;-&quot; &quot;Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; Trident/5.0)&quot; 192.168.1.86 - - [29/Oct/2019:03:48:20 +0800] &quot;GET /web HTTP/1.0&quot; 302 0 &quot;-&quot; &quot;Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; Trident/5.0)&quot; 192.168.1.86 - - [29/Oct/2019:03:48:20 +0800] &quot;GET /web/review-reward/evgroup/reward-evgroup-save HTTP/1.0&quot; 200 15356 &quot;-&quot; &quot;Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; Trident/5.0)&quot; 192.168.1.86 - - [29/Oct/2019:03:49:26 +0800] &quot;GET /web HTTP/1.0&quot; 302 0 &quot;-&quot; &quot;Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; Trident/5.0)&quot; 192.168.1.86 - - [29/Oct/2019:03:49:26 +0800] &quot;GET /web/review-reward/evgroup/reward-evgroup-save HTTP/1.0&quot; 200 15356 &quot;-&quot; &quot;Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; Trident/5.0)&quot; 192.168.1.86 - - [29/Oct/2019:03:50:49 +0800] &quot;GET /web HTTP/1.0&quot; 302 0 &quot;-&quot; &quot;Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; Trident/5.0)&quot; 192.168.1.86 - - [29/Oct/2019:03:50:49 +0800] &quot;GET /web/ HTTP/1.0&quot; 200 15356 &quot;-&quot; &quot;Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; Trident/5.0)&quot; 192.168.1.86 - - [29/Oct/2019:03:52:11 +0800] &quot;GET /web HTTP/1.0&quot; 302 0 &quot;-&quot; &quot;Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; Trident/5.0)&quot; 192.168.1.86 - - [29/Oct/2019:03:52:11 +0800] &quot;GET /web/ HTTP/1.0&quot; 200 15356 &quot;-&quot; &quot;Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; Trident/5.0)&quot; 192.168.1.86 - - [29/Oct/2019:03:53:13 +0800] &quot;GET /web HTTP/1.0&quot; 302 0 &quot;-&quot; &quot;Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; Trident/5.0)&quot; 192.168.1.86 - - [29/Oct/2019:03:53:13 +0800] &quot;GET /web/ HTTP/1.0&quot; 200 15356 &quot;-&quot; &quot;Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; Trident/5.0)&quot; 导致这个情况的有二种： 第一种：192.168.1.86可能是台 当前网络环境中的前端机器 第二种：X-Forwarded-For的值没有正确配置出来 对于第二种，解决方法如下：1、nginx重新编译，configure参数加上选项：–with-http_realip_module查看当前nginx编译参数： [root@rui home]# /usr/local/nginx/sbin/nginx -V nginx version: nginx/1.6.1 built by gcc 4.4.7 20120313 (Red Hat 4.4.7-18) (GCC) TLS SNI support enabled configure arguments: --prefix=/usr/local/nginx --with-openssl=/root/openssl-1.0.2l/ --with-http_ssl_module --add-module=/root/nginx-sticky-module-1.1 [root@rui home]# 2、进入nginx安装包目录，重新编译，添加–with-http_realip_module参数： ./configure --prefix=/usr/local/nginx --with-openssl=/root/openssl-1.0.2l/ --with-http_ssl_module --add-module=/root/nginx-sticky-module-1.1 --with-http_realip_module 3、编译安装： make &amp;&amp; make install 4、在conf配置中添加： server { ... set_real_ip_from 192.168.1.0/24; #允许可此网段过来的访问可以修改real_ip； real_ip_header X-Forwarded-For; #将$x-forward-for的值替换掉real_ip ... #日志格式如下 log_format '$remote_addr - $remote_user [$time_local] &quot;$request&quot; ' '$status $body_bytes_sent &quot;$http_referer&quot; ' '&quot;$http_user_agent&quot; $http_x_forwarded_for'; ... } 5、重载nginx后，再次查看日志： 42.10.6.109 - - [12/Nov/2019:14:15:29 +0800] &quot;GET /web/ HTTP/1.0&quot; 301 278 &quot;http://wangzhirui.com/&quot; &quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36&quot; 51.178.18.228 - - [12/Nov/2019:14:15:44 +0800] &quot;GET /web/j_spring_security_logout HTTP/1.0&quot; 301 278 &quot;http://wangzhirui.com/web/prpapprove/list-for-view?flag=init&quot; &quot;Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko&quot; 51.178.18.228 - - [12/Nov/2019:14:15:44 +0800] &quot;GET /weihu.html HTTP/1.0&quot; 200 1894 &quot;http://wangzhirui.com/egrantweb/prpapprove/list-for-view?flag=init&quot; &quot;Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko&quot; 51.178.18.228 - - [12/Nov/2019:14:15:51 +0800] &quot;GET / HTTP/1.0&quot; 200 514 &quot;http://wangzhirui.com/Program/&quot; &quot;Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko&quot; 51.178.18.228 - - [12/Nov/2019:14:15:51 +0800] &quot;GET /web/ HTTP/1.0&quot; 301 278 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko&quot; 51.178.18.228 - - [12/Nov/2019:14:15:51 +0800] &quot;GET /weihu.html HTTP/1.0&quot; 200 1894 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko&quot; 51.178.81.210 - - [12/Nov/2019:14:15:54 +0800] &quot;POST /web/review-reward/evgroup/reward-evgroup-save HTTP/1.0&quot; 200 0 &quot;http://wangzhirui.com/web/review-reward/evgroup/reward-group-manage?flag=init&amp;atvtype=1&quot; &quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0&quot; 51.178.81.210 - - [12/Nov/2019:14:15:54 +0800] &quot;POST /web/review-reward/evgroup/reward-group-manage?atvtype=1 HTTP/1.0&quot; 200 9394 &quot;http://wangzhirui.com/web/review-reward/evgroup/reward-group-manage?flag=init&amp;atvtype=1&quot; &quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0&quot;","link":"/2019/11/12/nginx无法获取X-Forwarded-For过来的IP/"},{"title":"苹果5s–X iOS 12.3及更高版本越狱工具[测试版]","text":"官网：https://checkra.in/ checkra1n 0.9.1 beta 我们无法确定您的操作系统。查看下载 重要信息此版本是一个早期测试预览，因此应不一个主设备上进行安装。我们强烈建议您 谨慎行事。 什么是新的该Beta版修复了多个错误，其中包括： 在iPad上安装Cydia时，加载器应用程序崩溃的问题当macOS语言设置为英语以外的其他语言时发生崩溃iPad Minis无法与GUI配合使用的问题scp二进制文件无法正常工作的问题此版本还提高了某些错误（特别是-20错误）的清晰度，该错误现在提供有关如何解决它的指导。 不支援的装置checkra1n最终将支持iPhone 5s和iPhone X之间的所有设备，但是，此beta版本不支持以下设备： iPad Air 2 iPad第五代 iPad Pro第一代 在更高的版本中将添加对这些设备的支持。 对以下设备的支持是试验性的，可能需要比平常更多的尝试： iPhone 5SiPad Mini 2iPad Mini 3iPad Air这些设备的可靠性将在将来的版本中得到改善。 不支持的平台该Beta仅适用于macOS。支持Windows和Linux的工作正在进行中，它将在以后的版本中添加。 包装经理目前，checkra1n仅支持安装Cydia。对其他程序包管理器的支持即将推出，并且不需要进行checkra1n更新。","link":"/2019/11/11/苹果5s–X-iOS-12-3及更高版本越狱工具-测试版/"},{"title":"日志轮替logrotate","text":"在/etc/logrotate.d下新建一个文件tomcat,内容如下： /home/tomcat/servers/tomcat7/logs/catalina.out { daily nocompress copytruncate dateext rotate 7 missingok notifempty create 774 tomcat tomcat postrotate /usr/bin/killall -HUP rsyslogd endscript } 字段解释如下 字段 解释 /home/tomcat/servers/tomcat7/logs/catalina.out #这个是分割日志的目标，用绝对路径 也能使用*.out daily #每日分割 nocompress #不压缩 copytruncate #重命名原日志文件，创建新的日志文件 dateext #日期命名 rotate 7 #保存7天 missingok #忽略其他错误 notifempty #如果日志文件为空，轮循不会进行。 create 774 tomcat tomcat #新日志文件的权限 postrotate /usr/bin/killall -HUP rsyslogd endscript #在所有其它指令完成后，postrotate和endscript里面指定的命令将被执行。在这种情况下， rsyslogd 进程将立即再次读取其配置并继续运行。 手工运行logrotate -f /etc/logrotate.d/tomcat 执行完，日志立即给分割 对nginx进行日志轮替/usr/local/nginx/logs/*.log { daily nocompress copytruncate dateext rotate 30 missingok notifempty }","link":"/2019/11/06/日志轮替logrotate/"},{"title":"Nexus恢复误删除的仓库","text":"前提条件是：没有清空trash. 首先登陆到nexus所在的机器,找到sonatype-work这个目录,这个是nexus的数据目录,所以有jar包和索引等都存放在这里.切换到sonatype-work/nexus/trash 这个目录,就可以看到你刚才删除的仓库名字了,比如我刚才删除的是3rd party, 这里会显示一个thirdparty,这个是仓库的ID,创建的时候要用到的. 1、把thirdparty这个目录移到sonatype-work/nexus/storage/ 里面,移之前确认一下storage里面是不是还有thirdparty这个目录,如果有,（备份）删除掉之后再移. 2、重新添加下。 3、这个ID、Name在sonatype-work/nexus/conf/nexus.xml 也能查到 4、save下 5、设置为公共仓库 save就行了。","link":"/2019/11/05/Nexus恢复误删除的仓库/"},{"title":"修改oracle用户密码时报 ORA-28007解决方式","text":"ORA-28007解决方式: ALTER PROFILE DEFAULT LIMIT PASSWORD_REUSE_MAX UNLIMITED; SQL&gt; alter user ruionline identified by ruionline; alter user ruionline identified by ruionline * 第 1 行出现错误: ORA-28007: 无法重新使用口令 SQL&gt; ALTER PROFILE DEFAULT LIMIT PASSWORD_REUSE_MAX UNLIMITED; 配置文件已更改 SQL&gt; alter user ruionline identified by ruionline; 用户已更改。 顺便也可以修改下密码过期时间 ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED; --将密码有效期由默认的180天修改成“无限制”","link":"/2019/10/30/修改oracle用户密码时报-ORA-28007解决方式/"},{"title":"C++ compiler cannot create executables解决方法","text":"报：C++ compiler cannot create executables解决方法 今天想安装个extundelete软件 结果在./configure上就报错了 [root@tomcat extundelete-0.2.4]# ./configure Configuring extundelete 0.2.4 configure: error: in `/root/extundelete-0.2.4': configure: error: C++ compiler cannot create executables See `config.log' for more details 执行下的这条命令就行了。 yum install gcc gcc-c++ gcc-g77 再次./configure 没有报错","link":"/2019/10/17/C-compiler-cannot-create-executables解决方法/"},{"title":"zabbix配置钉钉机器人报警","text":"环境信息： zabbix版本：3.0 系统：centos6.10 python 2.7.13 一、脚本配置1、创建钉钉机器人，获取webhook 2、我zabbix配置文件中 存放脚本位置在： /usr/local/zabbix-server/share/zabbix/alertscripts3、将dingding.py脚本放在这个路径下 -rwxr-xr-x 1 zabbix zabbix 722 5月 7 17:25 dingding.py -rwxrwxr-x 1 zabbix zabbix 136 4月 26 12:11 sendmail.sh -rwxrwxr-x. 1 zabbix zabbix 314 3月 1 18:30 sendmail.sh.bak [root@zabbix alertscripts]# pwd /usr/local/zabbix-server/share/zabbix/alertscripts 4、dingding.py脚本内容： #!/usr/bin/python # -*- coding: utf-8 -*- import requests import json import sys import os headers = {'Content-Type': 'application/json;charset=utf-8'} api_url = &quot;https://oapi.dingtalk.com/robot/send?access_token=1a28ce1e6831xxxxxxxxxxxxxxxxxxxxx79a5e6a4ead3808921e2896&quot; #群机器人webhook def msg(text): json_text= { &quot;msgtype&quot;: &quot;text&quot;, &quot;at&quot;: { &quot;atMobiles&quot;: [ # &quot;13288888888&quot; #写被@人的电话 ], &quot;isAtAll&quot;: False }, &quot;text&quot;: { &quot;content&quot;: text } } print requests.post(api_url,json.dumps(json_text),headers=headers).content if __name__ == '__main__': text = sys.argv[1] msg(text) 二、zabbix网页端配置：1、配置报警媒介类型： 脚本参数：{ALERT.MESSAGE} 2、配置动作： 3、配置报警内容： 名称：自定义 默认标题：故障{TRIGGER.STATUS},服务器:{HOSTNAME1}发生: {TRIGGER.NAME}故障! 消息内容： 告警主机:{HOST.NAME} 监控取值:{ITEM.LASTVALUE} 告警等级:{TRIGGER.SEVERITY} 当前状态:{TRIGGER.STATUS} 告警信息:{TRIGGER.NAME} 告警时间:{EVENT.DATE} {EVENT.TIME} 事件ID:{EVENT.ID} 恢复消息：勾选 恢复主题：故障{TRIGGER.STATUS},服务器:{HOSTNAME1}发生: {TRIGGER.NAME}恢复！ 恢复信息： 告警主机:{HOST.NAME} 监控项目:{ITEM.NAME} 监控取值:{ITEM.LASTVALUE} 告警等级:{TRIGGER.SEVERITY} 当前状态:{TRIGGER.STATUS} 告警信息:{TRIGGER.NAME} 告警时间:{EVENT.DATE} {EVENT.TIME} 恢复时间:{EVENT.RECOVERY.DATE} {EVENT.RECOVERY.TIME} 持续时间:{EVENT.AGE} 事件ID:{EVENT.ID} 4、配置操作： 5、配置用户报警媒介： 完成：","link":"/2019/10/15/zabbix配置钉钉机器人报警/"},{"title":"vmware增加新硬盘立即生效","text":"vmware添加新的硬盘后，在Centos6.x没有发现到新硬盘执行下列语句，即可立即刷新 echo &quot;scsi add-single-device 2 0 2 0&quot; &gt; /proc/scsi/scsi 操作过程 [root@kjgl-web ~]# lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sr0 11:0 1 4.2G 0 rom sda 8:0 0 100G 0 disk ├─sda1 8:1 0 200M 0 part /boot └─sda2 8:2 0 99.8G 0 part ├─vg_kjglweb-LogVol01 (dm-0) 253:0 0 167.9G 0 lvm / └─vg_kjglweb-LogVol00 (dm-1) 253:1 0 32G 0 lvm [SWAP] sdb 8:16 0 4T 0 disk └─sdb1 8:17 0 4T 0 part ├─vg_kjglweb-LogVol01 (dm-0) 253:0 0 167.9G 0 lvm / └─vg_kjglweb-data (dm-2) 253:2 0 3.9T 0 lvm /data [root@kjgl-web ~]# ll /dev/sd sda sda1 sda2 sdb sdb1 [root@kjgl-web ~]# ll /dev/sd sda sda1 sda2 sdb sdb1 [root@kjgl-web ~]# echo &quot;scsi add-single-device 2 0 2 0&quot; &gt; /proc/scsi/scsi [root@kjgl-web ~]# lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sr0 11:0 1 4.2G 0 rom sda 8:0 0 100G 0 disk ├─sda1 8:1 0 200M 0 part /boot └─sda2 8:2 0 99.8G 0 part ├─vg_kjglweb-LogVol01 (dm-0) 253:0 0 167.9G 0 lvm / └─vg_kjglweb-LogVol00 (dm-1) 253:1 0 32G 0 lvm [SWAP] sdb 8:16 0 4T 0 disk └─sdb1 8:17 0 4T 0 part ├─vg_kjglweb-LogVol01 (dm-0) 253:0 0 167.9G 0 lvm / └─vg_kjglweb-data (dm-2) 253:2 0 3.9T 0 lvm /data sdc 8:32 0 3T 0 disk #这个是硬盘 echo “scsi add-single-device w x y z” &gt; /proc/scsi/scsi参数值 w、x、y 、 z，解释如下：w（Host）是主机适配器标识，第一个适配器为零（0）x （Channel）是主机适配器上的 SCSI 通道，第一个通道为零（0）y （ID）是设备的 SCSI 标识z （Lun）是 LUN 号，第一个 LUN 为零（0） 转载：https://www.cnblogs.com/ddif/p/8942809.html","link":"/2019/09/29/vmware增加新硬盘立即生效/"},{"title":"mysql执行sql文件的方式","text":"sql文件内容(用于批量打印锁表进程)： [root@ruimysql ~]# cat /home/mysql/scripts/kill_locked.sql select group_concat(concat('kill ',id) separator '; ') as cmd from information_schema.processlist where user='test'; [root@ruimysql ~]# 第一种：在linux终端下执行： [root@ruimysql ~]# mysql -utest -p123456 &lt; /home/mysql/scripts/kill_locked.sql mysql: [Warning] Using a password on the command line interface can be insecure. cmd kill 160234; kill 160233; kill 160237; kill 160235; kill 160236; kill 160251; kill 160238; kill 160239; kill 160229; kill 160242; kill 160253; kill 160240; kill 160227 [root@ruimysql ~]# 第二种：在己连接mysql终端下执行： mysql&gt; \\. /home/mysql/scripts/kill_locked.sql +------------------------------------------------------------------------------------------------------------------------------------------------------------+ | cmd | +------------------------------------------------------------------------------------------------------------------------------------------------------------+ | kill 160234; kill 160233; kill 160235; kill 160236; kill 160229; kill 160227; kill 160232; kill 160225; | +------------------------------------------------------------------------------------------------------------------------------------------------------------+ 1 row in set (0.03 sec) mysql&gt; quit","link":"/2019/09/27/mysql执行sql文件的方式/"},{"title":"win7 gvim配色方案","text":"打开gvim界面－”编辑”－“启动设定”将原来内容清空后，替换如下配置 set nocompatible source $VIMRUNTIME/vimrc_example.vim source $VIMRUNTIME/mswin.vim behave mswin &quot;设置行号显示 set nu! colorscheme desert syntax enable syntax on let g:winManagerWindowLayout='FileExplorer|TagList' nmap wm :WMToggle &quot;启动备份 set nobackup setlocal noswapfile set bufhidden=hide set wrap set guifont=courier_new:h10 set clipboard+=unnamed set fenc=utf-8 set fencs=utf-8,usc-bom,euc-jp,gb18030,gbk,gb2312,cp936 &quot; 设置backup file后缀 set backupext=.bak &quot; 设置backup dir set backupdir=E:/vim_bak set diffexpr=MyDiff() function MyDiff() let opt = '-a --binary ' if &amp;diffopt =~ 'icase' | let opt = opt . '-i ' | endif if &amp;diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif let arg1 = v:fname_in if arg1 =~ ' ' | let arg1 = '&quot;' . arg1 . '&quot;' | endif let arg2 = v:fname_new if arg2 =~ ' ' | let arg2 = '&quot;' . arg2 . '&quot;' | endif let arg3 = v:fname_out if arg3 =~ ' ' | let arg3 = '&quot;' . arg3 . '&quot;' | endif if $VIMRUNTIME =~ ' ' if &amp;sh =~ '\\&lt;cmd' if empty(&amp;shellxquote) let l:shxq_sav = '' set shellxquote&amp; endif let cmd = '&quot;' . $VIMRUNTIME . '\\diff&quot;' else let cmd = substitute($VIMRUNTIME, ' ', '&quot; ', '') . '\\diff&quot;' endif else let cmd = $VIMRUNTIME . '\\diff' endif silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' &gt; ' . arg3 if exists('l:shxq_sav') let &amp;shellxquote=l:shxq_sav endif endfunctio","link":"/2019/09/20/win7-gvim配色方案/"},{"title":"配置ntp服务器","text":"背景 web服务器可以上网 而数据库服务器禁网。但需要同步网络时间，本地又没有ntp服务器可以同步。思路：web同步网络时间且做ntp服务端 数据库同步web机器的时间 A：192.168.15.173 （ntp服务端） B：192.168.15.174 （ntp客户端） 安装下ntp包 其实默认是有安装的。 yum install -y ntp #A与B机器都要安装 服务端1、修改配置vi /etc/ntp.conf注释掉这个行 restrict default kod nomodify notrap nopeer noquery解释：上面那行表示：拒绝客户端的所有操作 字段 解释 default 就是指所有的IP ignore 关闭所有的 NTP 联机服务 nomodify 客户端不能更改服务端的时间参数，但是客户端可以通过服务端进行网络校时。 notrust 客户端除非通过认证，否则该客户端来源将被视为不信任子网 noquery 不提供客户端的时间查询 notrap 不提供trap远端登陆,拒绝为匹配的主机提供模式 6 控制消息陷阱服务。 陷阱服务是 ntpdq 控制消息协议的子系统，用于远程事件日志记录程序 2、添加这两行： restrict -4 default kod notrap nomodify restrict -6 default kod notrap nomodify －4 与 －6 表示 IPV4与IPV6 3、将第一server 修改为阿里的ntp服务器 将其配置为上层ntp server ntp1.aliyun.com iburst server 1.centos.pool.ntp.org iburst server 2.centos.pool.ntp.org iburst server 3.centos.pool.ntp.org iburst 如果你是自己是上层ntp的话，则将上面的 server 注释掉 然后添加： server 127.127.1.0 fudge 127.127.1.0 stratum 10 4、重启ntp服务 service ntpd restart 5、查看端口 可以看出 ntp使用了123端口 协助为UDP [root@A机器 ~]# netstat -tuplan | grep 123 udp 0 0 192.168.15.173:123 0.0.0.0:* 1293/ntpd udp 0 0 127.0.0.1:123 0.0.0.0:* 1293/ntpd udp 0 0 0.0.0.0:123 0.0.0.0:* 1293/ntpd udp 0 0 ::1:123 :::* 1293/ntpd udp 0 0 fe80::250:56ff:febe:eb5:123 :::* 1293/ntpd udp 0 0 :::123 :::* 1293/ntpd 6、查看ntp到上层ntp服务器状态如何 [root@A机器 ~]# ntpstat synchronised to NTP server (120.25.115.20) at stratum 3 #stratum 3 层数在3 time correct to within 35 ms #花费的时间 polling server every 1024 s 客户端方式一：1、B机器 可以简单粗暴的使用 ntpdate 命令同步如 [root@B机器 ~]# ntpdate 192.168.15.173 11 Sep 13:39:47 ntpdate[30768]: adjust time server 192.168.15.173 offset 0.001383 sec 2、结合cron定时任务来同步(注意要使用root)： 0 */1 * * * /usr/sbin/ntpdate 192.168.15.173 方式二：1、配置 vi /etc/ntp.conf将第一个server设置为： server 192.168.15.173 2、重启ntpd服务后 时间过一会儿就会同步 [root@B机器 ~]# date -s &quot;20180302 11:00:00&quot; #设置个错误的时间 2018年 03月 02日 星期五 11:00:00 CST [root@B机器 ~]# systemctl restart ntpd [root@B机器 ~]# date 2018年 03月 02日 星期五 11:00:43 CST [root@B机器 ~]# date 2018年 03月 02日 星期五 11:00:49 CST [root@B机器 ~]# date 2019年 09月 11日 星期三 16:18:55 CST #同步成功 [root@B机器 ~]# date 2019年 09月 11日 星期三 16:18:56 CST [root@B机器 ~]# systemctl status ntpd ● ntpd.service - Network Time Service Loaded: loaded (/usr/lib/systemd/system/ntpd.service; disabled; vendor preset: disabled) Active: active (running) since 五 2018-03-02 11:00:41 CST; 1 years 6 months ago Process: 30993 ExecStart=/usr/sbin/ntpd -u ntp:ntp $OPTIONS (code=exited, status=0/SUCCESS) Main PID: 30994 (ntpd) CGroup: /system.slice/ntpd.service └─30994 /usr/sbin/ntpd -u ntp:ntp -g 3月 02 11:00:41 B机器 ntpd[30994]: Listening on routing socket on fd #22 for interface updates 3月 02 11:00:45 B机器 ntpd[30994]: Deferring DNS for 3.centos.pool.ntp.org 1 3月 02 11:00:45 B机器 ntpd[30994]: 0.0.0.0 c016 06 restart 3月 02 11:00:45 B机器 ntpd[30994]: 0.0.0.0 c012 02 freq_set kernel 0.000 PPM 3月 02 11:00:45 B机器 ntpd[30994]: 0.0.0.0 c011 01 freq_not_set 3月 02 11:00:45 B机器 ntpd[30996]: signal_no_reset: signal 17 had flags 4000000 3月 02 11:00:47 B机器 ntpd_intres[30996]: DNS 3.centos.pool.ntp.org -&gt; 193.228.143.22 3月 02 11:00:50 B机器 ntpd[30994]: 0.0.0.0 c61c 0c clock_step +48230285.315134 s 9月 11 16:18:55 B机器 ntpd[30994]: 0.0.0.0 c614 04 freq_mode 9月 11 16:18:57 B机器 ntpd[30994]: 0.0.0.0 c618 08 no_sys_peer 最后设置 ntp服务器开启自启 centos6.x: chkconfig ntpd oncentos7.x: [root@nessus ~]# systemctl list-unit-files | grep ntpd ntpd.service disabled [root@nessus ~]# systemctl enable ntpd Created symlink from /etc/systemd/system/multi-user.target.wants/ntpd.service to /usr/lib/systemd/system/ntpd.service. [root@nessus ~]# systemctl list-unit-files | grep ntpd ntpd.service enabled 上述教程完毕 #其他 生产遇到的问题：[root@ruiweb ~]# ntpdate ntp1.aliyun.com 11 Sep 16:29:44 ntpdate[27682]: the NTP socket is in use, exiting [root@ruiweb ~]# 说明NTP服务启动了 直接使用ntpdate是不行的。想要手工执行ntpdate，就要关闭ntpd服务 生产遇到的问题2：网络到阿里的时间服务器是通的 但网络时间同步不了 [root@ruidb ~]# ping ntp1.aliyun.com PING ntp1.aliyun.com (120.25.115.20) 56(84) bytes of data. 64 bytes from 120.25.115.20: icmp_seq=1 ttl=46 time=35.1 ms 64 bytes from 120.25.115.20: icmp_seq=2 ttl=46 time=35.0 ms 64 bytes from 120.25.115.20: icmp_seq=3 ttl=46 time=34.7 ms 64 bytes from 120.25.115.20: icmp_seq=4 ttl=46 time=34.6 ms ^C --- ntp1.aliyun.com ping statistics --- 4 packets transmitted, 4 received, 0% packet loss, time 3324ms rtt min/avg/max/mdev = 34.698/34.909/35.130/0.230 ms [root@ruidb ~]# ntpdate ntp1.aliyun.com 11 Sep 16:33:09 ntpdate[13663]: no server suitable for synchronization found [root@ruidb ~]# 通过 -d 参数来显示过程-d : 开启调试模式 [root@ruidb ~]# ntpdate -d ntp1.aliyun.com 11 Sep 16:36:32 ntpdate[13721]: ntpdate 4.2.6p5@1.2349-o Wed Dec 19 20:22:35 UTC 2018 (1) Looking for host ntp1.aliyun.com and service ntp host found : 120.25.115.20 transmit(120.25.115.20) transmit(120.25.115.20) transmit(120.25.115.20) transmit(120.25.115.20) transmit(120.25.115.20) 120.25.115.20: Server dropped: no data server 120.25.115.20, port 123 stratum 0, precision 0, leap 00, trust 000 refid [120.25.115.20], delay 0.00000, dispersion 64.00000 transmitted 4, in filter 4 reference time: 00000000.00000000 Mon, Jan 1 1900 8:05:43.000 originate timestamp: 00000000.00000000 Mon, Jan 1 1900 8:05:43.000 transmit timestamp: e1233093.43204c07 Wed, Sep 11 2019 16:36:35.262 filter delay: 0.00000 0.00000 0.00000 0.00000 0.00000 0.00000 0.00000 0.00000 filter offset: 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 delay 0.00000, dispersion 64.00000 offset 0.000000 11 Sep 16:36:36 ntpdate[13721]: no server suitable for synchronization found [root@ruidb ~]# ###后来发现是内部网络中限制123端口的数据包 这个是错误的请求过程 transmit(120.25.115.20) transmit(120.25.115.20) transmit(120.25.115.20) transmit(120.25.115.20) transmit(120.25.115.20)这个是正确的请求过程 transmit(120.25.115.20) receive(120.25.115.20) transmit(120.25.115.20) receive(120.25.115.20) transmit(120.25.115.20) receive(120.25.115.20) transmit(120.25.115.20) receive(120.25.115.20)transmit：发射receive：接收","link":"/2019/09/12/配置ntp服务器/"},{"title":"清理无用的mysql-bin文件","text":"最近硬盘用的特别快，发现是mysql-bin的占用多引起的。 1、 reset master;这个命令会清空mysql-bin文件。 [root@zabbix mysqldata]# mysql -uroot -p Enter password: Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 289502 Server version: 5.7.10-log MySQL Community Server (GPL) Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. mysql&gt; reset master; Query OK, 0 rows affected (2.76 sec) mysql&gt; 另外如果你的mysql服务器不需要做主从复制的话，建议通过修改my.cnf文件，来设置不生成这些文件，只要删除my.cnf中的下面一行就可以了。 log-bin=mysql-bin 如果你需要复制，最好控制一下这些日志文件保留的天数，可以通过下面的配置设定日志文件保留的天数： expire_logs_days = 7表示保留7天的日志，这样老日志会自动被清理掉。 配置文件修改后 要重启mysql服务才能生效！！！","link":"/2019/09/10/清理无用的mysql-bin文件/"},{"title":"查看mysql数据库大小","text":"1、进入information_schema 数据库（存放了其他的数据库的信息） use information_schema; #一定要先进这个库，才能查询信息 2、查询所有数据的大小： select concat(round(sum(data_length/1024/1024),2),'MB') as data from tables;3、查看指定数据库的大小：比如查看数据库test的大小 select concat(round(sum(data_length/1024/1024),2),'MB') as data from tables where table_schema='test';4、查看指定数据库的某个表的大小比如查看数据库test中 members 表的大小 select concat(round(sum(data_length/1024/1024),2),'MB') as data from tables where table_schema='test' and table_name='members';例子：mysql&gt; use information_schema; Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Database changed mysql&gt; select concat(round(sum(data_length/1024/1024),2),'MB') as data from tables; +-----------+ | data | +-----------+ | 658247MB | +-----------+ 1 row in set, 1 warning (2.93 sec)","link":"/2019/09/10/查看mysql数据库大小/"},{"title":"Centos7ssh使用证书登录加固","text":"对于没有固定IP，防火墙不好配置时，使用密码又容易给hacker暴力破解。针对这种情况，可以取消密码登录，进而使用证书认证来登录。加强了远程登录的安全性 环境 [root@aliyunrg .ssh]# cat /etc/redhat-release CentOS Linux release 7.6.1810 (Core) [root@aliyunrg .ssh]# 1、生成密钥： ssh-keygen -t rsa [root@aliyunrg ~]# ssh-keygen -t rsa Generating public/private rsa key pair. Enter file in which to save the key (/root/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /root/.ssh/id_rsa. Your public key has been saved in /root/.ssh/id_rsa.pub. The key fingerprint is: SHA256:onJuSYVI4CKNLgFphRWorCCglpoDnQJsuyj3NdF0VIE root@aliyunrg The key's randomart image is: +---[RSA 2048]----+ |+o=+. ..oo. | |*O. . E | |&amp;++o . o . | |@*+ . o . | |X+. ...S | |O.. ..o. | |.o.ooo . | | ++ | | .. | +----[SHA256]-----+ [root@aliyunrg ~]# 2、在CRT生成公秘钥 3、直接下一步 4、使用默认的RSA算法就行了 5、证书的密码 6、使用2048即可，当然 设置512到16384长度内的是允许的 7、生成中…… 8、openssh服务器 我们就选择中间的选项 9、不启动全局使用 10、将这个文件的内容复制到服务器上的/root/.ssh 下的 authorized_keysauthorized_keys 如果不存在就自己生成一个 注意权限是600 二 修改ssh配置vi /etc/ssh/sshd_config 去掉这个两个的注释 启动证书认证 RSAAuthentication yes PubkeyAuthentication yes这个字段设置为no，禁用密码登录 PasswordAuthentication yes 修改成 PasswordAuthentication no:wq 保存退出文件 重启SSH服务 systemctl restart sshd1、这时 你在新终端连 输入正确的密码 就会提示你使用秘钥登录 2、修改sshd客户端的连接配置 将PublicKey移动到第一个 去掉Passwd的勾 3、选中你秘钥保存的路径 按OK保存配置 4、再试尝试连接 输入一开始设置的“证书密码”第一次连接要输入 之后就不用了 5、查看日志 可以看出我们是使用证书登录 教程结束","link":"/2019/09/09/Centos7ssh使用证书登录加固/"},{"title":"zabbix监控系统日志权限问题","text":"明明配置了acl，但过了一阵子又没有权限，经排查，原来是系统日志轮替引起的。 在轮替的syslog配置文件添加acl的命令。[root@web ~]# cat /etc/logrotate.d/syslog /var/log/messages /var/log/secure /var/log/maillog /var/log/spooler /var/log/boot.log /var/log/cron { sharedscripts postrotate /bin/kill -HUP `cat /var/run/syslogd.pid 2&gt; /dev/null` 2&gt; /dev/null || true /bin/kill -HUP `cat /var/run/rsyslogd.pid 2&gt; /dev/null` 2&gt; /dev/null || true /usr/bin/setfacl -m u:zabbix:rx /var/log/secure /usr/bin/setfacl -m u:zabbix:rx /var/log/messages endscript } [root@web ~]# 之后就没有出现权限问题了。","link":"/2019/09/06/zabbix监控系统日志权限问题/"},{"title":"zabbix自动发现排除tmp与boot分区","text":"配置了一个分区低于10G的触发器 导致 现在要排除/boot与/tmp /var/tmp 1、配置－模板－Template OS Linux Active－自动发现－“Mounted filesystem discovery” {#FSNAME}是zabbix内置的本地宏 在客户端执行下列命令可以看到： [root@rui bin]#./zabbix_get -s 127.0.0.1 -k vfs.fs.discovery { &quot;data&quot;:[ { &quot;{#FSNAME}&quot;:&quot;\\/&quot;, &quot;{#FSTYPE}&quot;:&quot;rootfs&quot;}, { &quot;{#FSNAME}&quot;:&quot;\\/proc&quot;, &quot;{#FSTYPE}&quot;:&quot;proc&quot;}, { &quot;{#FSNAME}&quot;:&quot;\\/sys&quot;, &quot;{#FSTYPE}&quot;:&quot;sysfs&quot;}, { &quot;{#FSNAME}&quot;:&quot;\\/dev&quot;, &quot;{#FSTYPE}&quot;:&quot;devtmpfs&quot;}, { &quot;{#FSNAME}&quot;:&quot;\\/dev\\/pts&quot;, &quot;{#FSTYPE}&quot;:&quot;devpts&quot;}, { &quot;{#FSNAME}&quot;:&quot;\\/dev\\/shm&quot;, &quot;{#FSTYPE}&quot;:&quot;tmpfs&quot;}, { &quot;{#FSNAME}&quot;:&quot;\\/&quot;, &quot;{#FSTYPE}&quot;:&quot;ext4&quot;}, { &quot;{#FSNAME}&quot;:&quot;\\/proc\\/bus\\/usb&quot;, &quot;{#FSTYPE}&quot;:&quot;usbfs&quot;}, { &quot;{#FSNAME}&quot;:&quot;\\/boot&quot;, &quot;{#FSTYPE}&quot;:&quot;ext4&quot;}, { &quot;{#FSNAME}&quot;:&quot;\\/home&quot;, &quot;{#FSTYPE}&quot;:&quot;ext4&quot;}, { &quot;{#FSNAME}&quot;:&quot;\\/proc\\/sys\\/fs\\/binfmt_misc&quot;, &quot;{#FSTYPE}&quot;:&quot;binfmt_misc&quot;}, { &quot;{#FSNAME}&quot;:&quot;\\/var\\/lib\\/nfs\\/rpc_pipefs&quot;, &quot;{#FSTYPE}&quot;:&quot;rpc_pipefs&quot;}, { &quot;{#FSNAME}&quot;:&quot;\\/proc\\/fs\\/nfsd&quot;, &quot;{#FSTYPE}&quot;:&quot;nfsd&quot;}]} [root@rui bin]# 2、 @Eliminate useless file system 是我们要配置正则表达式：操作如下：管理－一般－（右边下拉）正则表达式配置一个“新的正则表达式” 3、说明：当取到的字段结果为boot或tmp时 就是返回“假” 4、要主机中查看监控项，会发现这个监控项己有提示：“已无法自动发现此项目了, 将删除于29d 5h 31m (在2019/05/01在15:28” 5、这时我想立刻清理这些无用的监控项 可以操作： 将“保留失去的资源期间(天)” 设置为“0”，将立即删除实体建议清理无用的监控项后，要设置回“30”天。","link":"/2019/09/06/zabbix自动发现排除tmp与boot分区/"},{"title":"zabbix监控JMX之Tomcat","text":"1、我们需要这4个文件：下载链接：https://share.weiyun.com/5PobRgc cmdline-jmxclient-0.10.3.jar：用来读取jmx信息 discovery_java_status.conf：客户端配置文件 java.txt：填写tomcat的相关端口 jmx_discovery.sh：自动发现的脚本 2、zabbix客户端配置Incloude路径 vi /usr/local/zabbix/etc/zabbix_agentd.conf 234 ### Option: Include 235 # You may include individual files or all files in a directory in the configuration file. 236 # Installing Zabbix will create include directory in /usr/local/etc, unless modified during the compile time. 237 # 238 # Mandatory: no 239 # Default: 240 # Include= 241 242 # Include=/usr/local/etc/zabbix_agentd.userparams.conf 243 Include=/usr/local/zabbix/etc/zabbix_agentd.conf.d/ 244 3、配置tomcat: tomcat版本为7.0.85在相应的tomcat实例中 启动参数下，添加这个： export CATALINA_OPTS=&quot;$CATALINA_OPTS -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=10052 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Djava.rmi.server.hostname=127.0.0.1&quot; 10052是jmx远程监控的端口配置完这个 记住重启下tomcat实例 4、将java.txt 、 jmx_discovery.sh放在这个目录下 [root@qhkjt-web scripts]# pwd /usr/local/zabbix/scripts [root@qhkjt-web scripts]# ll 总用量 8 -rwxr-xr-x 1 root root 42 8月 22 2018 java.txt -rwxr-xr-x 1 root root 1391 8月 23 2018 jmx_discovery.sh [root@qhkjt-web scripts]# 5、java.txt内容如下： qhkjt-web|10052|9090 qhkjt-pdf|10053|9091 第一列：自定义的名称 第二列：jmx远程监控的端口 第二列：tomcat实例端口 6、jmx_discovery.sh内容如下，其作用是为服务器传递json格式： #!/bin/bash #function:monitor tcp connect status from zabbix source /etc/bashrc &gt;/dev/null 2&gt;&amp;1 source /etc/profile &gt;/dev/null 2&gt;&amp;1 #定义发现函数，从java.txt读取文本 jmx_port_discovery () { catalina_port=($(cat /usr/local/zabbix/scripts/java.txt|cut -d &quot;|&quot; -f3)) jmx_port=($(cat /usr/local/zabbix/scripts/java.txt|cut -d &quot;|&quot; -f2)) Tomcat_Name=($(cat /usr/local/zabbix/scripts/java.txt|cut -d &quot;|&quot; -f1)) length=${#jmx_port[@]} printf &quot;{\\n&quot; printf '\\t'&quot;\\&quot;data\\&quot;:[&quot; for ((i=0;i&lt;$length;i++)) do printf &quot;\\n\\t\\t{&quot; printf &quot;\\t\\&quot;{#JMX_PORT}\\&quot;:\\&quot;${jmx_port[$i]}\\&quot;,\\n&quot; printf &quot;\\t\\t\\t\\&quot;{#JAVA_NAME}\\&quot;:\\&quot;${Tomcat_Name[$i]}\\&quot;,\\n&quot; printf &quot;\\t\\t\\t\\&quot;{#CATALINA_PORT}\\&quot;:\\&quot;${catalina_port[$i]}\\&quot;}\\n&quot; if [ $i -lt $[$length-1] ];then printf &quot;,&quot; fi done printf &quot;\\n\\t]\\n&quot; printf &quot;}\\n&quot; } case &quot;$1&quot; in jmx_port_discovery) jmx_port_discovery ;; jvmper) #这个计算堆内存的百分比 userd=`/usr/bin/java -jar /usr/local/zabbix/lib/cmdline-jmxclient-0.10.3.jar - 127.0.0.1:$2 java.lang:type=Memory HeapMemoryUsage 2&gt;&amp;1|grep used |cut -d &quot; &quot; -f2` total=`/usr/bin/java -jar /usr/local/zabbix/lib/cmdline-jmxclient-0.10.3.jar - 127.0.0.1:$2 java.lang:type=Memory HeapMemoryUsage 2&gt;&amp;1|grep max |cut -d &quot; &quot; -f2` awk -v userd=&quot;$userd&quot; -v total=&quot;$total&quot; 'BEGIN{printf &quot;%0.2f\\n&quot;,userd/total*100}' ;; *) echo &quot;Usage:$0 {jmx_port_discovery|jvmper}&quot; ;; esac 7、将cmdline-jmxclient-0.10.3.jar放在这个路径，因为脚本中写了绝对路径 [root@qhkjt-web lib]# pwd /usr/local/zabbix/lib [root@qhkjt-web lib]# ll 总用量 24 -rw-r--r-- 1 root root 140 8月 21 2018 1 -rw-r--r-- 1 root root 20124 8月 21 2018 cmdline-jmxclient-0.10.3.jar [root@qhkjt-web lib]# 8、将discovery_java_status.conf放在这个目录下 [root@qhkjt-web zabbix_agentd.conf.d]# pwd /usr/local/zabbix/etc/zabbix_agentd.conf.d [root@qhkjt-web zabbix_agentd.conf.d]# ll 总用量 4 -rw-r--r-- 1 root root 2491 8月 23 2018 discovery_java_status.conf [root@qhkjt-web zabbix_agentd.conf.d]# 9、discovery_java_status.conf内容如下： 格式：UserParameter=键值，脚本 #发现项目类别 UserParameter=java.jmx.discovery,/usr/local/zabbix/scripts/jmx_discovery.sh jmx_port_discovery #当前线程数 UserParameter=java.ThreadCounts[*],/usr/bin/java -jar /usr/local/zabbix/lib/cmdline-jmxclient-0.10.3.jar - 127.0.0.1:$1 java.lang:type=Threading ThreadCount 2&gt;&amp;1|cut -d &quot; &quot; -f6 #线程数峰值 UserParameter=java.PeakThreadCount[*],/usr/bin/java -jar /usr/local/zabbix/lib/cmdline-jmxclient-0.10.3.jar - 127.0.0.1:$1 java.lang:type=Threading PeakThreadCount 2&gt;&amp;1|cut -d &quot; &quot; -f6 #总纯程数 UserParameter=java.TotalStartedThreadCount[*],/usr/bin/java -jar /usr/local/zabbix/lib/cmdline-jmxclient-0.10.3.jar - 127.0.0.1:$1 java.lang:type=Threading TotalStartedThreadCount 2&gt;&amp;1| cut -d &quot; &quot; -f6 #实例当前线程数 UserParameter=java.Catalina.currentThreadCount[*],/usr/bin/java -jar /usr/local/zabbix/lib/cmdline-jmxclient-0.10.3.jar - 127.0.0.1:$1 Catalina:name=\\&quot;http-apr-$2\\&quot;,type=ThreadPool currentThreadCount 2&gt;&amp;1| cut -d &quot; &quot; -f6 #实例当前连接数 UserParameter=java.Catalina.connectionCount[*],/usr/bin/java -jar /usr/local/zabbix/lib/cmdline-jmxclient-0.10.3.jar - 127.0.0.1:$1 Catalina:name=\\&quot;http-apr-$2\\&quot;,type=ThreadPool connectionCount 2&gt;&amp;1| cut -d &quot; &quot; -f6 #实例最大线程数 UserParameter=java.Catalina.maxThreads[*],/usr/bin/java -jar /usr/local/zabbix/lib/cmdline-jmxclient-0.10.3.jar - 127.0.0.1:$1 Catalina:name=\\&quot;http-apr-$2\\&quot;,type=ThreadPool maxThreads 2&gt;&amp;1| cut -d &quot; &quot; -f6 #当前繁忙线程数 UserParameter=java.Catalina.currentThreadsBusy[*],/usr/bin/java -jar /usr/local/zabbix/lib/cmdline-jmxclient-0.10.3.jar - 127.0.0.1:$1 Catalina:name=\\&quot;http-apr-$2\\&quot;,type=ThreadPool currentThreadsBusy 2&gt;&amp;1| cut -d &quot; &quot; -f6 #堆内存使用量 UserParameter=java.HeapMemoryUsage.used[*],/usr/bin/java -jar /usr/local/zabbix/lib/cmdline-jmxclient-0.10.3.jar - 127.0.0.1:$1 java.lang:type=Memory HeapMemoryUsage 2&gt;&amp;1|grep used |cut -d &quot; &quot; -f2 #堆内存最大 UserParameter=java.HeapMemoryUsage.max[*],/usr/bin/java -jar /usr/local/zabbix/lib/cmdline-jmxclient-0.10.3.jar - 127.0.0.1:$1 java.lang:type=Memory HeapMemoryUsage 2&gt;&amp;1|grep max |cut -d &quot; &quot; -f2 #堆内存百分比 UserParameter=java.HeapMemoryUsage.per[*],/usr/local/zabbix/scripts/jmx_discovery.sh $1 $2 #当前会话数 UserParameter=java.Catalina.activeSessions[*],/usr/bin/java -jar /usr/local/zabbix/lib/cmdline-jmxclient-0.10.3.jar - 127.0.0.1:$1 Catalina:type=Manager,context=/egrantweb,host=localhost activeSessions 2&gt;&amp;1| cut -d &quot; &quot; -f6 10、配置完discovery_java_status.conf 记得重启下客户端 pkill -9 zabbix /usr/local/zabbix/sbin/zabbix_agentd 11、测试客户端： [root@qhkjt-web bin]# /usr/local/zabbix/bin/zabbix_get -s 127.0.0.1 -p 10050 -k java.jmx.discovery { &quot;data&quot;:[ { &quot;{#JMX_PORT}&quot;:&quot;10052&quot;, &quot;{#JAVA_NAME}&quot;:&quot;qhkjt-web&quot;, &quot;{#CATALINA_PORT}&quot;:&quot;9090&quot;} , { &quot;{#JMX_PORT}&quot;:&quot;10053&quot;, &quot;{#JAVA_NAME}&quot;:&quot;qhkjt-pdf&quot;, &quot;{#CATALINA_PORT}&quot;:&quot;9091&quot;} ] } [root@qhkjt-web bin]# 测试成功 二、服务端：1、创建模板 2、配置自动发现规则 类型：主动式键值：java.jmx.discovery 3、由于是自动发现 所以要在“监控项原型”去创建监控项 名称：自定义类型：主动式（注意） 键值：java.ThreadCounts[{#JMX_PORT}] 应用集：JMX(自定义，便于查看) 4、在监控主机添加这个模板 5、查看有没有数据过来 己有数据过来 6、继续添加其他的“监控原型” 7、查看监控的数据： 三、配置触发器1、创建触发器 注意：要在“自动发现规则”下的“触发器类型”下去创建 2、创建触发器原型 3、创建一个堆内丰百分比大于75%时就触发报警的触发器 4、“选择原型” 5、选中对应的监控原型 6、使用avg()函数统计5分钟内的平均值，如果平均值大于75 就触发报警 7、定义为：严重 配置成功。","link":"/2019/09/05/zabbix监控JMX之Tomcat/"},{"title":"zabbix3.0源码安装","text":"环境：zabbix3.0安装注意：1、PHP要5.4版本以上 2、防火墙关闭3、selinux关闭 #一定要关，不然会给坑死 zabbix-server 〈－－－－－〉mysql server我是zabbix 与 mysql 分开。用两台机器 [root@ruizabbix ~]# cat /etc/redhat-release CentOS release 6.9 (Final) [root@ruizabbix ~]# uname -a Linux ruizabbix 2.6.32-696.30.1.el6.x86_64 #1 SMP Tue May 22 03:28:18 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux [root@ruizabbix ~]# 一、zabbix机器配置1、添加epel源 [root@ruizabbix ~]# rpm -Uvh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm Retrieving http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm warning: /var/tmp/rpm-tmp.DHF5fS: Header V3 RSA/SHA256 Signature, key ID 0608b895: NOKEY Preparing... ########################################### [100%] 1:epel-release ########################################### [100%] #epel源是fedore社区开发的，为红帽社区提供高质量的rpm包，具有可靠性、高效性 2、添加remi源 [root@ruizabbix ~]# rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm Retrieving http://rpms.famillecollet.com/enterprise/remi-release-6.rpm warning: /var/tmp/rpm-tmp.fWiOVe: Header V4 DSA/SHA1 Signature, key ID 00f97f56: NOKEY Preparing... ########################################### [100%] 1:remi-release ########################################### [100%] #remi源：Remi repository 是包含最新版本 PHP 和 MySQL 包的 Linux 源，由 Remi 提供维护。有个这个源之后，使用 YUM 安装或更新 PHP、MySQL、phpMyAdmin 等服务器相关程序的时候就非常方便了。这是最常用的yum仓库之一。 3、安装php yum --enablerepo=remi,remi-php55 install php-fpm php-common php-devel php-mysqlnd php-mbstring php-mcrypt httpd php php-mysql php-gd php-xml php-mbstring php-ldap php-pear php-xmlrpc php-bcmath mysql-connector-odbc mysql-devel libdbi-dbd-mysql net-snmp-devel curl-devel mod_ssl mod_perl mod_auth_mysql net-snmp 4、安装插件 [root@ruizabbix ~]# yum --enablerepo=remi,remi-php55 install libxml2-devel net-snmp-devel libcurl-devel 5、查看php版本 [root@ruizabbix ~]# php -v PHP 5.5.38 (cli) (built: Mar 1 2018 11:12:35) Copyright (c) 1997-2015 The PHP Group Zend Engine v2.5.0, Copyright (c) 1998-2015 Zend Technologies [root@ruizabbix ~]# 6、官网上下载包 并上传zabbix-3.0.21.tar.gz [root@ruizabbix ~]# ll 总用量 15336 -rw-------. 1 root root 1383 6月 2 18:54 anaconda-ks.cfg -rw-r--r--. 1 root root 27338 6月 2 18:54 install.log -rw-r--r--. 1 root root 7572 6月 2 18:53 install.log.syslog -rw-r--r--. 1 root root 15658030 9月 13 10:19 zabbix-3.0.21.tar.gz [root@ruizabbix ~]# 7、安装编译工具 yum install gcc-c++ 8、解压包并进入目录编译安装 ./configure --prefix=/usr/local/zabbix-server --enable-server --with-mysql --with-net-snmp --with-libcurl --with-libxml2 make install 二、mysql机器配置教程引用：http://wangzhirui.com/2019/09/03/CentOS6-9%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85mysql5-7-10/ 1、在mysql机器上：创建zabbix库 mysql&gt; create database zabbix default charset utf8; Query OK, 1 row affected (0.05 sec) mysql&gt; grant all on zabbix.* to zabbix@&quot;%&quot; identified by 'zabbix'; Query OK, 0 rows affected, 1 warning (0.03 sec) mysql&gt; flush privileges; Query OK, 0 rows affected (0.02 sec) 2、上传zabbix-3.0.21.tar.gz # 主要是导入数据文件 要包中的sql文件 [root@ruimysql database]# cd /root/zabbix-3.0.21/database/mysql/ [root@ruimysql mysql]# ll 总用量 3016 -rw-r--r--. 1 1001 1001 994571 8月 27 16:24 data.sql -rw-r--r--. 1 1001 1001 1978341 8月 27 16:24 images.sql -rw-r--r--. 1 1001 1001 113197 8月 27 16:24 schema.sql 3、依次执行zabbix，导入顺序不能错！ /usr/local/mysql/bin/mysql -uzabbix -p zabbix &lt; schema.sql /usr/local/mysql/bin/mysql -uzabbix -p zabbix &lt; images.sql /usr/local/mysql/bin/mysql -uzabbix -p zabbix &lt; data.sql 4、在zabbix机器中： [root@ruizabbix etc]# vi /usr/local/zabbix-server/etc/zabbix_server.conf [root@ruizabbix etc]# cat /usr/local/zabbix-server/etc/zabbix_server.conf | grep DB | grep -v ^# DBHost=192.168.56.15 #这是我mysql机器的IP DBName=zabbix DBUser=zabbix DBPassword=zabbix DBPort=3306 [root@ruizabbix etc]# 启动服务： [root@ruizabbix sbin]# pwd /usr/local/zabbix-server/sbin [root@ruizabbix sbin]# ./zabbix_server [root@ruizabbix sbin]# 5、复制zabbix php目录 到apache html下 [root@ruizabbix php]# mkdir -p /var/www/html/zabbix/ [root@ruizabbix php]# pwd /root/zabbix-3.0.21/frontends/php [root@ruizabbix php]# cp -rf /root/zabbix-3.0.21/frontends/php/* /var/www/html/zabbix/ [root@ruizabbix php]# chown -R apache.apache /var/www/html/zabbix/* 6、配置php并启动httpd： vim /etc/php.ini date.timezone = Asia/Shanghai post_max_size = 16M max_execution_time = 300 max_input_time = 300 7、启动apache service httpd start 8、通过：http:IP/zabbix访问 并进行zabbix安装 #图形化配置时，如果遇到mysql权限问题时，请检查selinux 三、安装客户端1、同一个zabbix包，但编译参数不同 ./configure --prefix=/usr/local/zabbix-agent --enable-agent make install 2、做成系统服务： [root@ruimysql tru64]# pwd /root/zabbix-3.0.21/misc/init.d/tru64 [root@ruimysql tru64]# cp /root/zabbix-3.0.21/misc/init.d/tru64/zabbix_agentd /etc/init.d/ [root@ruimysql tru64]# chmod 775 /etc/init.d/zabbix_agentd [root@ruimysql tru64]# ln -sv /usr/local/zabbix-agent/sbin/* /usr/local/sbin/ &quot;/usr/local/sbin/zabbix_agentd&quot; -&gt; &quot;/usr/local/zabbix-agent/sbin/zabbix_agentd&quot; [root@ruimysql tru64]# ln -sv /usr/local/zabbix-agent/bin/* /usr/local/sbin/ &quot;/usr/local/sbin/zabbix_get&quot; -&gt; &quot;/usr/local/zabbix-agent/bin/zabbix_get&quot; &quot;/usr/local/sbin/zabbix_sender&quot; -&gt; &quot;/usr/local/zabbix-agent/bin/zabbix_sender&quot; 3、修改相关配置： [root@ruimysql init.d]# cat /usr/local/zabbix-agent/etc/zabbix_agentd.conf | egrep -v '^#|^$' LogFile=/tmp/zabbix_agentd.log Server=192.168.56.14 #servce机器IP ListenPort=10050 ServerActive=127.0.0.1 Hostname=ruimysql15 4、启动用agent服务： [root@ruizabbix sbin]# pwd /usr/local/zabbix-agent/sbin [root@ruizabbix sbin]# ./zabbix_agentd [root@ruizabbix sbin]# netstat -tuplan | grep 10050 tcp 0 0 0.0.0.0:10050 0.0.0.0:* LISTEN 1803/./zabbix_agent","link":"/2019/09/04/zabbix3-0源码安装/"},{"title":"关于Redis存在远程命令执行漏洞的安全公告","text":"安全公告编号:CNTA-2019-0024 2019年7月10日，国家信息安全漏洞共享平台（CNVD）收录了Redis远程命令执行漏洞（CNVD-2019-21763）。攻击者利用该漏洞，可在未授权访问Redis的情况下执行任意代码，获取目标服务器权限。目前，漏洞利用原理已公开，官方补丁尚未发布。 一、漏洞情况分析 Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。作为一个高性能的key-value数据库，Redis在部分场景下对关系数据库起到很好的补充作用。 2019年7月7日，LC/BC的成员Pavel Toporkov在WCTF2019 Final分享会上介绍了Redis新版本的远程命令执行漏洞的利用方式。由于在Reids 4.x及以上版本中新增了模块功能，攻击者可通过外部拓展，在Redis中实现一个新的Redis命令。攻击者可以利用该功能引入模块，在未授权访问的情况下使被攻击服务器加载恶意.so 文件，从而实现远程代码执行。 CNVD对该漏洞的综合评级为“高危”。 二、漏洞影响范围 漏洞影响的产品版本包括： Redis 2.x，3.x，4.x，5.x 三、漏洞处置建议 目前，Redis官方暂未发布补丁，临时解决方案如下： 1、禁止外部访问Redis 服务端口； 2、禁止使用root权限启动Redis服务； 3、配置安全组，限制可连接Redis服务器的IP。 建议使用Redis数据库的信息系统运营者进行自查，发现存在漏洞后，按照临时解决方案及时进行修复。 转载链接： https://paper.seebug.org/975/https://www.cnvd.org.cn/webinfo/show/5115","link":"/2019/09/03/关于Redis存在远程命令执行漏洞的安全公告/"},{"title":"Centos6安装Nextcloud10","text":"新建用户： useradd nextcloud -s /sbin/nologin准备工作 yum install -y telnet wget lrzsz -y service iptables stop #防火墙记得关先 1、安装nginx1.1安装openssl（可选） 1.2安装nginx1.2.1上传包到/root目录下 nginx-1.6.1.tar.gz nginx-sticky-module-1.1.tar.gz openssl-1.0.2l.tar.gz#解压包 tar -zxvf nginx-1.6.1.tar.gz tar -zxvf nginx-sticky-module-1.1.tar.gz tar -zxvf openssl-1.0.2l.tar.gz1.2.2安装依赖 yum install -y zlib zlib-devel pcre gcc pcre-devel 1.2.3编译安装 cd nginx-1.6.1 ./configure --prefix=/usr/local/nginx --with-openssl=/root/openssl-1.0.2l/ --with-http_ssl_module --add-module=/root/nginx-sticky-module-1.1 make &amp;&amp; make install1.2.4修改nginx.conf文件 user nextcloud; #user nobody; worker_processes 1; #error_log logs/error.log; #error_log logs/error.log notice; #error_log logs/error.log info; #pid logs/nginx.pid; events { worker_connections 1024; } http { include mime.types; include gzip.conf; default_type application/octet-stream; sendfile on; #client_max_body_size 20; #client_body_timeout 500m; proxy_connect_timeout 60s; proxy_read_timeout 3m; proxy_send_timeout 3m; keepalive_timeout 30; reset_timedout_connection on; send_timeout 60; fastcgi_buffers 8 128k; server_tokens off; tcp_nopush on; tcp_nodelay on; upstream php-handler { server 127.0.0.1:9000; } include nextcloud.conf; } 1.2.5添加gzip.confvi gzip.conf gzip on; gzip_http_version 1.1; gzip_disable &quot;MSIE [1-6]\\.&quot;; gzip_disable &quot;Mozilla/4&quot;; gzip_comp_level 5;#压缩级别，1压缩比最小处理速度最快，9压缩比最大但处理最慢，同时也最消耗CPU,一般设置为3 gzip_proxied any; gzip_vary on; gzip_buffers 4 16k; gzip_min_length 1024; gzip_types text/plain text/xml text/css application/xml application/xhtml+xml application/rss+xml application/atom_xml application/javascript application/x-javascript;1.2.6添加nextcloud配置文件 server { listen 80; server_name cloud.rui.cn; server_name 192.168.15.173; #return 301 https://$server_name$request_uri; #server {listen 443 ssl;server_name cloud.nextcloud.com; #ssl_certificate /usr/local/data/nginx/conf/nextcloud.crt; #ssl_certificate_key /usr/local/data/nginx/conf/nextcloud.key; #添加如下header主要为了安全 #add_header Strict-Transport-Security &quot;max-age=15768000;includeSubDomains; preload;&quot;;add_header X-Content-Type-Options nosniff;add_header X-Frame-Options &quot;SAMEORIGIN&quot;;add_header X-XSS-Protection &quot;1; mode=block&quot;;add_header X-Robots-Tag none;add_header X-Download-Options noopen;add_header X-Permitted-Cross-Domain-Policies none; #nextcloud代码目录 root /data/nextcloud/; location = /robots.txt { allow all; log_not_found off; access_log off; } #为了支持user_webfinger app rewrite ^/.well-known/host-meta /public.php?service=host-meta last; rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last; #这儿是为了支持日历和联系人，建议加上 location = /.well-known/carddav { return 301 $scheme://$host/remote.php/dav; } location = /.well-known/caldav { return 301 $scheme://$host/remote.php/dav; } #设置上传文件的最大大小，php也得修改 client_max_body_size 512M; fastcgi_buffers 64 4K; # Disable gzip to avoid the removal of the ETag headergzip off; error_page 403 /core/templates/403.php; error_page 404 /core/templates/404.php; #重要的：将所有请求转发到index.php上 location / { rewrite ^ /index.php$uri; } #安全设置，禁止访问部分敏感内容 location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ { deny all;} location ~ ^/(?:\\.|autotest|occ|issue|indie|db_|console) { deny all; } location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\\.php(?:$|/) { include fastcgi_params; fastcgi_split_path_info ^(.+\\.php)(/.*)$; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param PATH_INFO $fastcgi_path_info; #fastcgi_param HTTPS on; #Avoid sending the security headers twicefastcgi_param modHeadersAvailable true; fastcgi_param front_controller_active true; fastcgi_pass php-handler; fastcgi_intercept_errors on; #fastcgi_request_buffering off; } #安全设置，禁止访问部分敏感内容 location ~ ^/(?:updater|ocs-provider)(?:$|/) { try_files $uri/ =404;index index.php; } # 添加js和css文件的缓存控制头 location ~* \\.(?:css|js)$ { try_files $uri /index.php$uri$is_args$args; add_header Cache-Control &quot;public, max-age=7200&quot;; add_header Strict-Transport-Security &quot;max-age=15768000; includeSubDomains; preload; &quot;; add_header X-Content-Type-Options nosniff; add_header X-Frame-Options &quot;SAMEORIGIN&quot;; add_header X-XSS-Protection &quot;1; mode=block&quot;; add_header X-Robots-Tag none; add_header X-Download-Options noopen; add_header X-Permitted-Cross-Domain-Policies none; access_log off; } location ~* \\.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg)$ { try_files $uri /index.php$uri$is_args$args; access_log off; } }1.3配置php yum install http://rpms.famillecollet.com/enterprise/remi-release-6.rpm -y yum --enablerepo=remi-php56 install php php-fpm php-mysql php-gd php-xml php-redis php-libs php-devel php-zlib php-mbstring -y1.3.2修改配置文件， vim /etc/php-fpm.conf 在[global] 上面插入 添加 user = nextcloud group = nextcloud listen = 127.0.0.1:9000 env[HOSTNAME] = $HOSTNAME env[PATH] = /usr/local/bin:/usr/bin:/bin env[TMP] = /tmp env[TMPDIR] = /tmp env[TEMP] = /tmp这里先不启动nginx与php-fpm 2、安装mysql2.1 安装教程引用：http://wangzhirui.com/2019/09/03/CentOS6-9%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85mysql5-7-10/ 2.2添加nextcloud用户 与 库nextcloud_db CREATE DATABASE nextcloud_db;GRANT ALL ON nextcloud_db.* TO 'nextcloud'@'%' IDENTIFIED BY 'nextcloud'; FLUSH PRIVILEGES;3、安装nextcloud3.1.1配置hosts 192.168.15.173 iriscloud 192.168.15.173 cloud.rui.cn3.2安装程序3.2.1下载 wget https://download.nextcloud.com/server/releases/nextcloud-10.0.2.zip --no-check-certificate unzip nextcloud-10.0.2.zip3.2.2移动到数据目录下 mkdir -p /data mv nextcloud /data/3.2.3给nextcloud权限 mkdir -p /data/clouddisk #这个用于上传文件的保存 chown -R nextcloud:nextcloud /data4.1启动nginx/usr/local/nginx/sbin/nginx4.2配置下php-fpm vi /etc/php.inipdo_mysql.default_socket= 修改成 pdo_mysql.default_socket= /tmp/mysql.sock如果不配置php.ini里面的mysqli.default_socket和pdo_mysql.default_socket，那么他们的默认值是/tmp/mysql.sock，如果与/etc/my.cnf里面的不一致，那么会导致php无法正确连接mysql 去掉这行的释 always_populate_raw_post_data = -1官方在PHP5.6就把$HTTP_RAW_POST_DATA废弃了，而且在PHP7中把它移除了。因为这个参数影响性能，所以要废弃掉，官方建议用php://input来代替。 service php-fpm start4.3 要给这个目录权限 不然登录不了 chmod -R 777 /var/lib/php/session/5.1打开域名配置数据库与管理员密码即可 #密码要注意复杂性 客户端https://nextcloud.com/install/# 配置redis 增强性能使用Redis做内存缓存可以有效提升程序运行速度。 curl -O http://download.redis.io/releases/redis-3.2.8.tar.gz解压包 tar -zxvf redis-3.2.8.tar.gz cd redis-3.2.8/deps/make geohash-int hiredis jemalloc linenoise lua编译安装 cd .. make &amp;&amp; make installcd utils/ ./install_server.sh过程如下 [root@iriscloud utils]# ./install_server.sh Welcome to the redis service installer This script will help you easily set up a running redis server Please select the redis port for this instance: [6379] Selecting default: 6379 Please select the redis config file name [/etc/redis/6379.conf] Selected default - /etc/redis/6379.conf Please select the redis log file name [/var/log/redis_6379.log] Selected default - /var/log/redis_6379.log Please select the data directory for this instance [/var/lib/redis/6379] Selected default - /var/lib/redis/6379 Please select the redis executable path [/usr/local/bin/redis-server] Selected config: Port : 6379 Config file : /etc/redis/6379.conf Log file : /var/log/redis_6379.log Data dir : /var/lib/redis/6379 Executable : /usr/local/bin/redis-server Cli Executable : /usr/local/bin/redis-cli Is this ok? Then press ENTER to go on or Ctrl-C to abort. Copied /tmp/6379.conf =&gt; /etc/init.d/redis_6379 Installing service... Successfully added to chkconfig! Successfully added to runlevels 345! Starting Redis server... Installation successful! [root@iriscloud utils]# 修改配置 vi /etc/redis/6379.conf 修改成如下两行 bind 127.0.0.1 requirepass foobaredrui启动 redis-server /etc/redis/6379.conf 配置nextcloud vi /data/nextcloud/config/config.php 在括号内添加： 'memcache.local' =&gt; '\\OC\\Memcache\\Redis', 'redis' =&gt; array( 'host' =&gt; '127.0.0.1', 'port' =&gt; 6379, 'password' =&gt; 'foobaredrui', ),执行如果出现： [root@iriscloud config]# /usr/bin/php /data/nextcloud/cron.php The posix extensions are required - see http://php.net/manual/en/book.posix.php解决方法： yum install -y php56-php-process.x86_64 #注意看你PHP的版本是多少的，别乱安装修改php配置文件，添加 posix.so vi /etc/php.ini 在文件末尾添加： extension= /opt/remi/php56/root/usr/lib64/php/modules/posix.so重启下php-fpm /etc/init.d/php-fpm restart下列命令 如果查询有结果 说明成功了。再次执行cron.php就没有问题了。 php -m | grep posix配置定时任务，由于cron.php只允许运行程序的用户来执行 而我是使用nextcloud用户运行的程序 所以我这样写我是在root用户下配置的定时任务 [root@iriscloud modules]# crontab -l */15 * * * * su -s /bin/bash nextcloud -c -l &quot;/usr/bin/php /data/nextcloud/cron.php&quot; &gt;/dev/null [root@iriscloud modules]# 其他：安装 LDAP user and group backendThe library ldap is not available. 1、解决方法： yum install -y php56-php-ldap.x86_642、找到ldap.so 的路径 find / -name ldap.so3、修改php.ini 在文件最后添加如下一行： extension= /opt/remi/php56/root/usr/lib64/php/modules/ldap.so4、重启下php-fpm /etc/init.d/php-fpm restart","link":"/2019/09/03/Centos6安装Nextcloud10/"},{"title":"CentOS6.9源码安装mysql5.7.10","text":"1、 源码安装： 环境：centos6.9 软件：mysql-5.7.10-linux-glibc2.5-x86_64.tar.gz2、先更新下系统 yum update -y 3、 新建用户： [root@ruimysql yum.repos.d]# groupadd -g 1000 mysql [root@ruimysql yum.repos.d]# useradd -u 1000 -g mysql mysql [root@ruimysql yum.repos.d]# echo mysql | passwd mysql --stdin 4、 更改用户 mysql 的密码 。 passwd： 所有的身份验证令牌已经成功更新。 [root@ruimysql yum.repos.d]# 5、 创建mysql的数据目录 [root@ruimysql ~]# mkdir /mysqldata [root@ruimysql ~]# chown -R mysql:mysql /mysqldata [root@ruimysql ~]# chmod -R 775 /mysqldata [root@ruimysql ~]# 6、 下载包到系统：使用的版本为： mysql-5.7.10-linux-glibc2.5-x86_64.tar.gz 下载链接：https://share.weiyun.com/51NMDls 7、 解压： tar -zxvf mysql-5.7.10-linux-glibc2.5-x86_64.tar.gz 8、 将解压出来的包，复制/移动 到/usr/local 下 并改名为：mysql mv mysql-5.7.10-linux-glibc2.5-x86_64 /usr/local/mysql [root@ruimysql ~]# cd /usr/local/mysql/ [root@ruimysql mysql]# ll 总用量 160 drwxr-xr-x. 2 7161 wheel 4096 11月 30 2015 bin -rw-r--r--. 1 7161 wheel 17987 11月 30 2015 COPYING drwxr-xr-x. 2 7161 wheel 4096 11月 30 2015 docs drwxr-xr-x. 3 7161 wheel 4096 11月 30 2015 include -rw-r--r--. 1 7161 wheel 108090 11月 30 2015 INSTALL-BINARY drwxr-xr-x. 5 7161 wheel 4096 11月 30 2015 lib drwxr-xr-x. 4 7161 wheel 4096 11月 30 2015 man -rw-r--r--. 1 7161 wheel 2478 11月 30 2015 README drwxr-xr-x. 28 7161 wheel 4096 11月 30 2015 share drwxr-xr-x. 2 7161 wheel 4096 11月 30 2015 support-files [root@ruimysql mysql]# 9、 进入程序bin下 [root@ruimysql bin]# cd /usr/local/mysql/bin/ [root@ruimysql bin]# ./mysqld --initialize-insecure --user=mysql --basedir=/usr/local/mysql --datadir=/mysqldata/ # --initialize-insecure 生成密码 10、 配置环境变量 [root@ruimysql bin]# vi /etc/profile 11、 在文件末尾加上： export PATH=$PATH:/usr/local/mysql/bin :wq保存退出 #使其立即生效 source /etc/profile 12、 将mysql做成系统服务 cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld 13、 设置 配置文件 /etc/my.cnf [mysqld] basedir = /usr/local/mysql datadir=/mysqldata socket=/tmp/mysql.sock user=mysql # Disabling symbolic-links is recommended to prevent assorted security risks symbolic-links=0 #端口 port = 3306 #表区分大小写 lower_case_table_names=1 character_set_server=utf8 init_connect='SET NAMES utf8' #server_id=100 #log-bin= /mysqldata/mysql-bin #不记录mysql的更新 #binlog-ignore-db = mysql #日志保留7天 expire_logs_days = 7 #最大连接数 max_connections=1500 [mysqld_safe] log-error=/var/log/mysqld.log pid-file=/tmp/mysqld.pid #记录查询慢的sql语句 long_query_time = 1 slow_query_log = ON slow_query_log_file = /mysqldata/tmp/slow-query.log sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES [client] default-character-set=utf8 14、 启动服务： [root@ruimysql ~]# service mysqld start Starting MySQL. [确定] [root@ruimysql ~]# 15、登录mysql [root@ruimysql ~]#mysql -uroot #由于密码 直接进了。 [root@ruimysql ~]#mysql -uroot Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 4 Server version: 5.7.10 MySQL Community Server (GPL) Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. mysql&gt; 修改root空密码 设置密码为123456 且允许root远程登录 mysql&gt; use mysql mysql&gt; update user set authentication_string=password('123456'), password_expired='N' where user=&quot;root&quot;; Query OK, 1 row affected, 1 warning (0.01 sec) Rows matched: 1 Changed: 1 Warnings: 1 mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'root'@'%'IDENTIFIED BY '123456' WITH GRANT OPTION; Query OK, 0 rows affected, 1 warning (0.00 sec) mysql&gt; FLUSH PRIVILEGES; Query OK, 0 rows affected (0.01 sec) 到此 mysql就安装完成了。","link":"/2019/09/03/CentOS6-9源码安装mysql5-7-10/"},{"title":"centos5.X yum源地址变更","text":"下载了阿里和163的centos5.x的源，yum makecache的时候报错 http://mirrors.aliyun.com/centos/5/addons/x86_64/repodata/repomd.xml: [Errno 14] HTTP Error 404: Not Found Trying other mirror. http://mirrors.aliyuncs.com/centos/5/addons/x86_64/repodata/repomd.xml: [Errno 4] IOError: &lt;urlopen error (111, '\\xe6\\x8b\\x92\\xe7\\xbb\\x9d\\xe8\\xbf\\x9e\\xe6\\x8e\\xa5')&gt; Trying other mirror. 将之前的CentOS-Base.repo文件里的内容换成如下内容 vi /etc/yum.repos.d/CentOS-Base.repo # CentOS-Base.repo # # The mirror system uses the connecting IP address of the client and the # update status of each mirror to pick mirrors that are updated to and # geographically close to the client. You should use this for CentOS updates # unless you are manually picking other mirrors. # # If the mirrorlist= does not work for you, as a fall back you can try the # remarked out baseurl= line instead. # # [base] name=CentOS-$releasever - Base #mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=os #baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/ baseurl=http://vault.centos.org/5.11/os/$basearch/ gpgcheck=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-5 #released updates [updates] name=CentOS-$releasever - Updates #mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=updates #baseurl=http://mirror.centos.org/centos/$releasever/updates/$basearch/ baseurl=http://vault.centos.org/5.11/updates/$basearch/ gpgcheck=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-5 #additional packages that may be useful [extras] name=CentOS-$releasever - Extras #mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=extras #baseurl=http://mirror.centos.org/centos/$releasever/extras/$basearch/ baseurl=http://vault.centos.org/5.11/extras/$basearch/ gpgcheck=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-5 #additional packages that extend functionality of existing packages [centosplus] name=CentOS-$releasever - Plus #mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=centosplus #baseurl=http://mirror.centos.org/centos/$releasever/centosplus/$basearch/ baseurl=http://vault.centos.org/5.11/centosplus/$basearch/ gpgcheck=1 enabled=0 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-5 #contrib - packages by Centos Users [contrib] name=CentOS-$releasever - Contrib #mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=contrib #baseurl=http://mirror.centos.org/centos/$releasever/contrib/$basearch/ baseurl=http://vault.centos.org/5.11/contrib/$basearch/ gpgcheck=1 enabled=0 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-5&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt; 重新缓存下yum 即可 yum makecache yum listCentOS-Base.repo文章出处忘记了。","link":"/2019/09/02/centos5-X-yum源地址变更/"},{"title":"[Dovecot] CVE-2019-11500","text":"Dovecot是一款开源的基于类Linux/UNIX系统的IMAP和POP3邮件服务器。 Dovecot 2.2.36.4之前版本和2.3.7.2之前的2.3.x版本中存在安全漏洞。攻击者可利用该漏洞执行远程代码。 影响范围：易受攻击的版本：2.3.7.2和2.2.36.4之前的所有版本 易受攻击的组件：IMAP和ManageSieve协议解析器（之前和之前）登录后a） 消息来源：https://dovecot.org/pipermail/dovecot-news/2019-August/000418.html","link":"/2019/09/02/Dovecot-CVE-2019-11500/"},{"title":"搭建 Discuz 论坛","text":"环境: CentOS release 6.8 (Final) Linux VM_45_133_centos 2.6.32-642.6.2.el6.x86_64 #1 SMP Wed Oct 26 06:52:09 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux 使用 yum 安装 MySQL： yum install mysql-server -y 重启mysql service mysqld restart 配置root密码 /usr/bin/mysqladmin -u root password '33g1eoac' 开机启动 chkconfig mysqld on 安装 Apache 组件 yum install httpd -y service httpd start chkconfig httpd on 安装php yum install php php-fpm php-mysql -y service php-fpm start chkconfig php-fpm on 安装Discuz wget http://download.comsenz.com/DiscuzX/3.2/Discuz_X3.2_SC_UTF8.zip unzip Discuz_X3.2_SC_UTF8.zip 配置 Discuz由于PHP默认访问 /var/www/html/ 文件夹，所以我们需要把upload文件夹里的文件都复制到 /var/www/html/ 文件夹 cp -rf upload/* /var/www/html/ chmod -R 777 /var/www/html service httpd restart 访问http:ip 直接下一步 输入mysql的root密码 ,自定义admin的密码 安装完成: 参考教程：https://cloud.tencent.com/developer/labs/lab/10030","link":"/2019/08/23/搭建-Discuz-论坛/"},{"title":"oracle归档日志","text":"一、查询当前归档日志select * from v$recovery_file_dest; select sum(percent_space_used)*3/100 from v$flash_recovery_area_usage; select * from v$flash_recovery_area_usage; select * from v$version; #ARCHIVED LOG 是归档 #FLASHBACK LOG 是闪回 二、当归档日志满时，执行下面语句清除使用这个连接实例rman rman target sys/ora11g@实例名或者这个也可以： rman target / #这个RMAN列出所有的归档文件连接上rman后 RMAN&gt; list archivelog all;(查看当前日志状态) RMAN&gt; crosscheck archivelog all;删除全部日志delete expired archivelog all;删除一天前的delete archivelog until time &quot;sysdate-1&quot;;删除7天前的delete archivelog until time &quot;sysdate-7&quot;;精确到当天时间delete archivelog until time &quot;to_date('2018-08-10 20:00:00','yyyy-mm-dd hh24:mi:ss')&quot;;RMAN-00554: 内部恢复管理器程序包初始化失败 RMAN-04005: 目标数据库中存在错误: 尝试去掉实例名：rman target sys/ora11g三、开启关闭归档日志SQL&gt; conn/as sysdba; 已连接。 SQL&gt; shutdown immediate; SQL&gt; startup mount; SQL&gt; alter database archivelog; ---归档日志的关闭 SQL&gt; alter database open; SQL&gt; archive log list; 数据库日志模式 存档模式 自动存档 启用 存档终点 USE_DB_RECOVERY_FILE_DEST 最早的联机日志序列 49 下一个存档日志序列 51 当前日志序列 51 ---归档日志的关闭 SQL&gt; shutdown immediate; SQL&gt; startup mount; SQL&gt; alter database noarchivelog; SQL&gt; alter database open; SQL&gt; archive log list; 数据库日志模式 非存档模式 自动存档 禁用 存档终点 USE_DB_RECOVERY_FILE_DEST 最早的联机日志序列 49 当前日志序列 51 SQL&gt;","link":"/2019/08/23/oracle归档日志/"},{"title":"mysql字符集","text":"一、查看 MySQL 数据库服务器和数据库字符集。 mysql&gt; show variables like '%char%'; 二、查看 MySQL 数据表（table） 的字符集。 mysql&gt; show table status from sqlstudy_db like '%countries%';三、查看 MySQL 数据列（column）的字符集。 mysql&gt; show full columns from countries;四、查看当前安装的 MySQL 所支持的字符集。 mysql&gt; show charset; mysql&gt; show char set;以上查看 MySQL 字符集命令，适用于 Windows &amp; Linux。","link":"/2019/08/21/mysql字符集/"},{"title":"同个二级域名使用https证书问题","text":"环境： centos6.10 x64 httpd-2.2.15-60.el6.centos.4.x86_64 背景：主机原有www.aaa.com证书为：http://www.aaa.com 只有单域名的证书 现在要添加一个 https://p3.aaa.com 只是测试域名 所有自建一个https的证书 自建完后 分别配置www.aaa.com与 p3.aaa.com的ssl配置文件 全局ssl配置文件 Listen 443 SSLPassPhraseDialog builtin SSLSessionCache shmcb:/var/cache/mod_ssl/scache(512000) SSLSessionCacheTimeout 300 SSLMutex default SSLRandomSeed startup file:/dev/urandom 256 SSLRandomSeed connect builtin SSLCryptoDevice builtinwww.aaa.com配置文件内容 &lt;VirtualHost www.aaa.com:443&gt; ErrorLog logs/ssl_error_log TransferLog logs/ssl_access_log LogLevel warn SSLEngine on SSLProtocol all -SSLv2 -SSLv3 SSLHonorCipherOrder on SSLCipherSuite HIGH:!RC4:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!EXP:+MEDIUM SSLCertificateFile /etc/httpd/conf/aaa.crt SSLCertificateKeyFile /etc/httpd/conf/aaa.key SSLCertificateChainFile /etc/httpd/conf/ca.crt &lt;Files ~ &quot;\\.(cgi|shtml|phtml|php3?)$&quot;&gt; SSLOptions +StdEnvVars &lt;/Files&gt; &lt;Directory &quot;/var/www/cgi-bin&quot;&gt; SSLOptions +StdEnvVars &lt;/Directory&gt; SetEnvIf User-Agent &quot;.*MSIE.*&quot; \\ nokeepalive ssl-unclean-shutdown \\ downgrade-1.0 force-response-1.0 CustomLog logs/ssl_request_log \\ &quot;%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \\&quot;%r\\&quot; %b&quot; ServerName www.aaa.com JkMount /blogweb* blog2web DocumentRoot /var/www/html/blog2/ &lt;Directory &quot;/var/www/html/blog2/&quot;&gt; allow from all Options -Indexes Order allow,deny Allow from all &lt;/Directory&gt;p3.aaa.com配置文件内容 &lt;VirtualHost p3.aaa.com:443&gt; ErrorLog logs/ssl_error_log TransferLog logs/ssl_access_log LogLevel warn SSLEngine on SSLProtocol all -SSLv2 -SSLv3 SSLHonorCipherOrder on SSLCipherSuite HIGH:!RC4:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!EXP:+MEDIUM SSLCertificateFile /etc/httpd/conf/p3aaa.crt SSLCertificateKeyFile /etc/httpd/conf/p3aaa.key SSLCertificateChainFile /etc/httpd/conf/ca.crt &lt;Files ~ &quot;\\.(cgi|shtml|phtml|php3?)$&quot;&gt; SSLOptions +StdEnvVars &lt;/Files&gt; &lt;Directory &quot;/var/www/cgi-bin&quot;&gt; SSLOptions +StdEnvVars &lt;/Directory&gt; SetEnvIf User-Agent &quot;.*MSIE.*&quot; \\ nokeepalive ssl-unclean-shutdown \\ downgrade-1.0 force-response-1.0 CustomLog logs/ssl_request_log \\ &quot;%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \\&quot;%r\\&quot; %b&quot; ServerName p3.aaa.com JkMount /blog3web* blog3web DocumentRoot /var/www/html/blog3web/ &lt;Directory &quot;/var/www/html/blog3web/&quot;&gt; allow from all Options -Indexes Order allow,deny Allow from all &lt;/Directory&gt; &lt;/VirtualHost&gt;重载httpd服务 service httpd reload测试后发现www.aaa.com与p3.aaa.com只能用一个 在httpd.conf发现 原来NameVirtualHost字段没有配置443 这个字段用于指定虚拟域名 NameVirtualHost 本机IP:443重载httpd服务后 测试通过。 service httpd reload","link":"/2019/08/21/同个二级域名使用https证书问题/"},{"title":"centos7配置安装iptables","text":"关闭firewalld,且禁用 systemctl stop firewalld.service systemctl disable firewalld.service 安装iptables yum install iptables-services -y 配置iptables vi /etc/sysconfig/iptables # sample configuration for iptables service # you can edit this manually or use system-config-firewall # please do not ask us to add additional ports/services to this default configuration *filter :INPUT DROP [0:0] :FORWARD ACCEPT [0:0] :OUTPUT ACCEPT [0:0] -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT -A INPUT -p icmp -j ACCEPT -A INPUT -i lo -j ACCEPT -A INPUT -p tcp -s 192.168.1.0/24 -m state --state NEW -m tcp --dport 22 -j ACCEPT -A INPUT -j REJECT --reject-with icmp-host-prohibited -A FORWARD -j REJECT --reject-with icmp-host-prohibited COMMIT 重启iptables systemctl restart iptables.service","link":"/2019/08/21/centos7配置安装iptables/"},{"title":"google Authenticator加强ssh","text":"环境: CentOS release 6.8 (Final) Linux host.localdomain 4.10.4-1.el6.elrepo.i686 #1 SMP Sat Mar 18 11:05:18 EDT 2017 i686 i686 i386 GNU/Linux OpenSSH_5.3p1, OpenSSL 1.0.1e-fips 11 Feb 2013 安装一些软件依赖 yum -y install wget gcc make pam-devel libpng-devel该软件为非必须包，其主要用于在终端下生成二维码用。 wget http://fukuchi.org/works/qrencode/qrencode-3.4.1.tar.gz tar zxf qrencode-3.4.1.tar.gz cd qrencode-3.4.1 ./configure --prefix=/usr &amp;&amp; make &amp;&amp; make installgoogle authenticator PAM插件安装 git clone https://github.com/google/google-authenticator-libpam cd google-authenticator-libpam/ sh bootstrap.sh ./configure -prefix=/usr/google make &amp;&amp; make install 运行google-authenticator cd /usr/google/ ./google-authenticator 此时终端显示二维码与五个码用于在取不到或错的验证码有错时，用于应急用的。不过每个只能用一次，不能重复使用。 Do you want authentication tokens to be time-based (y/n) y https://www.google.com/chart?chs=200x200&amp;chld=M|0&amp;cht=qr&amp;chl=otpauth://totp/root@wyw%3Fsecret%3DHLGYC5FTL4WKEGNE #这个链接只能在FQ条件下才能打开 Your new secret key is: HLGYC5FTL4WKEGNE #如果在手机的谷歌身份验证器上不想通过&quot;扫描条形码&quot;的方式添加，就输入这个key，通过&quot;手动输入验证码的方式&quot;。账号就是服务器主机 Your verification code is 237334 Your emergency scratch codes are: #下面会生成5个紧急验证码(当无法获取动态验证码或验证码不能使用使用可以使用这5个) 23037330 #需要注意的是：这5个验证码用一个就会少一个！请保存好！ 22153353 56825949 98098052 63067449 Do you want me to update your &quot;/root/.google_authenticator&quot; file (y/n) y #提示是否要更新验证文件，选择y Do you want to disallow multiple uses of the same authentication token? This restricts you to one login about every 30s, but it increases your chances to notice or even prevent man-in-the-middle attacks (y/n) y #禁止使用相同口令 By default, tokens are good for 30 seconds and in order to compensate for possible time-skew between the client and the server, we allow an extra token before and after the current time. If you experience problems with poor time synchronization, you can increase the window from its default size of 1:30min to about 4min. Do you want to do so (y/n) n #默认动态验证码在30秒内有效，由于客户端和服务器可能会存在时间差，可将时间增加到最长4分钟，是否要这么做：这里选择是n，继续默认30秒 If the computer that you are logging into isn't hardened against brute-force login attempts, you can enable rate-limiting for the authentication module. By default, this limits attackers to no more than 3 login attempts every 30s. Do you want to enable rate-limiting (y/n) y #是否限制尝试次数，每30秒只能尝试最多3次，这里选择y进行限制 使用google authenticator 手机客户端扫描二维码 连接成功后 #每30秒换一个 系统配置pam/etc/pam.d/sshd 在第一行添加 auth required /usr/google/lib/security/pam_google_authenticator.so 配置sshd/etc/ssh/sshd_config 修改一个字段为 ChallengeResponseAuthentication yes重载ssh服务 service sshd reload 使用CRT ssh时 要配置 连接时 第一个弹窗时google auth的验证码 第二个是root的密码","link":"/2019/08/20/google-Authenticator加强ssh/"},{"title":"find查找文件的技巧","text":"查找名字为root的文件 find /home -name root 查找包含root的文件 find /home -name &quot;*root*&quot; 查找以root开头的文件 find /home -name root* 查找以root结尾的文件find /home -name *root 查找包含root的普通文件find /home -name &quot;*root*&quot; -type f 查找包含root的文件夹find /home -name &quot;*root*&quot; -type d 查找包含root的文件，且用列表形式显示find /home -name &quot;*root*&quot; -exec ls -l {} \\; 查找包含root的普通文件，且用列表形式显示 find /home -name root -type f -exec ls -l {} \\; 查找大于1G的文件 且用列表形式显示find /home -size +1g -exec ls -l {} \\; 查找等于1G的文件，且用列表形式显示find /home -size 1g -exce ls -l {} \\; 查找小于1G的文件，且用列表形式显示find /home -size -1g -exec ls -l {} \\; 查找大于1G的普通文件，且用列表形式显示 find /home/ -size +1g -type f -exec ls -l {} \\; 查找后缀名为log,大于1G的普通文件，且用列表形式表示find /home/ -size +1g -type f -name &quot;*.log&quot; -exec ls -l {} \\; 查找后缀名为log,大于1G的普通文件，且以判断的方式，选择性删除表示find /home -size +1g -type f -name &quot;*.log&quot; -exec rm -i {} \\; 查找后缀名为log,大于1G的普通文件，且删除（慎用）find /home -size +1g -type f -name &quot;*.log&quot; -exec rm -rf {} \\; 查某一个时间段的普通文件 find / -type f \\( -newermt '2015-01-01 00:00' -a -not -newermt '2015-12-31 23:59' \\) -exec ls -l {} \\; 查某一个时间段的普通文件且统计大小find /usr/share -type f \\( -newermt '2015-01-01 00:00' -a -not -newermt '2015-12-31 23:59' \\) -exec ls -l {} \\; | awk '{sum += $5};END {print sum}' find 排除某些目录代码如下： find /home/zth -path “/home/zth/astetc” -prune -o -type f -printfind / -path &quot;/etc&quot; -prune -o -type f -name &quot;*.conf&quot; -print 按照文件名来搜索则为： 代码如下： find /home/zth -path “/home/zth/astetc” -prune -o -type f -name “cdr_*.conf” -print 要忽略两个以上的路径如何处理？ find /home/zth /（ -path “/home/zth/astetc” -o -path “/home/zth/etc” /） -prune -o -type f -print find /home/zth /（ -path “/home/zth/astetc” -o -path “/home/zth/etc” /） -prune -o -type f -name “cdr_*.conf” -print 注意：/（ 和/） 前后都有空格。 find指定目录层数 find 目录名 -mindepth 2 -maxdepth 2 注意：mindepth和maxdepth后面的数字是指从当前目录下一层开始计数为1，以此类推。","link":"/2019/08/20/find查找文件的技巧/"},{"title":"Centos下的redis安装","text":"下载包redis-3.2.9.tar.gz： 安装必要的包 yum -y install gcc automake autoconf libtool make yum install gcc gcc-c++执行解压操作后 tar -zxvf redis-3.2.9.tar.gz进入redis-3.2.9，执行 make如make时报错： zmalloc.h:50:31: error: jemalloc/jemalloc.h: No such file or directory zmalloc.h:55:2: error: #error &quot;Newer version of jemalloc required&quot; make[1]: *** [adlist.o] Error 1 make[1]: Leaving directory `/data0/src/redis-2.6.2/src' make: *** [all] Error 2解决方法：make MALLOC=libc 编译成功后，进入src文件夹，执行make install进行Redis安装如果遇到： You need tcl 8.5 or newer in order to run the Redis test使用：yum install tcl -y 解决这个问题 三、Redis的部署安装成功后，下面对Redis 进行部署1、首先为了方便管理，将Redis文件中的conf配置文件和常用命令移动到统一文件中a)创建bin和redis.conf文件复制代码代码如下: mkdir -p/usr/local/redis/bin mkdir -p/usr/local/redis/ectb)执行Linux文件移动命令：复制代码代 mv redis-3.2.9/redis.conf /usr/local/redis/etc cd redis-3.2.9/src mv redis-3.2.9/bin下的所有 到 usr/local/redis/bin下 然后再删除以.c .o 结尾的文件 redis登录 redis-cli -a password查看服务端版本二者都可以 redis-server -v redis-server --version","link":"/2019/08/19/Centos下的redis安装/"},{"title":"CVE-2019-1182 | 远程桌面服务远程执行代码漏洞","text":"远程桌面服务（以前称为终端服务）中存在远程执行代码漏洞， 当未经身份验证的攻击者使用RDP连接到目标系统并发送特制请求时。 此漏洞是预身份验证，无需用户交互。成功利用此漏洞的攻击者可以在目标系统上执行任意代码。然后攻击者可以安装程序; 查看，更改或删除数据; 或创建具有完全用户权限的新帐户。 要利用此漏洞，攻击者需要通过RDP向目标系统远程桌面服务发送特制请求。 参考链接:https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-1182","link":"/2019/08/17/CVE-2019-1182-远程桌面服务远程执行代码漏洞/"},{"title":"[壁纸]Hacker桌面二","text":"","link":"/2019/08/15/壁纸-Hacker桌面二/"},{"title":"[壁纸]Hacker桌面","text":"","link":"/2019/08/14/壁纸-Hacker桌面/"},{"title":"Centos配置双公网IP","text":"背景：在centos服务器上配置两个公网IP，希望可以访问两个IP时，可以指向这台机器 环境： [root@smate-yali224 conf]# cat /etc/redhat-release CentOS release 6.9 (Final)配置网卡后 ，系统只支持一个网关。由于公网IP在不同的段，所以需要两个网关。（注意配置网关，别弄的自己远程不了）配置两个网关后，发现有且仅且一个公网IP生效，不能两个同时联网 经上网查后，发现在一个叫“Linux内核的 反向路由检查机制” 东西 Linux默认启用了反向路由检查 当Linux IP协议栈收到一个IP包时，会找路由。 本机的包会往上层协议送，而非本机的包会根据路由转发。 为了防止非法的包被转发或送给上层协议，查找路由后Linux还会调用fib_validate_source()以 检查其来源的合法性，基本原理是根据包的源地址查找路由的出接口，然后比较包的原始入接口是 否和查到的出接口一致;如果一致则放过，如果不一致查询skb->dev的rp_filter值，为1时将丢弃这 个包，0时放过。 如果2个网卡在一个Lan里面,那么服务器可能从eth0或者eth1发现网关, 如果一个包从eth0进入了, 而网关在eth1上, 那么从eth1是出不去的, 就不通了. 反向路由检查要求从哪里来的才能回哪去. 关闭反向路由检查(根据自己的情况替换第二第三行的网卡名)， rp_filter中为1，默认开启。改为0 就关闭了这个检查。 版权声明：本文为CSDN博主「LeocenaY」的原创文章，遵循CC 4.0 by-sa版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/changqing1234/article/details/81068780 我的理解就是：你怎么来的 就怎么出去，如果你乱来，不好意思。rp_filter不放过你。 操作如下：先配置/etc/sysctl.conf 添加下列两行，如果存在就将值改为0： net.ipv4.conf.default.rp_filter = 0 net.ipv4.conf.all.rp_filter = 0重新加载系统参数 sysctl -p 关闭rp_filter echo 0 &gt; /proc/sys/net/ipv4/conf/default/rp_filter echo 0 &gt; /proc/sys/net/ipv4/conf/all/rp_filter echo 0 &gt; /proc/sys/net/ipv4/conf/em3/rp_filter #公网IP1所在网卡 echo 0 &gt; /proc/sys/net/ipv4/conf/em1/rp_filter #公网IP2所在网卡这时通过SSH，两个IP都可以远程上了。设置成功。 参考链接：https://www.cnblogs.com/Cherry-Linux/p/10683525.html","link":"/2019/08/14/Centos配置双公网IP/"},{"title":"Centos6.5下安装mongoDB3.4","text":"环境：centos6.5软件：mongodb-linux-x86_64-rhel62-3.4.5.tgz 下载mongoDB软件包 wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel62-3.4.5.tgz 解压软件包： tar xf mongodb-linux-x86_64-rhel62-3.4.5.tgz -C /usr/ cd /usr/ mv mongodb-linux-x86_64-rhel62-3.4.5 mongodb 创建数据存放目录，日志文件存放目录，主配置文件存放目录 [root@lnmp Mongodb]# mkdir -p /data/db [root@lnmp Mongodb]# mkdir -p /usr/mongo/log [root@lnmp Mongodb]# mkdir -p /usr/mongo/conf 创建日志文件 [root@lnmp Mongodb]# touch /usr/mongo/log/mongo.log 进入bin目录 cd /usr/mongodb/bin 启动程序： nohup /usr/mongo/bin/mongod --dbpath /data/db --logpath /usr/mongo/log/mongo.log 查看端口： [root@lnmp bin]# netstat -tuplan | grep mong tcp 0 0 0.0.0.0:27017 0.0.0.0:* LISTEN 22073/mongod [root@lnmp bin]# 测试： cd /usr/mongo/bin ./mongo 127.0.0.1:21707 输出如下： [root@lnmp bin]# ./mongo 127.0.0.1:21707 MongoDB shell version v3.4.5 connecting to: 127.0.0.1:21707 2019-04-16T18:29:47.753+0800 W NETWORK [thread1] Failed to connect to 127.0.0.1:21707, in(checking socket for error after poll), reason: Connection refused 2019-04-16T18:29:47.758+0800 E QUERY [thread1] Error: couldn't connect to server 127.0.0.1:21707, connection attempt failed : connect@src/mongo/shell/mongo.js:237:13 @(connect):1:6 exception: connect failed [root@lnmp bin]# ./mongo 127.0.0.1:27017 MongoDB shell version v3.4.5 connecting to: 127.0.0.1:27017 MongoDB server version: 3.4.5 Welcome to the MongoDB shell. For interactive help, type &quot;help&quot;. For more comprehensive documentation, see http://docs.mongodb.org/ Questions? Try the support group http://groups.google.com/group/mongodb-user Server has startup warnings: 2019-04-16T18:16:08.242+0800 I STORAGE [initandlisten] 2019-04-16T18:16:08.242+0800 I STORAGE [initandlisten] ** WARNING: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine 2019-04-16T18:16:08.242+0800 I STORAGE [initandlisten] ** See http://dochub.mongodb.org/core/prodnotes-filesystem 2019-04-16T18:16:11.503+0800 I CONTROL [initandlisten] 2019-04-16T18:16:11.519+0800 I CONTROL [initandlisten] ** WARNING: Access control is not enabled for the database. 2019-04-16T18:16:11.519+0800 I CONTROL [initandlisten] ** Read and write access to data and configuration is unrestricted. 2019-04-16T18:16:11.519+0800 I CONTROL [initandlisten] ** WARNING: You are running this process as the root user, which is not recommended. 2019-04-16T18:16:11.519+0800 I CONTROL [initandlisten] 2019-04-16T18:16:11.542+0800 I CONTROL [initandlisten] 2019-04-16T18:16:11.542+0800 I CONTROL [initandlisten] ** WARNING: /sys/kernel/mm/transparent_hugepage/enabled is 'always'. 2019-04-16T18:16:11.542+0800 I CONTROL [initandlisten] ** We suggest setting it to 'never' 2019-04-16T18:16:11.542+0800 I CONTROL [initandlisten] 2019-04-16T18:16:11.542+0800 I CONTROL [initandlisten] ** WARNING: /sys/kernel/mm/transparent_hugepage/defrag is 'always'. 2019-04-16T18:16:11.542+0800 I CONTROL [initandlisten] ** We suggest setting it to 'never' 2019-04-16T18:16:11.542+0800 I CONTROL [initandlisten] &gt; 往数据库中插入值 &gt; db.foo.save({a:1}) WriteResult({ &quot;nInserted&quot; : 1 }) 从数据库中查询 &gt; db.foo.find() { &quot;_id&quot; : ObjectId(&quot;54f02e3b577c993352468185&quot;), &quot;a&quot; : 1 } 安装且测试完成","link":"/2019/08/14/Centos6-5下安装mongoDB3-4/"},{"title":"隐私cookie.reg","text":"通过注册表 快速配置IE浏览器的隐私选项将下列内容保存为xxx.reg 然后使用管理员运行即可 REGEDIT4 //替代自动cookie处理 [HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings] &quot;PrivacyAdvanced&quot;=dword:00000001 [HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Connections] &quot;SavedLegacySettings&quot;=hex:46,00,00,00,eb,13,00,00,01,00,00,00,00,00,00,00,00,\\ 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,\\ 00,00,00,00,00,00,00,00,00,00,00,00,00,00 [HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Zones\\3] &quot;{AEBA21FA-782A-4A90-978D-B72164C80120}&quot;=hex:1a,37,61,59,23,52,35,0c,7a,5f,20,\\ 17,2f,1e,1a,19,0e,2b,01,73,13,37,13,12,14,1a,15,2a,4e,2c,08,0d,20,1b,28,18,\\ 36,32 &quot;{A8A88C49-5EB2-4990-A1A2-0876022C854F}&quot;=hex:1a,37,61,59,23,52,35,0c,7a,5f,20,\\ 17,2f,1e,1a,19,0e,2b,01,73,13,37,13,12,14,1a,15,2a,4e,2c,08,0d,20,1b,28,18,\\ 36,32 //开启弹窗 [HKEY_CURRENT_USER\\Software\\Microsoft\\Internet Explorer\\Geolocation] &quot;BlockAllWebsites&quot;=dword:00000001 [HKEY_CURRENT_USER\\Software\\Microsoft\\Internet Explorer\\New Windows] &quot;PopupMgr&quot;=dword:00000000 [HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Connections] &quot;SavedLegacySettings&quot;=hex:46,00,00,00,ef,13,00,00,01,00,00,00,00,00,00,00,00,\\ 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,\\ 00,00,00,00,00,00,00,00,00,00,00,00,00,00","link":"/2019/08/14/隐私cookie-reg/"},{"title":"IE可信级别.reg","text":"win7的IE浏览器中，通过注册表去快速更改IE选项将下列内容新建为xxx.reg，然后使用管理员去运行即可 REGEDIT4 //可信站点的级别设置（全启用） [HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Nsi\\{eb004a03-9b1a-11d4-9123-0050047759bc}\\24] &quot;ffffffffffffffffffffffffffffff02&quot;=hex:01,00,00,00,00,a4,00,00,f5,be,be,00,ff,\\ ff,ff,ff,ff,ff,ff,ff,ff,ff,ff,ff [HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nsi\\{eb004a03-9b1a-11d4-9123-0050047759bc}\\24] &quot;ffffffffffffffffffffffffffffff02&quot;=hex:01,00,00,00,00,a4,00,00,f5,be,be,00,ff,\\ ff,ff,ff,ff,ff,ff,ff,ff,ff,ff,ff [HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Connections] &quot;SavedLegacySettings&quot;=hex:46,00,00,00,02,14,00,00,01,00,00,00,00,00,00,00,00,\\ 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,\\ 00,00,00,00,00,00,00,00,00,00,00,00,00,00 [HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Zones\\2] &quot;2001&quot;=dword:00000000 &quot;2004&quot;=dword:00000000 &quot;1200&quot;=dword:00000000 &quot;1400&quot;=dword:00000000 &quot;1001&quot;=dword:00000000 &quot;1004&quot;=dword:00000000 &quot;1201&quot;=dword:00000000 &quot;1206&quot;=dword:00000000 &quot;1207&quot;=dword:00000000 &quot;1208&quot;=dword:00000000 &quot;1209&quot;=dword:00000000 &quot;1402&quot;=dword:00000000 &quot;1405&quot;=dword:00000000 &quot;1406&quot;=dword:00000000 &quot;1407&quot;=dword:00000000 &quot;1408&quot;=dword:00000000 &quot;1409&quot;=dword:00000003 &quot;1601&quot;=dword:00000000 &quot;1604&quot;=dword:00000000 &quot;1606&quot;=dword:00000000 &quot;1607&quot;=dword:00000000 &quot;1608&quot;=dword:00000000 &quot;1609&quot;=dword:00000000 &quot;160A&quot;=dword:00000000 &quot;1802&quot;=dword:00000000 &quot;1803&quot;=dword:00000000 &quot;1804&quot;=dword:00000000 &quot;1809&quot;=dword:00000003 &quot;1A00&quot;=dword:00000000 &quot;1A02&quot;=dword:00000000 &quot;1A03&quot;=dword:00000000 &quot;1A04&quot;=dword:00000000 &quot;1A05&quot;=dword:00000000 &quot;1A06&quot;=dword:00000000 &quot;1C00&quot;=dword:00030000 &quot;2000&quot;=dword:00000000 &quot;2005&quot;=dword:00000000 &quot;2100&quot;=dword:00000000 &quot;2101&quot;=dword:00000000 &quot;2102&quot;=dword:00000000 &quot;2103&quot;=dword:00000000 &quot;2104&quot;=dword:00000000 &quot;2105&quot;=dword:00000000 &quot;2106&quot;=dword:00000000 &quot;2200&quot;=dword:00000000 &quot;2201&quot;=dword:00000000 &quot;2300&quot;=dword:00000000 &quot;2301&quot;=dword:00000003 &quot;2400&quot;=dword:00000000 &quot;2401&quot;=dword:00000000 &quot;2402&quot;=dword:00000000 &quot;2600&quot;=dword:00000000 &quot;2700&quot;=dword:00000003 &quot;2007&quot;=dword:00010000 &quot;2107&quot;=dword:00000000 &quot;1806&quot;=dword:00000000 &quot;1812&quot;=dword:00000000 &quot;120B&quot;=dword:00000000 &quot;2701&quot;=dword:00000000 &quot;2702&quot;=dword:00000003 &quot;2703&quot;=dword:00000000 &quot;2704&quot;=dword:00000000 &quot;2708&quot;=dword:00000000 &quot;2709&quot;=dword:00000000 &quot;270B&quot;=dword:00000000 &quot;270C&quot;=dword:00000003 &quot;270D&quot;=dword:00000000 [HKEY_CURRENT_USER\\Software\\YouKu\\iKuAcc] &quot;ShlExtPluginTime&quot;=dword:00063eb1","link":"/2019/08/14/可信级别-reg/"},{"title":"[表情]强者的世界","text":"","link":"/2019/08/14/表情-强者的世界/"},{"title":"Apache禁止游览列出的目录文件列表","text":"在Apache中配置禁止目录访问，即禁止游览列出的目录/文件列表的方法访问网站目录时Apache默认配置为可列出目录/文件列表，即当你访问http://localhost时会列出相关的目录和文件列表，我们可以通过修改Apache配置文件httpd.conf来实现禁止列出目录/文件列表，方法如下： 1、打开apache配置文件httpd.conf2、找到 &lt;Directory /&gt; Options Indexes AllowOverride None Order allow,deny Allow from all &lt;/Directory&gt;只需要修改Options Indexes为Options None即可，注：根据PHP运行环境安装包的不同，Options Indexes也有可能是Options Indexes FollowSymLinks，一并改为Options None即可。 Alias /eg &quot;/data/eg&quot; &lt;Directory &quot;/data/eg&quot;&gt; AddDefaultCharset UTF-8 Options -Indexes FollowSymLinks AllowOverride None Order Allow,deny Allow from all &lt;/Directory&gt;","link":"/2019/08/13/Apache禁止游览列出的目录文件列表/"},{"title":"LVM卸载一个物理硬盘","text":"要卸载一个物理硬盘时，操作如下：#先删除lv lvremove /dev/mapper/VolGroup00-lv_data &lt;!-- more --&gt;#从vg中，卸载这个物理硬盘 vgreduce VolGroup00 /dev/sdb1#从pv中，删除这个物理硬盘 pvremove /dev/sdb1最后修理下fstab文件即可","link":"/2019/08/13/LVM卸载一个物理硬盘/"},{"title":"无我.jpg","text":"","link":"/2019/08/09/无我.jpg/"},{"title":"cannot open shared object file Permission denied","text":"启动 httpd 报错：mod_wl_22.so: cannot open shared object file: Permission denied &lt;!-- more --&gt; [root@weblogicServer ~]# service httpd rstart 当出现正在启动 httpd：httpd: Syntax error on line 221 of /etc/httpd/conf/httpd.conf: Syntax error on line 3 of /etc/httpd/conf.d/egrant.conf: Cannot load /home/weblogic/Oracle/Middleware/wlserver_10.3/server/plugin/linux/x86_64/mod_wl_22.so into server: /home/weblogic/Oracle/Middleware/wlserver_10.3/server/plugin/linux/x86_64/mod_wl_22.so: cannot open shared object file: Permission denied 解决方法：关闭selinux setenforce 0 (临时关闭，重启之后无效)","link":"/2019/04/21/cannot-open-shared-object-file-Permission-denied/"},{"title":"zabbix监控dell服务器","text":"环境：zabbix 2.4.3 服务器型号：Dell PowerEdge R730 服务器系统：CentOS release 6.8 (Final)1、下载官网下的监控包 wget -q -O - http://linux.dell.com/repo/hardware/latest/bootstrap.cgi | bash2、安装依赖包 yum -y install OpenIPMI yum install srvadmin-all -y3、安装完成对相关命令做软链接或者设置srvadmin的环境变量 ln -s /opt/dell/srvadmin/sbin/omreport /usr/bin/omreport ln -s /opt/dell/srvadmin/sbin/omconfig /usr/bin/omconfig4、启动OMSA /etc/init.d/dataeng start5、加入到开机自启动 chkconfig dataeng on6、开启web界面（可以不开） /opt/dell/srvadmin/sbin/srvadmin-services.sh start 使用https://IP:1131访问：用户名与密码是系统的root 7、OMSA查看温度的命令： omreport chassis temps8、输出的结果如下： [root@egrant scripts]#omreport chassis temps Temperature Probes Information ------------------------------------ Main System Chassis Temperatures: Ok ------------------------------------ Index : 0 Status : Ok Probe Name : System Board Inlet Temp Reading : 21.0 C Minimum Warning Threshold : 3.0 C Maximum Warning Threshold : 42.0 C Minimum Failure Threshold : -7.0 C Maximum Failure Threshold : 47.0 C Index : 1 Status : Ok Probe Name : System Board Exhaust Temp Reading : 30.0 C Minimum Warning Threshold : 0.0 C Maximum Warning Threshold : 70.0 C Minimum Failure Threshold : 0.0 C Maximum Failure Threshold : 75.0 C Index : 2 Status : Ok Probe Name : CPU1 Temp Reading : 48.0 C Minimum Warning Threshold : 8.0 C Maximum Warning Threshold : 85.0 C Minimum Failure Threshold : 3.0 C Maximum Failure Threshold : 90.0 C Index : 3 Status : Ok Probe Name : CPU2 Temp Reading : 49.0 C Minimum Warning Threshold : 8.0 C Maximum Warning Threshold : 85.0 C Minimum Failure Threshold : 3.0 C Maximum Failure Threshold : 90.0 C zabbix方面思路：我们捕捉：”Probe Name“ 与其对应的 “Reading”，使其在zabbix监控起来。 1、在客户端上/usr/local/zabbix/scripts 编写如下脚本，且命名为[check_dell.sh]： #!/bin/bash #function:monitor tcp connect status from zabbix source /etc/bashrc &gt;/dev/null 2&gt;&amp;1 source /etc/profile &gt;/dev/null 2&gt;&amp;1 #定义发现函数 dell_temp_discovery () { #temps=($(omreport chassis temps |grep 'Probe Name' | awk -F ':' '{print $2}')) #数组模式添加温度项 temps[0]=&quot;System_Board_Inlet_Temp&quot; temps[1]=&quot;System_Board_Exhaust_Temp&quot; temps[2]=&quot;CPU1_Temp&quot; temps[3]=&quot;CPU2_Temp&quot; #length=${#temps[3]} length=4 #打印json格式 printf &quot;{\\n&quot; printf '\\t'&quot;\\&quot;data\\&quot;:[&quot; for ((i=0;i&lt;$length;i++)) do printf &quot;\\n\\t\\t{&quot; printf &quot;\\t\\&quot;{#DELL_TEMP}\\&quot;:\\&quot;${temps[$i]}\\&quot;}\\n&quot; if [ $i -lt $[$length-1] ];then printf &quot;,&quot; fi done printf &quot;\\n\\t]\\n&quot; printf &quot;}\\n&quot; } #case分情况判断对应的温度数值 case &quot;$1&quot; in dell_temp_discovery) dell_temp_discovery ;; System_Board_Inlet_Temp) omreport chassis temps | grep -C 1 &quot;System Board Inlet Temp&quot; | grep Reading | awk '{print $3}' ;; System_Board_Exhaust_Temp) omreport chassis temps | grep -C 1 &quot;System Board Exhaust Temp&quot; | grep Reading | awk '{print $3}' ;; CPU1_Temp) omreport chassis temps | grep -C 1 &quot;CPU1 Temp&quot; | grep Reading | awk '{print $3}' ;; CPU2_Temp) omreport chassis temps | grep -C 1 &quot;CPU2 Temp&quot; | grep Reading | awk '{print $3}' ;; *) &quot;Usage:$0 {dell_temp_discovery|System_Board_Inlet_Temp｜System_Board_Exhaust_Temp｜CPU1_Temp｜CPU2_Temp}&quot; ;; esac2、在/usr/local/zabbix/etc/zabbix_agentd.conf.d 添加自定义键值的配置文件dellmachine.conf #发现温度项的名称 UserParameter=check.dell.discover[*],sh /usr/local/zabbix/scripts/check_dell.sh dell_temp_discovery #查询温度数值 UserParameter=dell.temps[*],sh /usr/local/zabbix/scripts/check_dell.sh $1PS：添加完记得重启下zabbix客户端服务 3、zabbix服务端网页上在配置“自动发现”图我就不截图 别问为什么","link":"/2019/01/24/zabbix监控dell服务器/"},{"title":"netca配置监听失败与监听程序不支持服务","text":"netca配置监听失败问题解决方法： 1、关闭ipv6 1） vim /etc/modprobe.conf在其中加入下面这一行， install ipv6 /bin/true保存并退出。 2）# vim /etc/sysconfig/network在其中加入下面配置项： NETWORKING_IPV6=no IPV6INIT=no2、查看配置的hostname 1) vi /etc/sysconfig/network NETWORKING=yes HOSTNAME=centos //在这修改hostname2)修改/etc/hosts里面的名字vi /etc/hosts 127.0.0.1 localhost.localdomain localhost 本地IP地址 主机名//在这修改hostname3）修改监视程序的tnsnames.ora配置文件 Vi {ORACLE_HOME}/network/admin/tnsnames.ora # tnsnames.ora Network Configuration File: /u02/app/oracle/network/admin/tnsnames.ora # Generated by Oracle configuration tools. ORA11G = (DESCRIPTION = (ADDRESS = (PROTOCOL = TCP)(HOST = IP地址)(PORT = 1521)) (CONNECT_DATA = (SERVER = DEDICATED) (SERVICE_NAME = ora11g) ) ) LISTENER_ORA11G = (ADDRESS = (PROTOCOL = TCP)(HOST = IP地址)(PORT = 1521))改这两处IP地址为你机子的IP地址 3、重启系统 检查IPv6： lsmod | grep ipv6 检查hostname 若用lsnrctl start 开启监听程序时，提示：监听程序不支持服务 LSNRCTL for Linux: Version 11.0.2.4.2.0 - Production on 08-10月-2019 09:26:04 Copyright (c) 1991, 2014, Oracle. All rights reserved. 启动/u01/app/oracle/product/11.0.2.4/dbhome_1/bin/tnslsnr: 请稍候... TNSLSNR for Linux: Version 11.0.2.4.2.0 - Production 系统参数文件为/u01/app/oracle/product/11.0.2.4/dbhome_1/network/admin/listener.ora 写入/u01/app/oracle/diag/tnslsnr/ora11g/listener/alert/log.xml的日志信息 监听: (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=ora11g)(PORT=1521))) 正在连接到 (ADDRESS=(PROTOCOL=tcp)(HOST=)(PORT=1521)) LISTENER 的 STATUS ------------------------ 别名 LISTENER 版本 TNSLSNR for Linux: Version 11.0.2.4 - Production 启动日期 08-10月-2019 09:26:04 正常运行时间 0 天 0 小时 0 分 0 秒 跟踪级别 off 安全性 ON: Local OS Authentication SNMP OFF 监听程序参数文件 /u01/app/oracle/product/11.0.2.4/dbhome_1/network/admin/listener.ora 监听程序日志文件 /u01/app/oracle/diag/tnslsnr/ora11g/listener/alert/log.xml 监听端点概要... (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=ora11g)(PORT=1521))) 监听程序不支持服务 命令执行成功 [root@ora11g ~]# 解决方法： A：编辑$ORACLE_HOME/network/admin/listener.ora文件 ， vi $ORACLE_HOME/network/admin/listener.ora添加： SID_LIST_LISTENER = (SID_LIST = (SID_DESC = (SID_NAME = PLSExtProc) ) )再用lsnrctl 重启下就行了。","link":"/2018/11/18/netca配置监听失败与监听程序不支持服务/"},{"title":"prvf-0002无法检索本地节点名","text":"安装oracle时，报错：prvf-0002无法检索本地节点名 解决方法：这种情况是/etc/hosts文件没有写好，要添加对本机解析才行格式： 静态IP 主机名","link":"/2018/11/08/prvf-0002无法检索本地节点名/"},{"title":"oracle表空间处理操作","text":"查看表空间使用率： SELECT SUM(bytes) / (1024 * 1024) AS free_space, tablespace_name FROM dba_free_space GROUP BY tablespace_name; SELECT a.tablespace_name, a.bytes total, b.bytes used, c.bytes free, (b.bytes * 100) / a.bytes &quot;% USED &quot;, (c.bytes * 100) / a.bytes &quot;% FREE &quot; FROM sys.sm$ts_avail a, sys.sm$ts_used b, sys.sm$ts_free c WHERE a.tablespace_name = b.tablespace_name AND a.tablespace_name = c.tablespace_name; 查看数据文件位置 Select * FROM DBA_DATA_FILES;扩容表空间： ALTER TABLESPACE &quot;USERS&quot; ADD DATAFILE '/u02/app/ora11g/users03.dbf' SIZE 8G;","link":"/2018/09/27/oracle表空间处理操作/"},{"title":"CentOS6.x下oracle数据库启动和关闭操作","text":"第一步：登陆root登陆之后切换到oracle用户上，输入 su - oracle第二步：连接 在oracle用户下，输入 sqlplus /nolog第三步：使用管理员权限输入 sql&gt;connect /as sysdba第四步：启动服务 输入 sql&gt;startup startup参数不带参数，启动数据库实例并打开数据库，以便用户使用数据库，在多数情况下，使用这种方式！ nomount，只启动数据库实例，但不打开数据库，在你希望创建一个新的数据库时使用，或者在你需要这样的时候使用！ mount，在进行数据库更名的时候采用。这个时候数据库就打开并可以使用了！ 关闭服务 sql&gt;shutdownshutdown的参数 Normal 需要等待所有的用户断开连接 Immediate 等待用户完成当前的语句 Transactional 等待用户完成当前的事务 Abort 不做任何等待，直接关闭数据库 normal需要在所有连接用户断开后才执行关闭数据库任务，所以有的时候看起来好象命令没有运行一样！在执行这个命令后不允许新的连接 immediate在用户执行完正在执行的语句后就断开用户连接，并不允许新用户连接。 transactional 在拥护执行完当前事物后断开连接，并不允许新的用户连接数据库。 abort 执行强行断开连接并直接关闭数据库。 第五步：启动服务后，要开启监听退出sqlplus模式，输入 lsnrctl start","link":"/2018/05/13/CentOS6-x下oracle数据库启动和关闭操作/"},{"title":"oracle机器的主机名带下划线","text":"CentOS6.x安装oracle database千万不要设置包含有下划线的主机名，不然搞死你。 解决步骤： 要改主机名 要改~/.bash_profile中的$ORACLE_HOMENAME的值 要改listence.ora文件 重启系统 开监听程序 开数据库 重建数据库 开EM控制台 关防火墙","link":"/2018/05/08/oracle机器的主机名带下划线/"},{"title":"CentOS6.x 配置163的yum源","text":"1、进入/etc/yum.repos.d/ [root@oracle ~]# cd /etc/yum.repos.d/ [root@oracle yum.repos.d]# ll 总用量 16 -rw-r--r--. 1 root root 1926 11月 27 2013 CentOS-Base.repo -rw-r--r--. 1 root root 638 11月 27 2013 CentOS-Debuginfo.repo -rw-r--r--. 1 root root 630 11月 27 2013 CentOS-Media.repo -rw-r--r--. 1 root root 3664 11月 27 2013 CentOS-Vault.repo 2、备份原来的yum文件， [root@oracle yum.repos.d]# mv CentOS-Base.repo CentOS-Base.repo.bak [root@oracle yum.repos.d]# wget http://mirrors.163.com/.help/CentOS6-Base-163.repo --2017-03-08 01:58:25-- http://mirrors.163.com/.help/CentOS6-Base-163.repo 正在解析主机 mirrors.163.com... 正在连接 mirrors.163.com... 已连接。 已发出 HTTP 请求，正在等待回应... 200 OK 长度：2006 (2.0K) [application/octet-stream] 正在保存至: “CentOS6-Base-163.repo” 100%[==============================================================================&gt;] 2,006 --.-K/s in 0s 2017-03-08 01:58:26 (20.0 MB/s) - 已保存 “CentOS6-Base-163.repo” [2006/2006]) 3、查看文件列表 [root@oracle yum.repos.d]# ll 总用量 20 -rw-r--r--. 1 root root 2006 9月 18 2014 CentOS6-Base-163.repo -rw-r--r--. 1 root root 1926 11月 27 2013 CentOS-Base.repo.bak -rw-r--r--. 1 root root 638 11月 27 2013 CentOS-Debuginfo.repo -rw-r--r--. 1 root root 630 11月 27 2013 CentOS-Media.repo -rw-r--r--. 1 root root 3664 11月 27 2013 CentOS-Vault.repo 4、使用163的yum.repo配置文件 [root@oracle yum.repos.d]# mv CentOS6-Base-163.repo CentOS-Base.repo 5、更新yum缓存 [root@oracle yum.repos.d]# yum clean all ; yum makecache; yum update","link":"/2018/04/04/CentOS6-x-配置163的yum源/"},{"title":"Ubuntu16.10安装Pycharm","text":"1、安装Java jdk sudo apt-get update sudo apt-get install default-jre sudo apt-get install default-jdk sudo apt-get install python-software-properties2、安装pycharm (1)到官网下载安装包 (2)到下载目录下进行解压 cd Downloads/ tar xfz pycharm-*.tar.gz(3)运行解压后的文件夹中的bin目录下的pycharm.sh文件 cd pycharm-community-3.4.1/bin/ ./pycharm.sh安装过程中根据提示选择 pycharm2016.3 key: 43B4A73YYJ-eyJsaWNlbnNlSWQiOiI0M0I0QTczWVlKIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMTctMDItMjUifSx7ImNvZGUiOiJBQyIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IkRQTiIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDE3LTAyLTI1In0seyJjb2RlIjoiRE0iLCJwYWlkVXBUbyI6IjIwMTctMDItMjUifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IlJTMCIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IlJDIiwicGFpZFVwVG8iOiIyMDE3LTAyLTI1In0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMTctMDItMjUifSx7ImNvZGUiOiJSTSIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9LHsiY29kZSI6IldTIiwicGFpZFVwVG8iOiIyMDE3LTAyLTI1In0seyJjb2RlIjoiREIiLCJwYWlkVXBUbyI6IjIwMTctMDItMjUifSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAxNy0wMi0yNSJ9XSwiaGFzaCI6IjMzOTgyOTkvMCIsImdyYWNlUGVyaW9kRGF5cyI6MCwiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-keaxIkRgXPKE4BR/ZTs7s7UkP92LBxRe57HvWamu1EHVXTcV1B4f/KNQIrpOpN6dgpjig5eMVMPmo7yMPl+bmwQ8pTZaCGFuLqCHD1ngo6ywHKIQy0nR249sAUVaCl2wGJwaO4JeOh1opUx8chzSBVRZBMz0/MGyygi7duYAff9JQqfH3p/BhDTNM8eKl6z5tnneZ8ZG5bG1XvqFTqWk4FhGsEWdK7B+He44hPjBxKQl2gmZAodb6g9YxfTHhVRKQY5hQ7KPXNvh3ikerHkoaL5apgsVBZJOTDE2KdYTnGLmqxghFx6L0ofqKI6hMr48ergMyflDk6wLNGWJvYHLWw==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==3、设置快捷启动方式 sudo gedit /usr/share/applications/Pycharm.desktop然后输入以下内容，注意Exec和Icon需要找到正确的路径 [Desktop Entry] Type=Application Name=Pycharm GenericName=Pycharm3 Comment=Pycharm3:The Python IDE Exec=&quot;/XXX/pycharm-community-3.4.1/bin/pycharm.sh&quot; %f Icon=/XXX/pycharm-community-3.4.1/bin/pycharm.png Terminal=pycharm Categories=Pycharm;4、然后图形界面到/usr/share/applications中找到相应的启动，复制到桌面即可。","link":"/2018/03/20/Ubuntu16-10安装Pycharm/"},{"title":"vm-clone虚拟机造成网卡问题","text":"Bringing up interface eth0: Device eth0 does not seem to be present, delaying initialization. 原因是clone虚拟机造成的。 只要保证 vmwrare virtual machine的.vmx配置文件、 /etc/sysconfig/network-scripts/ifcfg-eth0 、 /etc/udev/rules.d/70-persistent-net.rules，所使用的网卡设备和MAC地址一致即可。 1、 vmwrare virtual machine的.vmx配置文件，在你母机上的找到你的.vmx配置文件，然后用“记事本”打开 找到“ethernet0.generatedAddress”，记下MAC 2、将这个MAC复制到/etc/sysconfig/network-scripts/ifcfg-eth1，若没有eth1,就重命名ifcfg-eth0为ifcfg-eth1,然后把MAC粘贴到“HWADDR” 3、 打开/etc/udev/rules.d/70-persistent-net.rules，把name=eth0的那行注释掉。 4、 重启网络即可！ /etc/init.d/network restart 或 service network restart","link":"/2018/03/19/vm-clone虚拟机造成网卡问题/"},{"title":"Python 报错 Temporary failure in name resolution","text":"在学习python的网络编程时: socket.gaierror: [Errno -3] Temporary failure in name resolution &lt;!-- more --&gt;后来发现是DNS解析出了问题, 解决方法: 在”/etc/hosts”中,加上自己的本机与IP的映射 保存退出","link":"/2018/03/19/Pyhont-报错-Temporary-failure-in-name-resolution/"},{"title":"Linux的history命令","text":"1、查看历史命令 [root@shell ~]# history 2、历史命令存放在哪个文件中？ ~username/.bash_history [root@shell ~]# ls /root/.bash_history 3、默认最多保存1000条历史命令 [root@shell ~]# set | grep -i hist BASHOPTS=checkwinsize:cmdhist:expand_aliases:extquote:force_fignore:hostcomplete:interactive_comments:progcomp:promptvars:sourcepath HISTCONTROL=ignoredups HISTFILE=/root/.bash_history HISTFILESIZE=1000 HISTSIZE=1000 SHELLOPTS=braceexpand:emacs:hashall:histexpand:history:interactive-comments:monitor 4、清空历史命令 [root@rui ~]# history -c 5、设置历史查看格式 [root@rui ~]# HISTTIMEFORMAT=&quot; %F %T `whoami`----&quot; [root@rui ~]# history 2 2017-02-23 15:32:04 root----history 3 2017-02-23 15:33:04 root----HISTTIMEFORMAT=&quot; %F ----&quot; 4 2017-02-23 15:33:09 root----history 5 2017-02-23 15:33:35 root----man HISTTIMEFORMAT 6 2017-02-23 15:37:38 root----HISTTIMEFORMAT=&quot; %F %T `whoami`----&quot; 7 2017-02-23 15:37:42 root----history","link":"/2018/03/19/Linux的history命令/"},{"title":"[转]Ubuntu 14.04下安装文本编辑软件 CherryTree 0.33.0","text":"文本编辑软件 CherryTree 0.33.0 已经发布，下面说说Ubuntu下安装方法。 CherryTree是一款文本编辑器，拥有先进的编辑功能，如语法高亮、拼写检查、导出到HTML、密码保护、以及其他许多功能。可用的最新版本CherryTree 0.33.0，最近已发布。有关更多信息，请参阅官方发布公告。 1、下载 Ubuntu 14.04下没有PPA可用，直接下载deb安装包 免费下载地址在 http://linux.linuxidc.com/ 用户名与密码都是www.linuxidc.com具体下载目录在 /2014年资料/4月/24日/Ubuntu 14.04下安装文本编辑软件 CherryTree 0.33.0 2、安装 sudo apt-get install gdebi进入您下载cherrytree文件的所有文件夹 sudo gdebi cherrytree_0.33.0-1_all.deb出处：http://www.linuxidc.com/Linux/2014-04/100698.htm","link":"/2018/02/11/转-Ubuntu-14-04下安装文本编辑软件-CherryTree-0-33-0/"},{"title":"LVM磁盘之LVM的创建","text":"什么是LVM？ 什么是LVM?LVM(Logical Volume Manager)逻辑卷管理，是一种将一个或多个硬盘的分区在逻辑上集合，相当于一个大硬盘来使用，当硬盘的空间不够使用的时候，可以继续将其它的硬盘的 分区加入其中，这样可以事项一种磁盘空间的动态管理，相对于普通的磁盘分区有很大的灵活性，使用普通的磁盘分区，当一个磁盘的分区空间不够使用的时候，可 能就会带来很大的麻烦。使用LVM在一定程度上就可以解决普通磁盘分区带来的问题。 为什么使用LVM?LVM通常用于装备大量磁盘的系统，但它同样适于仅有一、两块硬盘的小系统。 小系统使用LVM的益处?传统的文件系统是基于分区的，一个文件系统对应一个分区。这种方式比较直观，但不易改变：1.不同的分区相对独立，无相互联系，各分区空间很易利用不平衡，空间不能充分利用；2.当一个文件系统/分区已满时，无法对其扩充，只能采用重新分区/建立文件系统，非常麻烦；或把分区中的数据移到另一个更大的分区中；或采用符号连接的方式使用其它分区的空间。3.如果要把硬盘上的多个分区合并在一起使用，只能采用再分区的方式，这个过程需要数据的备份与恢复。当采用LVM时，情况有所不同：1.硬盘的多个分区由LVM统一为卷组管理，可以方便的加入或移走分区以扩大或减小卷组的可用容量，充分利用硬盘空间；2.文件系统建立在逻辑卷上，而逻辑卷可根据需要改变大小(在卷组容量范围内)以满足要求；3.文件系统建立在LVM上，可以跨分区，方便使用； 大系统使用LVM的益处?在使用很多硬盘的大系统中，使用LVM主要是方便管理、增加了系统的扩展性。 在一个有很多不同容量硬盘的大型系统中，对不同的用户的空间分配是一个技巧性的工作，要在用户需求与实际可用空间中寻求平衡。用户/用户组的空间建立在LVM上，可以随时按要求增大，或根据使用情况对各逻辑卷进行调整。当系统空间不足而加入新的硬盘时，不必把用户的数据从原硬盘迁 移到新硬盘，而只须把新的分区加入卷组并扩充逻辑卷即可。同样，使用LVM可以在不停服务的情况下。把用户数据从旧硬盘转移到新硬盘空间中去。 PV（(Physical Volume）:物理盘，可以是磁盘或分区VG（(Volume Group）：卷组，LV（(Logical Volume）:逻辑卷，空间大小可以动态 1、分区 [root@rui ~]# fdisk /dev/sdb Command (m for help): p Disk /dev/sdb: 21.5 GB, 21474836480 bytes 255 heads, 63 sectors/track, 2610 cylinders Units = cylinders of 16065 * 512 = 8225280 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk identifier: 0x6e871b62 Device Boot Start End Blocks Id System Command (m for help): n Command action e extended p primary partition (1-4) p Partition number (1-4): 1 First cylinder (1-2610, default 1): Using default value 1 Last cylinder, +cylinders or +size{K,M,G} (1-2610, default 2610): +1G Command (m for help): n Command action e extended p primary partition (1-4) p Partition number (1-4): 2 First cylinder (133-2610, default 133): Using default value 133 Last cylinder, +cylinders or +size{K,M,G} (133-2610, default 2610): +5G #设置lvm磁盘标识 Command (m for help): t Partition number (1-4): 1 Hex code (type L to list codes): 8e Changed system type of partition 1 to 8e (Linux LVM) Command (m for help): t Partition number (1-4): 2 Hex code (type L to list codes): 8e Changed system type of partition 2 to 8e (Linux LVM) Command (m for help): p Disk /dev/sdb: 21.5 GB, 21474836480 bytes 255 heads, 63 sectors/track, 2610 cylinders Units = cylinders of 16065 * 512 = 8225280 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk identifier: 0x6e871b62 Device Boot Start End Blocks Id System /dev/sdb1 1 132 1060258+ 8e Linux LVM /dev/sdb2 133 786 5253255 8e Linux LVM Command (m for help): w The partition table has been altered! Calling ioctl() to re-read partition table. Syncing disks. [root@rui ~]# 重启系统或partprobe重读分区表 /dev/sdc的步骤同上的 2、用pvcreate来创建pv pvcreate /dev/sdb1 /dev/sdb2 /dev/sdc1 /dev/sdc2 将上面四个分区做pv 3、使用vgcreate 创建 VG vgcreate vgname /dev/1 /dev/2 /dev/sdc1 /dev/sdc2 4、使用lvcreate创建一个逻辑分区（lv） lvcreate -L 500M -n lvname vgname-L 指定大小-n 指定名字","link":"/2017/03/13/LVM磁盘之LVM的创建/"},{"title":"emctl start dbconsole报错","text":"emctl start dbconsole报错如下： [oracle@oracle123 ~]$ emctl start dbconsole The following exception occurred: java.net.UnknownHostException: egrantdb: egrantdb at java.net.InetAddress.getAllByName0(InetAddress.java:1174) at java.net.InetAddress.getAllByName(InetAddress.java:1101) at java.net.InetAddress.getAllByName(InetAddress.java:1037) at java.net.InetAddress.getByName(InetAddress.java:987) at oracle.sysman.emd.targetIntg.agent.AgentTargetInstaller.getLocalHost(AgentTargetInstaller.java:4289) at oracle.sysman.emd.targetIntg.agent.AgentTargetInstaller.printLocalHost(AgentTargetInstaller.java:4252) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:592) at oracle.sysman.emd.targetIntg.Util$DefaultIntegrationMethod.execute(Util.java:598) at oracle.sysman.emd.targetIntg.TargetInstaller.execute_(TargetInstaller.java:167) at oracle.sysman.emd.targetIntg.TargetInstaller.execute(TargetInstaller.java:155) at oracle.sysman.emSDK.conf.TargetInstaller.printLocalHost(TargetInstaller.java:2364) at oracle.sysman.emSDK.conf.TargetInstaller.main(TargetInstaller.java:3290) Although there was an exception it might be possible for the program to continue. Environment variable ORACLE_UNQNAME not defined. Please set ORACLE_UNQNAME to database unique name. [oracle@oracle123 ~]$ 解决方法1、使hosts与~/.bash_profile的export ORACLE_HOSTNAME=值 相同，一般我们改./bash_profile [oracle@oracle123 ~]$ vim ~/.bash_profile 2、重载环境配置文件 [oracle@oracle123 ~]$ source ~/.bash_profile3、再次尝试启动em [oracle@oracle123 ~]$ emctl start dbconsole OC4J Configuration issue. /u02/app/oracle/oc4j/j2ee/OC4J_DBConsole_oracle123_ora11g not found. 报错减少了。 4、此时需要对emcontrol 进行重建注意数据库要在startup状态下进行重建，否则创建不成功! [oracle@oracle123 OC4J_DBConsole]$ emca -repos recreate EMCA 开始于 2017-3-8 10:10:40 EM Configuration Assistant, 11.2.0.3.0 正式版 版权所有 (c) 2003, 2011, Oracle。保留所有权利。 输入以下信息: 数据库 SID: ora11g 监听程序端口号: 1521 SYS 用户的口令: SYSMAN 用户的口令: ---------------------------------------------------------------------- 警告: 当删除资料档案库时, 数据库将进入静默模式。 ---------------------------------------------------------------------- 是否继续? [是(Y)/否(N)]: y 2017-3-8 10:11:08 oracle.sysman.emcp.EMConfig perform 信息: 正在将此操作记录到 /u02/app/cfgtoollogs/emca/ora11g/emca_2017_03_08_10_10_39.log。 2017-3-8 10:11:09 oracle.sysman.emcp.EMReposConfig invoke 信息: 正在删除 EM 资料档案库 (此操作可能需要一段时间)... 2017-3-8 10:13:51 oracle.sysman.emcp.EMReposConfig invoke 信息: 已成功删除资料档案库 2017-3-8 10:13:51 oracle.sysman.emcp.EMReposConfig createRepository 信息: 正在创建 EM 资料档案库 (此操作可能需要一段时间)... 2017-3-8 10:21:31 oracle.sysman.emcp.EMReposConfig invoke 信息: 已成功创建资料档案库 已成功完成 Enterprise Manager 的配置 EMCA 结束于 2017-3-8 10:21:31 [oracle@oracle123 OC4J_DBConsole]$ 5、重建EM [oracle@oracle123 OC4J_DBConsole]$ emca -config dbcontrol db EMCA 开始于 2017-3-8 10:22:33 EM Configuration Assistant, 11.2.0.3.0 正式版 版权所有 (c) 2003, 2011, Oracle。保留所有权利。 输入以下信息: 数据库 SID: ora11g 监听程序端口号: 1521 监听程序 ORACLE_HOME [ /u02/app/oracle ]: SYS 用户的口令: SYS 用户的口令: SYS 用户的口令: SYS 用户的口令: DBSNMP 用户的口令: SYSMAN 用户的口令: SYSMAN 用户的口令: 通知的电子邮件地址 (可选): 通知的发件 (SMTP) 服务器 (可选): ----------------------------------------------------------------- 已指定以下设置 数据库 ORACLE_HOME ................ /u02/app/oracle 本地主机名 ................ oracle123 监听程序 ORACLE_HOME ................ /u02/app/oracle 监听程序端口号 ................ 1521 数据库 SID ................ ora11g 通知的电子邮件地址 ............... 通知的发件 (SMTP) 服务器 ............... ----------------------------------------------------------------- 是否继续? [是(Y)/否(N)]: y 2017-3-8 10:23:24 oracle.sysman.emcp.EMConfig perform 信息: 正在将此操作记录到 /u02/app/cfgtoollogs/emca/ora11g/emca_2017_03_08_10_22_32.log。 2017-3-8 10:23:33 oracle.sysman.emcp.EMReposConfig uploadConfigDataToRepository 信息: 正在将配置数据上载到 EM 资料档案库 (此操作可能需要一段时间)... 2017-3-8 10:25:31 oracle.sysman.emcp.EMReposConfig invoke 信息: 已成功上载配置数据 2017-3-8 10:25:35 oracle.sysman.emcp.util.DBControlUtil secureDBConsole 信息: 正在保护 Database Control (此操作可能需要一段时间)... 2017-3-8 10:26:22 oracle.sysman.emcp.util.DBControlUtil secureDBConsole 信息: 已成功保护 Database Control。 2017-3-8 10:26:22 oracle.sysman.emcp.util.DBControlUtil startOMS 信息: 正在启动 Database Control (此操作可能需要一段时间)... 2017-3-8 10:28:21 oracle.sysman.emcp.EMDBPostConfig performConfiguration 信息: 已成功启动 Database Control 2017-3-8 10:28:21 oracle.sysman.emcp.EMDBPostConfig performConfiguration 信息: &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Database Control URL 为 https://oracle123:1158/em &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 2017-3-8 10:28:31 oracle.sysman.emcp.EMDBPostConfig invoke 警告: ************************ WARNING ************************ 管理资料档案库已置于安全模式下, 在此模式下将对 Enterprise Manager 数据进行加密。加密密钥已放置在文件 /u02/app/oracle/oracle123_ora11g/sysman/config/emkey.ora 中。请务必备份此文件, 因为如果此文件丢失, 则加密数据将不可用。 *********************************************************** 已成功完成 Enterprise Manager 的配置 EMCA 结束于 2017-3-8 10:28:31 6、再次启动，发现成功启动EM [oracle@oracle123 OC4J_DBConsole]$ emctl start dbconsole Oracle Enterprise Manager 11g Database Control Release 11.2.0.4.0 Copyright (c) 1996, 2013 Oracle Corporation. All rights reserved. https://oracle123:1158/em/console/aboutApplication - An instance of Oracle Enterprise Manager 11g Database Control is already running. [oracle@oracle123 OC4J_DBConsole]$ 成功启动~","link":"/2017/03/08/emctl-start-dbconsole报错/"}],"tags":[{"name":"linux","slug":"linux","link":"/tags/linux/"},{"name":"centos","slug":"centos","link":"/tags/centos/"},{"name":"oracle","slug":"oracle","link":"/tags/oracle/"},{"name":"docker","slug":"docker","link":"/tags/docker/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"越狱","slug":"越狱","link":"/tags/越狱/"},{"name":"iptables","slug":"iptables","link":"/tags/iptables/"},{"name":"mysql","slug":"mysql","link":"/tags/mysql/"},{"name":"nginx","slug":"nginx","link":"/tags/nginx/"},{"name":"zabbix","slug":"zabbix","link":"/tags/zabbix/"},{"name":"apple","slug":"apple","link":"/tags/apple/"}],"categories":[{"name":"运维","slug":"运维","link":"/categories/运维/"},{"name":"安全资迅","slug":"安全资迅","link":"/categories/安全资迅/"},{"name":"吹水","slug":"吹水","link":"/categories/吹水/"}]}